void __exit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_0121_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0800_0121_entry:
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0121:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	__restorezero(ds_3)
	word16 sp_6
	selector ds_7
	selector cs_8
	word16 ax_9
	byte SZO_10
	byte C_11
	word16 si_12
	word16 cx_13
	byte D_14
	byte al_15
	byte SCZO_16
	byte ah_17
	byte Z_18
	word16 dx_19
	word16 bp_20
	selector ss_21
	word16 bx_22
	call SEQ(cs, Mem0[ds_3:0x05DC:word16]) (retsize: 2; depth: 4)
		uses: cs,ds_3,sp_4
		defs: ah_17,al_15,ax_9,bp_20,bx_22,C_11,cs_8,cx_13,D_14,ds_7,dx_19,SCZO_16,si_12,sp_6,ss_21,SZO_10,Z_18
	word16 ax_23 = 0x0000
	byte al_24 = 0x00
	byte ah_25 = 0x00
	word16 si_29 = 0x0000
	word16 cx_30 = 0x002F
// DataOut: ah al cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0137:
	al_24 = al_24 + Mem0[ds_7:si_29:byte]
	ah_25 = ah_25 + (al_24 <u 0x00)
	ax_23 = DPB(ax_23, ah_25, 8) (alias)
	si_29 = si_29 + 0x0001
	cx_30 = cx_30 - 0x0001
	branch cx_30 != 0x0000 l0800_0137
// DataOut: ah al ax cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_013F:
	byte al_48 = (byte) (ax_23 - 0x0D37)
	branch ax_23 == 0x0D37 l0800_014F
// DataOut: al ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_0145:
	fn0800_01DA(al_48, 0x0019, 0x002F, ds_7)
// DataOut: al sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_014F:
	msdos_terminate(Mem0[ss_21:sp_6 + 0x0002:byte])
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid> bx:0x0002



void fn0800_0162(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cs ds
// LiveOut:
// Trashed: ah al ax bh bl bx dh dl dx eax ebx edx es rax rbx rdx
// Preserved: ds sp
fn0800_0162_entry:
// DataOut: cs ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0162:
	word32 es_bx_7 = msdos_get_interrupt_vector(0x00)
	Mem10[ds:0x0074:word16] = (word16) es_bx_7
	Mem11[ds:0x0076:word16] = SLICE(es_bx_7, selector, 16)
	word32 es_bx_14 = msdos_get_interrupt_vector(0x04)
	Mem17[ds:0x0078:word16] = (word16) es_bx_14
	Mem18[ds:0x007A:word16] = SLICE(es_bx_14, selector, 16)
	word32 es_bx_21 = msdos_get_interrupt_vector(0x05)
	Mem24[ds:0x007C:word16] = (word16) es_bx_21
	Mem25[ds:0x007E:word16] = SLICE(es_bx_21, selector, 16)
	word32 es_bx_28 = msdos_get_interrupt_vector(0x06)
	Mem31[ds:0x0080:word16] = (word16) es_bx_28
	Mem32[ds:0x0082:word16] = SLICE(es_bx_28, selector, 16)
	msdos_set_interrupt_vector(0x00, SEQ(cs, 0x0158))
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0162_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2500 Sequence es:bx:<invalid> dx:0x0158 ds:ds -2(fp):ds



void __restorezero(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: ah al ax dh dl ds dx eax edx rax rdx
// Preserved: ds sp
fn0800_01A5_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01A5:
	msdos_set_interrupt_vector(0x00, Mem0[ds:0x0074:segptr32])
	msdos_set_interrupt_vector(0x04, Mem0[ds:0x0078:segptr32])
	msdos_set_interrupt_vector(0x05, Mem0[ds:0x007C:segptr32])
	msdos_set_interrupt_vector(0x06, Mem0[ds:0x0080:segptr32])
	return
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01A5_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2506 Sequence ds:dx:<invalid> ds:ds -2(fp):ds



word16 fn0800_01DA(byte al, word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx ds dx
// LiveOut: bx
// Trashed: C ah ax bh bl bx eax ebx rax rbx
// Preserved: sp
fn0800_01DA_entry:
// DataOut: al cx ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_01DA:
	word16 ax_8
	msdos_write_file(0x0002, cx, ds_dx, out ax_8)
	return 0x0002
// DataOut: al bx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01DA_exit:
// DataOut: bx
// DataOut (flags): 
// SymbolicIn: sp:fp ah:0x40 bx:0x0002



void _abort(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E2_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E2:
	selector ds_5 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, 0x001E, 0x0056, ds_5)
	__exit()
	Mem14[ds_5:bx_7 + si:byte] = Mem0[ds_5:bx_7 + si:byte] + 0x03
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0800_01F8_thunk__f3:
	_f3()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003

fn0800_01E2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003



void fn0800_01E9(byte al, word16 cx, word16 dx, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx dx si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E9_entry:
// DataOut: al cx dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E9:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, cx, dx, ds_3)
	__exit()
	Mem14[ds_3:bx_7 + si:byte] = Mem0[ds_3:bx_7 + si:byte] + 0x03
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0800_01F8_thunk__f3:
	_f3()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003

fn0800_01E9_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003



void _f3()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
_f3_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FA:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

_f3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void _f2()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
_f2_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FF:
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	_f3()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

_f2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_0222()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_0222_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0222:
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	_f2()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0222_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void _f0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
_f0_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0245:
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

_f0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void _main(word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: bp sp
_main_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000E(16)

l0800_0265:
	word16 di_12
	selector es_13
	word16 bx_14 = _printf(ds, 0x0194, out di_12, out es_13)
	_scanf(bx_14, di_12, es_13, ds, 0x01B0)
	Mem31[ss:fp - 0x000C:word16] = Mem0[ss:fp - 0x0004:word16]
	Mem34[ss:fp - 0x000E:word16] = Mem31[ss:fp - 0x0006:word16]
	Mem37[ss:fp - 0x0010:word16] = 0x01B4
	word16 di_39
	selector es_40
	_printf(ds, wArg00, out di_39, out es_40)
	Mem44[ss:fp - 0x0008:word16] = 0x0000
	Mem45[ss:fp - 0x000A:word16] = 0x0001
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0002(0)

l0800_02A7:
	word16 dx_46 = Mem45[ss:fp - 0x0008:word16]
	word16 ax_47 = Mem45[ss:fp - 0x000A:word16]
	branch dx_46 < Mem45[ss:fp - 0x0004:word16] l0800_029C
// DataOut: ax bp ds sp ss
// DataOut (flags): SZO
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B2:
	branch dx_46 > Mem45[ss:fp - 0x0004:word16] l0800_02B9
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B4:
	branch ax_47 <=u Mem45[ss:fp - 0x0006:word16] l0800_029C
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_029C:
	_f0()
	word16 v14_54 = Mem45[ss:fp - 0x000A:word16] + 0x0001
	Mem55[ss:fp - 0x000A:word16] = v14_54
	Mem59[ss:fp - 0x0008:word16] = Mem55[ss:fp - 0x0008:word16] + (v14_54 <u 0x0000)
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B9:
	Mem65[ss:fp - 0x000C:word16] = 0x01CE
	word16 di_66
	selector es_67
	_printf(ds, wArg00, out di_66, out es_67)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp

_main_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp



word16 __IOERROR(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_02C5_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_02C5:
	word16 si_17
	word16 si_11 = wArg02
	branch wArg02 < 0x0000 l0800_02E4
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_02E4:
	si_17 = -wArg02
	branch si_17 >u 0x0023 l0800_02D5
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02EB:
	Mem44[ds:0x01D8:word16] = 0xFFFF
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D0:
	branch wArg02 <=u 0x0058 l0800_02D8
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D5:
	si_11 = 0x0057
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D8:
	Mem30[ds:0x01D8:word16] = si_11
	si_17 = (int16) Mem30[ds:si_11 + 0x01DA:byte]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02F1:
	Mem19[ds:0x0094:word16] = si_17
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02FB:
	return 0xFFFF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp

fn0800_02C5_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp



void _exit(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0002(16)
// Terminates process
fn0800_0301_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0301:
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0002(16)

l0800_0310:
	word16 ax_21 = Mem0[ds:0x023E:word16]
	Mem23[ds:0x023E:word16] = Mem0[ds:0x023E:word16] - 0x0001
	branch ax_21 != 0x0000 l0800_0306
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_0306:
	word16 sp_75
	word16 bp_76
	selector ss_77
	word16 ax_78
	byte SZO_80
	byte C_81
	byte Z_82
	word16 cx_84
	word16 bx_85
	byte SCZO_86
	call SEQ(cs, Mem23[ds:(Mem23[ds:0x023E:word16] << 0x0001) + 0x05E8:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_73,C_27,cs_14,cx_17,ds_15,SCZO_74,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_78,bp_76,bx_85,C_81,cs_83,cx_84,ds_79,SCZO_86,sp_75,ss_77,SZO_80,Z_82
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_031B:
	word16 sp_28
	word16 bp_29
	selector ss_30
	word16 ax_31
	selector ds_32
	byte SZO_33
	byte C_34
	byte Z_35
	selector cs_36
	word16 cx_37
	word16 bx_38
	byte SCZO_39
	call SEQ(cs, Mem23[ds:0x0234:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_13,C_27,cs_14,cx_17,ds_15,SCZO_12,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,Z_35
	word16 sp_40
	word16 bp_41
	selector ss_42
	word16 ax_43
	selector ds_44
	byte SZO_45
	byte C_46
	byte Z_47
	selector cs_48
	word16 cx_49
	word16 bx_50
	byte SCZO_51
	call SEQ(cs_36, Mem23[ds_32:0x0236:word16]) (retsize: 2; depth: 2)
		uses: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,wLoc02_4,Z_35
		defs: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,Z_47
	word16 sp_52
	word16 bp_53
	selector ss_54
	word16 ax_55
	selector ds_56
	byte SZO_57
	byte C_58
	byte Z_59
	selector cs_60
	word16 cx_61
	word16 bx_62
	byte SCZO_63
	call SEQ(cs_48, Mem23[ds_44:0x0238:word16]) (retsize: 2; depth: 2)
		uses: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,wLoc02_4,Z_47
		defs: ax_55,bp_53,bx_62,C_58,cs_60,cx_61,ds_56,SCZO_63,sp_52,ss_54,SZO_57,Z_59
	Mem67[ss_54:sp_52 - 0x0002:word16] = wArg02
	__exit()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// Terminates process

fn0800_0301_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: cx:<invalid> sp:sp + 0x0006 bp:<invalid> -2(fp):bp



void __setargv(byte al, selector ds, word16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0000(16)
fn0800_0336_entry:
// DataOut: al ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0000(16)

l0800_0336:
	selector es_44
	Mem3[0x0800:0x0330:word16] = wArg00
	Mem6[0x0800:0x0332:word16] = ds
	selector es_8 = Mem6[ds:0x0090:selector]
	word16 ax_13 = DPB(ax, Mem6[ds:0x0080:byte], 0)
	word16 si_23 = Mem6[ds:0x008A:word16]
	word16 cx_25 = 0x0001
	es_44 = es_8
	branch Mem6[ds:0x0092:byte] <u 0x03 l0800_0374
// DataOut: bp bx cx ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0363:
	es_44 = Mem6[ds:0x008C:selector]
	word16 di_70 = si_23 + 0x0002
	byte cl_71 = 0x7F
	word16 cx_72 = 0x007F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:bx bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:0x0001
// LocalsOut: fp(16)

l0800_036D:
	branch cx_72 == 0x0000 l0800_036F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036D_1:
	cx_72 = cx_72 - 0x0001
	di_70 = di_96 + 0x0001
	cl_71 = (byte) cx_72 (alias)
	word16 di_96 = di_70
	branch 0x00 == Mem6[es_44:di_96:byte] l0800_036D
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F:
	branch cx_72 == 0x0000 l0800_03E7
// DataOut: al bp bx cl dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F_thunk_fn0800_03E7:
	fn0800_03E7(0x00, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0371:
	cx_25 = DPB(cx_72, cl_71 ^ 0x7F, 0) (alias)
// DataOut: bp bx cx dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_0374:
	word16 ax_51 = ax_13 + 0x0002 + cx_25
	byte al_53 = (byte) (ax_51 & 0xFFFE)
	word16 di_55 = fp - ((ax_51 & 0xFFFE) & 0xFFFE)
	branch di_55 <u 0x0000 l0800_03E7
// DataOut: al bp bx cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0385_thunk_fn0800_03E7:
	fn0800_03E7(al_53, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0387:
	Mem65[ss:di_55 - 0x0002:word16] = cx_25
	word16 cx_66 = cx_25 - 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0392_thunk_fn0800_0393:
	fn0800_0393(cx_66, 0x0081, ax_13 + 0x0001, es_8, si_23 + 0x0002, di_55, ss, es_44)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:ss si:<invalid> ah:<invalid> al:<invalid> ax:ss bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>

fn0800_0336_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:ss si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:<invalid> bx:<invalid> cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>



void fn0800_038D(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx cx di ds dx si ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_038D_entry:
// DataOut: bp bx cx di ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_038D:
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0392_thunk_fn0800_0393:
	fn0800_0393(cx - 0x0001, dx, bx, bp, si, di, ss, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:ss es:ss cx:cx - 0x0001 -2(fp):cx

fn0800_038D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx



void fn0800_0393(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx cx di ds dx es si ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_0393_entry:
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_0393:
	branch cx == 0x0000 l0800_0395
// DataOut: bp bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> si:<invalid> di:<invalid> cx:<invalid>
// LocalsOut: v3(16)

l0800_0395:
	Mem18[es:di:byte] = 0x00
	word16 di_19 = di + 0x0001
	word16 si_24 = dx
	word16 cx_27 = bx
	word16 ax_29 = cx
	byte al_30 = (byte) cx
	word16 dx_31 = cx
	word16 bx_32 = cx + 0x0001
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 si:<invalid> di:<invalid> cx:<invalid>

l0800_03A3:
	byte CZ_47 = fn0800_03BF(ax_29, cx_27, dx_31, bx_32, si_24, di_19, es, bp, out ax_29, out cx_27, out dx_31, out bx_32, out si_24, out di_19)
	byte C_48 = CZ_47
	branch CZ_47 l0800_03AF
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): C
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03A8:
	branch C_48 l0800_03EA
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03EA:
	word16 cx_135 = Mem18[ss:v3:word16] + dx_31
	selector ds_99 = Mem18[0x0800:0x0332:selector]
	Mem100[ds_99:0x0084:word16] = bx_32
	word16 si_103 = v3 + 0x0002
	word16 bp_105 = v3 + 0x0002 - (bx_32 + 0x0001) * 0x0002
	branch bp_105 <u 0x0000 l0800_03E7
// DataOut: al bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03FF_thunk_fn0800_03E7:
	fn0800_03E7(al_30, v3 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 + 0x0002 al:<invalid> di:<invalid> ds:<invalid> si:v3 + 0x0002 cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>
// Terminates process

l0800_0401:
	Mem126[ds_99:0x0086:word16] = bp_105
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 + 0x0002 al:<invalid> di:<invalid> ds:<invalid> si:v3 + 0x0002 cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0407:
	branch cx_135 == 0x0000 l0800_0417
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0409:
	Mem158[ss:bp_105:word16] = si_103
	bp_105 = bp_105 + 0x0002
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_040F:
	byte al_163 = Mem158[ds_99:si_103:byte]
	si_103 = si_103 + 0x0001
	cx_135 = cx_135 - 0x0001
	branch al_163 != 0x00 && cx_135 != 0x0000 l0800_040F
// DataOut: bp cx ds si ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0415:
	branch al_163 == 0x00 l0800_0407
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0417:
	Mem140[ss:bp_105:word16] = 0x0000
	word16 sp_141
	word16 cx_142
	selector ds_143
	word16 si_144
	selector es_145
	word16 di_146
	byte al_147
	byte SZO_148
	byte C_149
	word16 bp_150
	word16 dx_151
	word16 bx_152
	word16 ax_153
	byte CZ_154
	byte SCZO_155
	byte Z_156
	selector ss_157
	call Mem140[0x0800:0x0330:word16] (retsize: 4; depth: 4)
		uses: al_131,ax_137,bp_136,bx_102,C_139,cx_135,CZ_128,di_82,ds_99,dx_73,es,SCZO_129,si_134,sp_125,ss,SZO_138,Z_130
		defs: al_147,ax_153,bp_150,bx_152,C_149,cx_142,CZ_154,di_146,ds_143,dx_151,es_145,SCZO_155,si_144,sp_141,ss_157,SZO_148,Z_156
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

fn0800_0393_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_03AA:
	byte CZ_90 = fn0800_03BF(ax_29, cx_27, dx_31, bx_32, si_24, di_19, es, bp, out ax_29, out cx_27, out dx_31, out bx_32, out si_24, out di_19)
	C_48 = CZ_90 (alias)
	branch CZ_90 l0800_03A8
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): C
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03AF:
	branch al_30 == 0x20 l0800_03BB
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03B3:
	branch al_30 == 0x0D l0800_03BB
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03B7:
	branch al_30 != 0x09 l0800_03A3
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03BB:
	al_30 = 0x00
	ax_29 = DPB(ax_29, 0x00, 0) (alias)
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_0393_1:
	Mem11[es:di:byte] = Mem0[ds:si:byte]
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 si:<invalid> di:<invalid> cx:<invalid>
// LocalsOut: v3(16)



byte fn0800_03BF(word16 ax, word16 cx, word16 dx, word16 bx, word16 si, word16 di, selector es, selector ds, ptr16 & axOut, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx cx di ds dx es si
// LiveOut: CZ al ax bx cx di dx si
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ah sp
fn0800_03BF_entry:
	*dxOut = dx
	*diOut = di
	*bxOut = bx
	*cxOut = cx
	*siOut = si
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03BF:
	word16 ax_16 = ax
	byte al_4 = (byte) ax
	branch ax == 0x0000 l0800_03CA
// DataOut: ah al bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03C3:
	Mem78[es:di:byte] = al_4
	word16 dx_77
	*dxOut = dx + 0x0001
	word16 di_80
	*diOut = di + 0x0001
	ax_16 = DPB(ax, al_4, 0) (alias)
	branch al_4 != 0x00 l0800_03CA
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:ax

l0800_03C9:
	word16 bx_86
	*bxOut = bx + 0x0001
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al

l0800_03CA:
	word16 ax_21
	*axOut = DPB(ax_16, 0x00, 0)
	byte CZ_26 = true
	branch cx == 0x0000 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al bx:bx + 0x0001

l0800_03D1:
	byte al_46 = Mem0[ds:si:byte]
	word16 si_47 = si + 0x0001
	*siOut = si_47
	word16 cx_48 = cx - 0x0001
	*cxOut = cx_48
	word16 ax_50
	*axOut = DPB(ax_16, al_46 - 0x22, 0)
	CZ_26 = cond(al_46 - 0x22) (alias)
	branch al_46 == 0x22 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:0x00 ah:ah bx:bx + 0x0001

l0800_03D7:
	word16 ax_57
	*axOut = DPB(ax_16, al_46, 0)
	branch al_46 != 0x5C l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03DD:
	branch Mem0[ds:si + 0x0001:byte] != 0x22 l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E2:
	word16 ax_73
	*axOut = DPB(ax_16, Mem0[ds:si + 0x0001:byte], 0)
	si_47 = si + 0x0002
	word16 cx_75
	*cxOut = cx - 0x0002
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E4:
	word16 si_64
	*siOut = si_47
	CZ_26 = false (alias)
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

l0800_03E6:
	return CZ_26
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

fn0800_03BF_exit:
// DataOut: al ax bx cx di dx si
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001



void fn0800_03E7(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_03E7_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7_thunk__abort:
	_abort(al, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn0800_03E7_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:



void __setenvp(word16 si, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds si ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ds sp
fn0800_0421_entry:
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16)

l0800_0421:
	word16 cx_4 = Mem0[ds:0x008A:word16]
	word16 ax_7 = _malloc(ds, cx_4)
	word16 cx_66 = cx_4
	word16 di_10 = ax_7
	byte al_12 = (byte) ax_7
	branch ax_7 == 0x0000 l0800_0454
// DataOut: al ax cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0430:
	selector ds_59 = Mem0[ds:0x008C:selector]
	si = 0x0000
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> dx:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16)

l0800_043A:
	branch cx_66 == 0x0000 l0800_043C
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)

l0800_043C:
	word16 ax_80 = _malloc(ds, Mem0[ds:0x008E:word16])
	Mem85[ds:0x0088:word16] = ax_80
	word16 di_105 = ax_7
	word16 bx_101 = ax_80
	al_12 = (byte) ax_80 (alias)
	branch ax_80 != 0x0000 l0800_0457
// DataOut: al bx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds

l0800_0457:
	word16 cx_106 = 0xFFFF
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_045C:
	Mem100[ds:bx_101:word16] = di_105
	bx_101 = bx_101 + 0x0002
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461:
	branch cx_106 == 0x0000 l0800_0463
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461_1:
	di_105 = di_105 + 0x0001
	cx_106 = cx_106 - 0x0001
	branch 0x00 == Mem100[ds:di_105:byte] l0800_0461
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0463:
	branch Mem100[ds:di_105:byte] != 0x00 l0800_045C
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0468:
	Mem111[ds:bx_101:word16] = 0x0000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0454:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_0454_thunk__abort:
	_abort(al_12, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

fn0800_0421_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_043A_1:
	Mem68[ds:di_10:byte] = Mem0[ds_59:si:byte]
	si = si + 0x0001
	di_10 = di_10 + 0x0001
	cx_66 = cx_66 - 0x0001
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)



void ___pull_free_block(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0491_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0491:
	word16 ax_16 = Mem0[ds:wArg02 + 0x0006:word16]
	Mem17[ds:0x062A:word16] = ax_16
	branch ax_16 != wArg02 l0800_04AB
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_04AB:
	word16 si_30 = Mem17[ds:wArg02 + 0x0004:word16]
	Mem32[ds:Mem17[ds:0x062A:word16] + 0x0004:word16] = si_30
	Mem34[ds:si_30 + 0x0006:word16] = Mem32[ds:0x062A:word16]
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04A3:
	Mem28[ds:0x062A:word16] = 0x0000
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04BB:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0491_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04BF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_04BF_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_04BF:
	Mem19[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - wArg04
	word16 si_21 = Mem19[ds:wArg02:word16] + wArg02
	Mem24[ds:si_21:word16] = wArg04 + 0x0001
	Mem25[ds:si_21 + 0x0002:word16] = wArg02
	branch Mem25[ds:0x0628:word16] != wArg02 l0800_04E6
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0004(16)

l0800_04E6:
	Mem43[ds:si_21 + wArg04 + 0x0002:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04E0:
	Mem39[ds:0x0628:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04EE:
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04F5:
	return si_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_04BF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04F9(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_04F9_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_04F9:
	word16 ax_30
	word16 ax_21 = ___sbrk(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_051B
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_051B:
	Mem42[ds:ax_21 + 0x0002:word16] = Mem0[ds:0x0628:word16]
	Mem45[ds:ax_21:word16] = wArg02 + 0x0001
	Mem46[ds:0x0628:word16] = ax_21
	ax_30 = Mem46[ds:0x0628:word16] + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0517:
	ax_30 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0533:
	return ax_30
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_04F9_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 fn0800_0536(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0536_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0536:
	word16 ax_30
	word16 ax_21 = ___sbrk(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_0558
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0558:
	Mem40[ds:0x062C:word16] = ax_21
	Mem41[ds:0x0628:word16] = ax_21
	Mem44[ds:ax_21:word16] = wArg02 + 0x0001
	ax_30 = ax_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0554:
	ax_30 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_056D:
	return ax_30
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_0536_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 _malloc(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0570_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0570:
	word16 ax_102
	branch wArg02 == 0x0000 l0800_0581
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16)

l0800_057C:
	branch wArg02 <=u 0xFFF4 l0800_0585
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0585:
	word16 ax_49 = wArg02 + 0x000B & 0xFFF8
	branch Mem0[ds:0x062C:word16] != 0x0000 l0800_059D
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_059D:
	word16 si_104 = Mem0[ds:0x062A:word16]
	branch si_104 == 0x0000 l0800_05D8
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05A7:
	branch Mem0[ds:si_104:word16] <u ax_49 + 0x0028 l0800_05BB
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05BB:
	branch Mem0[ds:si_104:word16] <u ax_49 l0800_05CF
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05CF:
	si_104 = Mem0[ds:si_104 + 0x0006:word16]
	branch si_104 != Mem0[ds:0x062A:word16] l0800_05A7
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05D8:
	ax_102 = fn0800_04F9(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05C1:
	___pull_free_block(ds, si_104)
	Mem100[ds:si_104:word16] = Mem0[ds:si_104:word16] + 0x0001
	ax_102 = si_104 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05B2:
	ax_102 = fn0800_04BF(ds, si_104, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0596:
	ax_102 = fn0800_0536(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0581:
	ax_102 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05DF:
	return ax_102
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> si:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0570_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si dx:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



void ___brk(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_05E3_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_05E3:
	branch wArg02 >=u fp - 0x0102 l0800_05FA
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_05FA:
	Mem22[ds:0x0094:word16] = 0x0008
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_05F3:
	Mem17[ds:0x009E:word16] = wArg02
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_0605:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

fn0800_05E3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:fp - 0x0102 -2(fp):bp



word16 ___sbrk(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_0607_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_0607:
	word16 ax_31
	word16 ax_12 = wArg02 + Mem0[ds:0x009E:word16]
	ui32 dx_cx_18 = SEQ(wArg04 + (ax_12 <u 0x0000), ax_12 + 0x0100)
	word16 cx_22 = (word16) (dx_cx_18 + 0x00000100)
	branch SEQ(SLICE(dx_cx_18 + 0x00000100, word16, 16), cx_22) != 0x00000000 l0800_062E
// DataOut: ax cx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0624:
	branch cx_22 >=u fp - 0x0002 l0800_062E
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_062E:
	Mem37[ds:0x0094:word16] = 0x0008
	ax_31 = 0xFFFF
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0628:
	word16 v13_42 = Mem0[ds:0x009E:word16]
	Mem43[ds:0x009E:word16] = ax_12
	ax_31 = v13_42
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0639:
	return ax_31
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

fn0800_0607_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp



void _brk(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_063B_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_063B:
	___brk(ds, wArg02)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0647:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_063B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp



word16 fn0800_065B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_065B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_065B:
	word16 ax_30
	word16 si_17 = Mem0[ds:wArg02:word16]
	word16 wLoc04_19 = si_17
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_067B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Stack +0002(16)

l0800_067B:
	word16 di_40 = Mem0[ds:wArg02 + 0x000A:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068E:
	si_17 = si_17 - 0x0001
	branch si_17 != 0x0000 l0800_0683
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0683:
	di_40 = di_60 + 0x0001
	word16 di_60 = di_40
	branch Mem0[ds:di_60:byte] != 0x0A l0800_068E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068B:
	wLoc04_19 = wLoc04_19 + 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0695:
	ax_30 = wLoc04_19
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0677:
	ax_30 = si_17
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_069A:
	return ax_30
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_065B_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> si:si ax:<invalid> di:di -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void _fseek(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_06A2_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06A2:
	branch _fflush(ds, wArg02) == 0x0000 l0800_06B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06B7:
	branch wArg08 != 0x0001 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06BD:
	branch Mem0[ds:wArg02:word16] <= 0x0000 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06C2:
	wArg04 = wArg04 - (word16) ((int32) fn0800_065B(ds, wArg02))
	wArg06 = v16
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06CD:
	Mem64[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFE5F
	Mem67[ds:wArg02:word16] = 0x0000
	Mem69[ds:wArg02 + 0x000A:word16] = Mem67[ds:wArg02 + 0x0008:word16]
	word16 ax_81 = (int16) Mem69[ds:wArg02 + 0x0004:byte]
	word16 dx_85
	word16 ax_86 = _lseek((byte) ax_81, ds, ax_81, wArg04, wArg06, (byte) wArg08, out dx_85)
	branch dx_85 != 0xFFFF l0800_06FF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> Sequence dx:ax:<invalid> al:<invalid> dx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06F5:
	branch ax_86 != 0xFFFF l0800_06FF
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FF:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FA:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_0701:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06B2:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0703:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>

fn0800_06A2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>



void fn0800_075B(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: di si sp
fn0800_075B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_075B:
	word16 di_16 = 0x0014
	word16 si_17 = 0x0344
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0778:
	di_16 = di_16 - 0x0001
	branch di_16 != 0x0000 l0800_0765
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0765:
	branch (Mem0[ds:si_17 + 0x0000:word16] & 0x0300) != 0x0300 l0800_0775
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0770:
	_fflush(ds, si_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0775:
	si_17 = si_17 + 0x0010
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_077F:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si

fn0800_075B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si



word16 fn0800_0782(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0782_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0782:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0793
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0790:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0793:
	word16 ax_35
	word16 v10_16 = Mem0[ds:wArg02 + 0x0006:word16]
	word16 ax_19 = Mem0[ds:wArg02 + 0x0008:word16]
	Mem20[ds:wArg02 + 0x000A:word16] = ax_19
	word16 ax_27 = _read(ds, (int16) Mem20[ds:wArg02 + 0x0004:byte], ax_19, v10_16)
	Mem29[ds:wArg02:word16] = ax_27
	branch ax_27 <= 0x0000 l0800_07B9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07B9:
	branch Mem29[ds:wArg02:word16] != 0x0000 l0800_07CC
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07CC:
	Mem63[ds:wArg02:word16] = 0x0000
	Mem65[ds:wArg02 + 0x0002:word16] = Mem63[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07BE:
	Mem62[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07D5:
	ax_35 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07AE:
	Mem44[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFFDF
	ax_35 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07DA:
	return ax_35
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_0782_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void _fgetc(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_07F2_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16) Stack +0002(16)

l0800_07F2:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_07FC:
	word16 v8_37 = Mem0[ds:wArg02:word16] - 0x0001
	Mem38[ds:wArg02:word16] = v8_37
	branch v8_37 < 0x0000 l0800_080E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_080E:
	word16 v15_65 = Mem38[ds:wArg02:word16] + 0x0001
	Mem66[ds:wArg02:word16] = v15_65
	branch v15_65 < 0x0000 l0800_0819
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0812:
	branch (Mem66[ds:wArg02 + 0x0002:word16] & 0x0110) == 0x0000 l0800_0824
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0824:
	Mem90[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0080
	branch Mem90[ds:wArg02 + 0x0006:word16] == 0x0000 l0800_0842
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0842:
	branch Mem90[ds:0x04AA:word16] != 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0849:
	branch 0x0342 != wArg02 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0881:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_088B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_0888:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_088B:
	word16 ax_122 = (int16) Mem90[ds:wArg02 + 0x0004:byte]
	__read((byte) ax_122, ds, ax_122, fp - 0x0003, 0x0001)
	branch 0xFFFE == 0x0000 l0800_08C9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> ah:<invalid> bx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_08C9:
	branch bLoc03 != 0x0D l0800_08D6
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08CF:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08D6:
	Mem156[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFFDF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08A3:
	branch _eof(ds, (int16) Mem90[ds:wArg02 + 0x0004:byte]) == 0x0001 l0800_08B8
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B8:
	Mem150[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B1:
	Mem142[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08C4:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0850:
	branch _isatty((int16) Mem90[ds:wArg02 + 0x0004:byte]) != 0x0000 l0800_0862
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:0x0342 al:0x42 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x03 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_085D:
	Mem207[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFDFF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_0862:
	word16 ax_184
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0872
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0872:
	ax_184 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_086D:
	ax_184 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0874:
	_setvbuf(ds, wArg02, 0x0000, ax_184, 0x0200)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:0x00 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_082F:
	branch fn0800_0782(ds, wArg02) == 0x0000 l0800_083D
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_083D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0837:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0819:
	Mem71[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0800:
	Mem60[ds:wArg02 + 0x000A:word16] = Mem38[ds:wArg02 + 0x000A:word16] + 0x0001
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08E2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp

fn0800_07F2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp



word16 _isatty(word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_08F2_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_08F2:
	word16 dx_8
	msdos_ioctl_get_device_info(wArg02, out dx_8)
	return dx_8 & 0x0080
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_08F2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:dx & 0x0080 -2(fp):bp



void _setvbuf(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_0904_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_0904:
	branch Mem0[ds:wArg02 + 0x000E:word16] != wArg02 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0916:
	branch wArg06 > 0x0002 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_091C:
	branch wArg08 <=u 0x7FFF l0800_0928
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0928:
	branch Mem0[ds:0x04AC:word16] != 0x0000 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_092F:
	branch 0x0352 != wArg02 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_093E:
	branch Mem0[ds:0x04AA:word16] != 0x0000 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0945:
	branch 0x0342 != wArg02 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_094C:
	Mem159[ds:0x04AA:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0342 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0936:
	Mem163[ds:0x04AC:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0352 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0952:
	branch Mem0[ds:wArg02:word16] == 0x0000 l0800_0966
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0957:
	_fseek(ds, wArg02, 0x0000, 0x0000, 0x0001)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0966:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0004) == 0x0000 l0800_0974
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_096D:
	_free(ds, Mem0[ds:wArg02 + 0x0008:word16])
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0974:
	Mem76[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFFF3
	Mem78[ds:wArg02 + 0x0006:word16] = 0x0000
	Mem81[ds:wArg02 + 0x0008:word16] = wArg02 + 0x0005
	Mem82[ds:wArg02 + 0x000A:word16] = wArg02 + 0x0005
	branch wArg06 == 0x0002 l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_098F:
	branch false l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0993:
	Mem100[ds:0x0234:word16] = 0x09D6
	branch wArg04 != 0x0000 l0800_09B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_099F:
	word16 ax_121 = _malloc(ds, wArg08)
	wArg04 = ax_121
	branch ax_121 == 0x0000 l0800_09B2
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B2:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09AB:
	Mem130[ds:wArg02 + 0x0002:word16] = Mem100[ds:wArg02 + 0x0002:word16] | 0x0004
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B7:
	Mem110[ds:wArg02 + 0x000A:word16] = wArg04
	Mem111[ds:wArg02 + 0x0008:word16] = wArg04
	Mem112[ds:wArg02 + 0x0006:word16] = wArg08
	branch wArg06 != 0x0001 l0800_09CE
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09C9:
	Mem116[ds:wArg02 + 0x0002:word16] = Mem112[ds:wArg02 + 0x0002:word16] | 0x0008
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09CE:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_0922:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_09D2:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>

fn0800_0904_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>



word16 _read(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_09F7_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_09F7:
	word16 ax_101
	byte al_121 = (byte) (wArg06 + 0x0001)
	branch wArg06 <u 0xFFFF l0800_0A15
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A08:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0A1A
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A1A:
	__read(al_121, ds, wArg02, wArg04, wArg06)
	branch false l0800_0A42
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A35:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0A48
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A48:
	word16 cx_108 = 0xFFFF
	word16 si_109 = wArg04
	word16 di_114 = wArg04
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A55:
	al_121 = Mem0[ds:si_109:byte]
	si_109 = si_109 + 0x0001
	branch al_121 == 0x1A l0800_0A87
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> ah:<invalid> dx:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A87:
	word16 cx_199 = -cx_108
	word16 ax_201 = 0x0000 - (cx_199 == 0x0000)
	word16 dx_211
	_lseek((byte) ax_201, ds, wArg02, cx_199, ax_201, 0x02, out dx_211)
	Mem217[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x0200
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A5A:
	branch al_121 == 0x0D l0800_0A63
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A63:
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A65:
	__read((byte) (fp - 0x0003), ds, wArg02, fp - 0x0003, 0x0001)
	Mem191[ds:di_114:byte] = bLoc03
	al_121 = bLoc03
	di_114 = di_114 + 0x0001
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A5E:
	Mem163[ds:di_114:byte] = al_121
	di_114 = di_114 + 0x0001
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A61:
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A7F:
	branch di_114 != wArg04 l0800_0A85
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A85:
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0AA7:
	ax_101 = di_114 - wArg04
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A83:
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A42:
	ax_101 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A15:
	ax_101 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AAD:
	return ax_101
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp

fn0800_09F7_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> di:di si:si ah:<invalid> cx:<invalid> dx:<invalid> es:ds al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp



void __read(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0AB3_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AB3:
	word16 ax_17
	branch msdos_read_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_17) l0800_0AC7
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0AC7:
	__IOERROR(ds, ax_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0AC5:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0ACD:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0AB3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp



word16 _write(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0ACF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0ACF:
	word16 ax_149
	byte al_16 = (byte) (wArg06 + 0x0001)
	branch wArg06 >=u 0xFFFF l0800_0AE6
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AE6:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0B05
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0B05:
	Mem83[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 wLoc86_113 = wArg04
	word16 wLoc8A_110 = wArg06
	word16 si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B91:
	branch wLoc8A_110 == 0x0000 l0800_0B9B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B9B:
	word16 di_165 = si_105 - (fp - 0x0084)
	branch false l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0006(16)

l0800_0BA9:
	word16 ax_189 = __write((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_165)
	branch ax_189 == di_165 l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> al:<invalid> dx:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(0) Stack +0006(16)

l0800_0BD7:
	ax_149 = wArg06
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC0:
	branch ax_189 >=u 0x0000 l0800_0BCC
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(16) Stack +0006(16)

l0800_0BCC:
	ax_149 = wArg06 + ax_189 - di_165
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC7:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BD5:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B98:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B24:
	word16 v20_109 = wLoc8A_110 - 0x0001
	wLoc8A_110 = v20_109
	wLoc86_113 = wLoc86_113 + 0x0001
	byte al_114 = Mem83[ds:wLoc86_113:byte]
	branch al_114 != 0x0A l0800_0B3E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3A:
	Mem160[ds:si_105:byte] = 0x0D
	si_105 = si_105 + 0x0001
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3E:
	Mem121[ds:si_105:byte] = al_114
	si_105 = si_105 + 0x0001
	branch si_105 - (fp - 0x0084) < 0x0080 l0800_0B91
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B53:
	word16 di_130 = si_105 - (fp - 0x0084)
	word16 ax_141 = __write((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_130)
	branch ax_141 == di_130 l0800_0B8D
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:fp - 0x0084 bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Local -008C(0) Stack +0002(16) Stack +0006(16)

l0800_0B8D:
	si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B72:
	branch ax_141 >=u 0x0000 l0800_0B7E
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008A(16) Local -008C(16) Stack +0006(16)

l0800_0B7E:
	ax_149 = wArg06 - v20_109 + ax_141 - di_130
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B79:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B8B:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0AF3:
	ax_149 = __write(al_16, ds, wArg02, wArg04, wArg06)
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AE1:
	ax_149 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0BDC:
	return ax_149
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp

fn0800_0ACF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> di:di si:si bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp



word16 __write(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0BE2_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BE2:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0800) == 0x0000 l0800_0C02
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BF2:
	word16 dx_82
	_lseek(0x00, ds, wArg02, 0x0000, 0x0000, 0x02, out dx_82)
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0C02:
	word16 ax_44
	word16 ax_38
	branch msdos_write_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_38) l0800_0C20
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16)

l0800_0C20:
	ax_44 = __IOERROR(ds, ax_38)
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C11:
	Mem54[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x1000
	ax_44 = ax_38
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C26:
	return ax_44
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp

fn0800_0BE2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp



word16 _lseek(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, byte bArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: al ax dx
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)
fn0800_0C28_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)

l0800_0C28:
	Mem12[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 ax_18 = DPB(ax, bArg08, 0)
	word16 dx_23
	*dxOut = wArg04
	branch msdos_set_file_position(wArg02, SEQ(wArg06, wArg04), bArg08, SEQ(wArg04, ax_18)) l0800_0C4A
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0C4A:
	__IOERROR(ds, ax_18)
	word16 dx_44
	*dxOut = 0x0000
	ax_18 = 0xFFFF (alias)
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C48:
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C51:
	return ax_18
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0C28_exit:
// DataOut: al ax dx
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp



void __LONGTOA(selector ds, byte bArg02, byte bArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di es si sp
// Stack args: Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)
fn0800_0C53_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)

l0800_0C53:
	word16 di_119 = wArg08
	byte bl_25 = (byte) wArg06
	branch wArg06 >u 0x0024 l0800_0CC1
// DataOut: bl bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C69:
	branch bl_25 <u 0x02 l0800_0CC1
// DataOut: bl bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C6E:
	word16 ax_103 = wArg0A
	word16 cx_145 = wArg0C
	branch wArg0C >= 0x0000 l0800_0C89
// DataOut: ax bl bx cx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8)

l0800_0C78:
	branch bArg04 == 0x00 l0800_0C89
// DataOut: ax bl bx cx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C7E:
	Mem173[ds:wArg08:byte] = 0x2D
	ax_103 = -wArg0A
	di_119 = wArg08 + 0x0001
	cx_145 = -wArg0C - (ax_103 == 0x0000)
// DataOut: ax bl bx cx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C89:
	word16 si_104 = fp - 0x0024
	branch cx_145 == 0x0000 l0800_0C9D
// DataOut: ax bl bx cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C8E:
	word32 dx_ax_152 = (uint32) (uint16) cx_145
	word32 dx_ax_158 = SEQ((uint16) (dx_ax_152 % wArg06), ax_103)
	Mem167[ds:si_104:byte] = (byte) (uint16) (dx_ax_158 % wArg06)
	word16 ax_155 = (uint16) (dx_ax_152 /u wArg06)
	cx_145 = ax_155
	ax_103 = (uint16) (dx_ax_158 /u wArg06)
	si_104 = si_104 + 0x0001
	branch ax_155 == 0x0000 l0800_0CA4
// DataOut: ax bl bx cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CA4:
	branch ax_103 != 0x0000 l0800_0C9D
// DataOut: ax bl bx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C9D:
	word32 dx_ax_88 = (uint32) (uint16) ax_103
	Mem96[ds:si_104:byte] = (byte) (uint16) (dx_ax_88 % wArg06)
	ax_103 = (uint16) (dx_ax_88 /u wArg06)
	si_104 = si_104 + 0x0001
// DataOut: ax bl bx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CA8:
	word16 cx_113 = 0x0024 - fp + si_104
// DataOut: cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CB0:
	byte al_131
	si_104 = si_104 - 0x0001
	byte al_123 = Mem0[ds:si_104:byte]
	branch al_123 >=u 0x0A l0800_0CBB
// DataOut: al cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CBB:
	al_131 = al_123 - 0x0A + bArg02
// DataOut: al cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CB7:
	al_131 = al_123 + 0x30
// DataOut: al cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CBE:
	Mem133[ds:di_119:byte] = al_131
	di_119 = di_119 + 0x0001
	cx_113 = cx_113 - 0x0001
	branch cx_113 != 0x0000 l0800_0CB0
// DataOut: cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CC1:
	Mem50[ds:di_119:byte] = 0x00
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16)

l0800_0CCA:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0028 bp:fp - 0x0002 di:<invalid> es:es bx:<invalid> al:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

fn0800_0C53_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di es:es bx:<invalid> al:<invalid> ax:<invalid> si:si cx:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

l0800_0C9B:
// DataOut: ax bl bx cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)



word16 _eof(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_0D5F_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D5F:
	word16 ax_131
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0D78
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D78:
	word16 ax_103 = 0x4400
	word16 dx_52
	branch msdos_ioctl_get_device_info(wArg02, out dx_52) l0800_0DC3
// DataOut: ax bx dl ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D82:
	branch (dl & 0x80) != 0x00 l0800_0DBF
// DataOut: bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D87:
	ax_103 = 0x4201
	branch msdos_set_file_position(wArg02, 0x00000000, 0x01, 0x00004201) l0800_0DC3
// DataOut: ax bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D92:
	ax_103 = 0x4202
	branch msdos_set_file_position(wArg02, 0x00000000, 0x02, 0x00004202) l0800_0DC3
// DataOut: ax bx cx ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4201 cx:0x0000 dx:0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DA7:
	ax_103 = 0x4200
	branch msdos_set_file_position(wArg02, 0x00004201, 0x00, 0x42014200) l0800_0DC3
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4202 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DC3:
	ax_131 = __IOERROR(ds, ax_103)
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DAE:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): CZ
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB3:
	branch false l0800_0DBA
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB5:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBF:
	ax_131 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBA:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0D72:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0DC9:
	return ax_131
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp

fn0800_0D5F_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp



word16 _fflush(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0DCD_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0DCD:
	word16 ax_102
	branch Mem0[ds:wArg02 + 0x000E:word16] == wArg02 l0800_0DE1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0DE1:
	branch Mem0[ds:wArg02:word16] < 0x0000 l0800_0E13
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E13:
	word16 di_71 = Mem0[ds:wArg02 + 0x0006:word16] + Mem0[ds:wArg02:word16]
	Mem74[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - (di_71 + 0x0001)
	word16 ax_78 = Mem74[ds:wArg02 + 0x0008:word16]
	Mem79[ds:wArg02 + 0x000A:word16] = ax_78
	branch _write(ds, (int16) Mem79[ds:wArg02 + 0x0004:byte], ax_78, di_71 + 0x0001) == di_71 + 0x0001 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E32:
	branch (Mem79[ds:wArg02 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E43:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E39:
	Mem99[ds:wArg02 + 0x0002:word16] = Mem79[ds:wArg02 + 0x0002:word16] | 0x0010
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DE6:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0008) != 0x0000 l0800_0DF9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DED:
	branch Mem0[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DF9:
	Mem57[ds:wArg02:word16] = 0x0000
	branch Mem57[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E09:
	Mem64[ds:wArg02 + 0x000A:word16] = Mem57[ds:wArg02 + 0x0008:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E0F:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DDC:
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E47:
	return ax_102
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0DCD_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 _printf(selector ds, word16 wArg02, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut: bx di es
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: bp sp
// Stack args: Stack +0002(16)
_printf_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0E4B:
	word16 di_20
	selector es_21
	word16 bx_22 = __VPRINTER(fp - 0x0002, ds, fp + 0x0004, wArg02, out di_20, out es_21)
// DataOut: bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E62:
	return bx_22
// DataOut: bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> bh:<invalid> dl:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp

_printf_exit:
// DataOut: bx di es
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> bh:<invalid> dl:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp



void __fputc(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E64_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(16)

l0800_0E64:
	Mem11[ds:wArg04:word16] = Mem0[ds:wArg04:word16] - 0x0001
	_fputc(ds, (byte) (int16) bArg02, wArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E7B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_0E64_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp



void _fputc(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E7D_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(8) Stack +0004(16)

l0800_0E7D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0E8D:
	word16 v9_30 = Mem0[ds:wArg04:word16] + 0x0001
	Mem31[ds:wArg04:word16] = v9_30
	branch v9_30 >= 0x0000 l0800_0EC7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EC7:
	Mem87[ds:wArg04:word16] = Mem31[ds:wArg04:word16] - 0x0001
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0090) != 0x0000 l0800_0ED7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0ED0:
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0002) != 0x0000 l0800_0EE2
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0EE2:
	Mem102[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0100
	branch Mem102[ds:wArg04 + 0x0006:word16] == 0x0000 l0800_0F11
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0F11:
	branch bArg02 != 0x0A l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F17:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0040) != 0x0000 l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F1E:
	word16 ax_178 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch __write((byte) ax_178, ds, ax_178, 0x04E0, 0x0001) != 0x0001 l0800_0F4E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F36:
	word16 ax_160 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch __write((byte) ax_160, ds, ax_160, fp + 0x0002, 0x0001) == 0x0001 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):0x04E0 -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F4E:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F5F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F55:
	Mem147[ds:wArg04 + 0x0002:word16] = Mem102[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EED:
	branch Mem102[ds:wArg04:word16] == 0x0000 l0800_0F02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F02:
	Mem122[ds:wArg04:word16] = 0xFFFF - Mem102[ds:wArg04 + 0x0006:word16]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

l0800_0EF2:
	branch _fflush(ds, wArg04) == 0x0000 l0800_0F00
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F00:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F0C:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EFB:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0ED7:
	Mem93[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0E91:
	Mem52[ds:wArg04 + 0x000A:word16] = Mem31[ds:wArg04 + 0x000A:word16] + 0x0001
	Mem54[ds:Mem52[ds:wArg04 + 0x000A:word16] - 0x0001:byte] = bArg02
	branch (Mem54[ds:wArg04 + 0x0002:word16] & 0x0008) == 0x0000 l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EA4:
	branch bArg02 == 0x0A l0800_0EB0
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EAA:
	branch bArg02 != 0x0D l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EB0:
	branch _fflush(ds, wArg04) == 0x0000 l0800_0EBF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0EBF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EB9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F66:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

fn0800_0E7D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp



void __REALCVT()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: sp
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1044_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1044:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E0:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1044_exit:
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



word16 fn0800_1048(word16 di, selector es, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di ds es
// LiveOut: di
// Trashed: SCZDO al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx rax rbx rcx rdi rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1048_entry:
// DataOut: di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1048:
	byte dh_8 = SLICE(wArg02, byte, 8)
	Mem20[es:di:byte] = Mem0[ds:(uint16) (dh_8 >>u 0x04) + 0x04E9:byte]
	Mem27[es:di + 0x0001:byte] = Mem20[ds:(uint16) (dh_8 & 0x0F) + 0x04E9:byte]
	byte dl_9 = (byte) wArg02
	Mem32[es:di + 0x0002:byte] = Mem27[ds:(uint16) (dl_9 >>u 0x04) + 0x04E9:byte]
	Mem39[es:di + 0x0003:byte] = Mem32[ds:(uint16) (dl_9 & 0x0F) + 0x04E9:byte]
// DataOut: di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_106F:
	return di + 0x0004
// DataOut: di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp

fn0800_1048_exit:
// DataOut: di
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp



word16 __VPRINTER(word16 bp, selector ds, word16 wArg02, word16 wArg04, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut: bx di es
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_1073_entry:
// DataOut: bp bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_1073:
	byte bLoc57_124 = 0x50
// DataOut: bp bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_10CD:
	word16 sp_1031 = fp - 0x00A0
	word16 wLoc98_22 = fp - 0x0056
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x009E bp:fp - 0x0002 -158(fp):di -156(fp):si -90(fp):0x0000 -87(fp):0x50 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -0098(16) Stack +0002(16) Stack +0004(16)

l0800_10D6:
	word16 di_1054 = wLoc98_22
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_10DA:
	word16 si_131 = wArg04
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16)

l0800_10DD:
	byte al_146 = Mem0[ds:si_131:byte]
	si_131 = si_131 + 0x0001
	byte al_148 = al_146
	ax = DPB(ax, al_146, 0) (alias)
	branch al_146 == 0x00 l0800_10F3
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16)

l0800_10F3:
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0)

l0800_10E2:
	branch al_146 == 0x25 l0800_10F6
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16)

l0800_10F6:
	al_148 = Mem0[ds:si_131:byte]
	ax = DPB(ax, al_148, 0) (alias)
	si_131 = si_131 + 0x0001
	branch al_148 == 0x25 l0800_10E6
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008C(16) Stack +0002(16)

l0800_10FF:
	wLoc98_22 = di_1054
	byte ch_1410 = 0x00
	word16 wLoc8E_245 = 0x0000
	word16 wLoc9A_1001 = 0x0000
	byte bLoc8F_1121 = 0x00
	word16 wLoc94_248 = 0xFFFF
	word16 wLoc92_249 = 0xFFFF
// DataOut: al bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1120:
	word16 ax_266 = DPB(ax, 0x00, 8)
	byte bl_271 = (byte) ax_266
	byte dl_269 = (byte) ax_266
	word16 bx_274 = DPB(ax_266, bl_271 - 0x20, 0)
	branch bl_271 >=u 0x80 l0800_1175
// DataOut: bp bx ch cl dl ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ax:<invalid> es:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_112E:
	word16 bx_325 = DPB(ax_266, Mem0[ds:bx_274 + 0x04F9:byte], 0)
	word16 ax_326 = bx_325
	branch bx_325 <=u 0x0017 l0800_113C
// DataOut: ax bp ch cl dl ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_113C:
	word16 cx_1303
	selector es_1029
	word16 di_1186
	byte bh_1106
	word16 dx_1099
	word16 ax_1115
	byte bLoc95_1108
	word16 dx_1033
	bx = bx_325 << 0x0001
	switch (sp_1031) { l0800_1190 l0800_1178 l0800_11D1 l0800_1184 l0800_11F6 l0800_1200 l0800_1242 l0800_124C l0800_125C l0800_11B7 l0800_1291 l0800_126C l0800_1270 l0800_1274 l0800_1316 l0800_13C8 l0800_1369 l0800_1389 l0800_1533 l0800_1560 l0800_1560 l0800_1560 l0800_11A3 l0800_11AD }
// DataOut: bl bp bx ch cl dl ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11AD:
	wLoc9A_1001 = wLoc9A_1001 | 0x0020
	ch_1410 = 0x05
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11A3:
	wLoc9A_1001 = wLoc9A_1001 & 0xFFDF
	ch_1410 = 0x05
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1533:
	selector es_1384
	word16 di_1383
	wArg04 = si_131
	branch (wLoc9A_1001 & 0x0020) != 0x0000 l0800_154B
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -0098(16) Stack +0002(16) Stack +0004(16)

l0800_154B:
	ptr32 es_di_1400 = Mem0[ds:wArg02:segptr32]
	di_1383 = (word16) es_di_1400 (alias)
	es_1384 = SLICE(es_di_1400, selector, 16) (alias)
	wArg02 = wArg02 + 0x0004
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -0098(16) Stack +0002(16) Stack +0004(16)

l0800_1541:
	di_1383 = Mem0[ds:wArg02:word16]
	word16 sp_1395 = sp_1031 - 0x0002
	Mem1396[ss:sp_1395:word16] = ds
	wArg02 = wArg02 + 0x0002
	es_1384 = Mem1396[ss:sp_1395:selector]
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -0098(16) Stack +0002(16) Stack +0004(16)

l0800_1551:
	word16 ax_1387 = DPB(0x0050, 0x50 - bLoc57_124, 0)
	Mem1390[es_1384:di_1383:word16] = ax_1387
	ax = ax_1387
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -0098(16) Stack +0002(16) Stack +0004(16)

l0800_1389:
	byte Z_1318
	branch (wLoc9A_1001 & 0x0020) != 0x0000 l0800_13A7
// DataOut: bp di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13A7:
	ptr32 es_di_1361 = Mem0[ds:wArg02:segptr32]
	di_1186 = (word16) es_di_1361 (alias)
	es_1029 = SLICE(es_di_1361, selector, 16) (alias)
	wArg02 = wArg02 + 0x0004
	Z_1318 = cond(es_1029 | di_1186) (alias)
// DataOut: bp di ds es sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_139B:
	word16 di_1346 = Mem0[ds:wArg02:word16]
	word16 sp_1349 = sp_1031 - 0x0002
	Mem1350[ss:sp_1349:word16] = ds
	wArg02 = wArg02 + 0x0002
	es_1029 = Mem1350[ss:sp_1349:selector]
	di_1186 = di_1346
	Z_1318 = cond(di_1346) (alias)
// DataOut: bp di ds es sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13B1:
	branch Z_1318 l0800_13B8
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13B3:
	word16 sp_1340 = sp_1031 - 0x0002
	Mem1341[ss:sp_1340:word16] = ds
	es_1029 = Mem1341[ss:sp_1340:selector]
	di_1186 = 0x04E2
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13B8:
	cx_1303 = fn0800_108C(di_1186, es_1029)
	branch cx_1303 <=u wLoc92_249 l0800_13C5
// DataOut: bp cx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0092(16) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13C1:
	cx_1303 = wLoc92_249
// DataOut: bp cx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:0x00 cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13C5:
// DataOut: bp cx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:0x00 cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1369:
	word16 sp_1292 = sp_1031 - 0x0002
	Mem1293[ss:sp_1292:word16] = ss
	wArg02 = wArg02 + 0x0002
	es_1029 = Mem1293[ss:sp_1292:selector]
	sp_1031 = sp_1292 + 0x0002
	di_1186 = fp - 0x0089
	cx_1303 = 0x0001
// DataOut: bp cx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13C8:
	word16 cx_1216 = wLoc92_249
	branch wLoc92_249 >= 0x0000 l0800_13DD
// DataOut: bp cx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13DA:
	cx_1216 = 0x0006
// DataOut: bp cx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_13DD:
	word16 ax_1251
	word16 wLoc06_1245
	word16 sp_1225 = sp_1031 - 0x0002
	Mem1226[ss:sp_1225:word16] = wArg02
	Mem1228[ss:sp_1225 - 0x0002:word16] = cx_1216
	Mem1231[ss:sp_1225 - 0x0004:word16] = fp - 0x0089
	Mem1233[ss:sp_1225 - 0x0006:word16] = ax_266
	Mem1237[ss:sp_1225 - 0x0008:word16] = wLoc9A_1001 & 0x0001
	branch (wLoc9A_1001 & 0x0080) == 0x0000 l0800_1400
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1400:
	branch (wLoc9A_1001 & 0x0100) == 0x0000 l0800_140F
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:fp - 0x0089 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_140F:
	wLoc06_1245 = 0x0008
	ax_1251 = 0x0006
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:fp - 0x0089 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0006(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1405:
	ax_1251 = 0x0008
	wLoc06_1245 = 0x000A
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:fp - 0x0089 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0006(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_13F6:
	ax_1251 = 0x0002
	wLoc06_1245 = 0x0004
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:fp - 0x0089 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0006(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1417:
	Mem1254[ss:sp_1225 - 0x000A:word16] = ax_1251
	__REALCVT()
	Mem1260[ss:sp_1225 - 0x000C:word16] = ss
	wArg02 = wArg02 + wLoc06_1245
	es_1029 = Mem1260[ss:sp_1225 - 0x000C:selector]
	sp_1031 = sp_1225 - 0x000A
	di_1186 = fp - 0x0089
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:0x00 dx:<invalid> bx:fp - 0x0089 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1316:
	word16 sp_1156 = sp_1031 - 0x0002
	Mem1157[ss:sp_1156:word16] = Mem0[ds:wArg02:word16]
	word16 bx_1158 = wArg02 + 0x0001
	word16 di_1152 = fp - 0x008A
	wArg02 = bx_1158 + 0x0001
	branch (wLoc9A_1001 & 0x0020) == 0x0000 l0800_1342
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(16) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1333:
	Mem1196[ss:sp_1156 - 0x0002:word16] = Mem1157[ds:bx_1158 + 0x0001:word16]
	Mem1202[ss:sp_1156 - 0x0004:word16] = ss
	selector es_1203 = Mem1202[ss:sp_1156 - 0x0004:selector]
	word16 di_1205 = fn0800_1048(fp - 0x008A, es_1203, ds, wArg00)
	Mem1208[es_1203:di_1205:byte] = 0x3A
	wArg02 = bx_1158 + 0x0003
	di_1152 = di_1205 + 0x0001
// DataOut: bp di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x008A si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(16) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1342:
	Mem1172[ss:sp_1156 - 0x0002:word16] = ss
	es_1029 = Mem1172[ss:sp_1156 - 0x0002:selector]
	word16 di_1176 = fn0800_1048(di_1152, es_1029, ds, wArg00)
	Mem1178[ds:di_1176:byte] = 0x00
	sp_1031 = sp_1156 + 0x0002
	wLoc9A_1001 = wLoc9A_1001 & 0xFFFB
	di_1186 = fp - 0x008A
	branch wLoc92_249 > di_1176 - (fp - 0x008A) l0800_1366
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1364:
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x008A si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:0x04E9 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):0x00 -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1366:
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x008A si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:0x04E9 bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):0x00 -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1274:
	bh_1106 = 0x10
	bx = DPB(bx_325 << 0x0001, dl_269 + 0xE9, 0) (alias)
// DataOut: bh bp bx dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0092(0) Local -0094(16) Local -0098(16) Local -009A(0) Stack +0002(16)

l0800_1270:
	bh_1106 = 0x0A
	bx = DPB(bx_325 << 0x0001, 0x0A, 8) (alias)
// DataOut: bh bp bx dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0098(16) Local -009A(0) Stack +0002(16)

l0800_126C:
	bh_1106 = 0x08
	bx = DPB(bx_325 << 0x0001, 0x08, 8) (alias)
// DataOut: bh bp bx dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0092(0) Local -0094(16) Local -0098(16) Local -009A(0) Stack +0002(16)

l0800_127A:
	bLoc8F_1121 = 0x00
// DataOut: bh bp bx dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0098(16) Local -009A(0) Stack +0002(16)

l0800_127F:
	bLoc95_1108 = 0x00
	ax_1115 = Mem0[ds:wArg02:word16]
	dx_1099 = 0x0000
// DataOut: ax bh bp bx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(0)

l0800_1291:
	int32 dx_ax_1113 = (int32) Mem0[ds:wArg02:word16]
	bh_1106 = 0x0A
	bx = DPB(bx_325 << 0x0001, 0x0A, 8) (alias)
	bLoc95_1108 = 0x01
	ax_1115 = (word16) dx_ax_1113 (alias)
	dx_1099 = SLICE(dx_ax_1113, word16, 16) (alias)
// DataOut: ax bh bp bx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(0)

l0800_12A2:
	word16 di_981 = wArg02 + 0x0001
	word16 di_1103 = di_981 + 0x0001
	wArg04 = si_131
	branch (wLoc9A_1001 & 0x0010) == 0x0000 l0800_12B3
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0004(16)

l0800_12AF:
	dx_1099 = Mem0[ds:di_981 + 0x0001:word16]
	di_1103 = di_981 + 0x0003
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0004(16)

l0800_12B3:
	wArg02 = di_1103
	di_1186 = fp - 0x0089
	ax = ax_1115
	branch ax_1115 != 0x0000 l0800_12F1
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_12BE:
	branch dx_1099 != 0x0000 l0800_12F1
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(0) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_12F1:
	wLoc9A_1001 = wLoc9A_1001 | 0x0004
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(16) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_12C2:
	branch wLoc92_249 != 0x0000 l0800_12F6
// DataOut: ax bh bp bx di ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0092(16) Local -0094(16) Local -0095(8) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_12F6:
	word16 sp_1005 = sp_1031 - 0x0002
	Mem1006[ss:sp_1005:word16] = dx_1099
	Mem1008[ss:sp_1005 - 0x0002:word16] = ax_1115
	Mem1010[ss:sp_1005 - 0x0004:word16] = fp - 0x0089
	word16 ax_1012 = (int16) bh_1106
	Mem1014[ss:sp_1005 - 0x0006:word16] = ax_1012
	Mem1018[ss:sp_1005 - 0x0008:word16] = DPB(ax_1012, bLoc95_1108, 0)
	Mem1020[ss:sp_1005 - 0x000A:word16] = bx
	__LONGTOA(ds, bArg00, bArg02, si_131, wArg06, wArg08, wArg0A)
	Mem1028[ss:sp_1005:word16] = ss
	es_1029 = Mem1028[ss:sp_1005:selector]
	sp_1031 = sp_1005 + 0x0002
	dx_1033 = wLoc92_249
	branch wLoc92_249 > 0x0000 l0800_1313
// DataOut: bp di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1313:
// DataOut: bp di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1310:
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1427:
	branch (wLoc9A_1001 & 0x0008) == 0x0000 l0800_1449
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_142F:
	dx_1033 = wLoc94_248
	branch wLoc94_248 <= 0x0000 l0800_1449
// DataOut: bp di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1437:
	word16 cx_915 = fn0800_108C(di_1186, es_1029)
	branch Mem0[es_1029:di_1186:byte] != 0x2D l0800_1441
// DataOut: bp cx di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1440:
	cx_915 = cx_915 - 0x0001
// DataOut: bp cx di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:0x00 cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1441:
	word16 dx_923 = dx_1033 - cx_915
	branch dx_923 <= 0x0000 l0800_1449
// DataOut: bp di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:0x00 cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1445:
	wLoc8E_245 = dx_923
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:0x00 cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -008F(8) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1449:
	branch bLoc8F_1121 == 0x00 l0800_1465
// DataOut: al bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1451:
	branch Mem0[es_1029:di_1186:byte] == 0x2D l0800_1465
// DataOut: al bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1457:
	di_1186 = di_1186 - 0x0001
	Mem891[es_1029:di_1186:byte] = bLoc8F_1121
	wLoc8E_245 = v41
// DataOut: bp di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1465:
	cx_1303 = fn0800_108C(di_1186, es_1029)
// DataOut: bp cx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0094(16) Local -0096(8) Local -0098(16) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1468:
	wArg04 = si_131
	word16 si_537 = di_1186
	word16 bx_540 = wLoc94_248
	ax = wLoc9A_1001 & 0x0005
	branch ax != 0x0005 l0800_1494
// DataOut: al bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_147E:
	ax = DPB(ax, dl_269, 8) (alias)
	branch dl_269 != 0x6F l0800_1497
// DataOut: ah bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(0) Local -0096(8) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_1497:
	branch dl_269 == 0x78 l0800_14A1
// DataOut: ah bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_149C:
	branch dl_269 != 0x58 l0800_14B5
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_14A1:
	word16 v37_828 = wLoc8E_245 - 0x0002
	wLoc9A_1001 = wLoc9A_1001 | 0x0040
	bx_540 = wLoc94_248 - 0x0002
	wLoc8E_245 = v37_828
	branch v37_828 >= 0x0000 l0800_14B5
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14AF:
	wLoc8E_245 = 0x0000
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1487:
	branch wLoc8E_245 > 0x0000 l0800_1494
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_148E:
	wLoc8E_245 = 0x0001
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_1494:
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14B5:
	word16 cx_559 = cx_1303 + wLoc8E_245
	branch (wLoc9A_1001 & 0x0002) != 0x0000 l0800_14CD
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14C1:
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14C9:
	branch bx_540 > cx_559 l0800_14C3
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14C3:
	word16 dx_791
	word16 bx_792
	cx_559 = fn0800_1099(0x20, fp - 0x0002, di_1054, ds, out dx_791, out bx_792, out di_1054, out es_1029)
	sp_1031 = sp_1031 + 0xFFFE
	bx_540 = bx_792 - 0x0001
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Local -009A(0) Stack +0002(16) Stack +0004(16)

l0800_14CD:
	branch (wLoc9A_1001 & 0x0040) == 0x0000 l0800_14E1
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Local -0096(8) Stack +0002(16) Stack +0004(16)

l0800_14D5:
	word16 dx_762
	word16 bx_763
	word16 di_764
	selector es_765
	fn0800_1099(0x30, fp - 0x0002, di_1054, ds, out dx_762, out bx_763, out di_764, out es_765)
	word16 dx_769
	cx_559 = fn0800_1099(dl_269, fp - 0x0002, di_764, ds, out dx_769, out bx_540, out di_1054, out es_1029)
	sp_1031 = sp_1031 + 0xFFFC
// DataOut: bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -008E(16) Stack +0002(16) Stack +0004(16)

l0800_14E1:
	word16 dx_589 = wLoc8E_245
	branch wLoc8E_245 <= 0x0000 l0800_1510
// DataOut: bp bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_14E9:
	byte al_689 = Mem0[es_1029:di_1186:byte]
	word16 cx_683 = cx_559 - wLoc8E_245
	bx_540 = bx_540 - wLoc8E_245
	ax = DPB(ax, al_689, 0) (alias)
	branch al_689 == 0x2D l0800_14FC
// DataOut: al bp bx cx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_14F4:
	branch al_689 == 0x20 l0800_14FC
// DataOut: al bp bx cx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_14F8:
	branch al_689 != 0x2B l0800_1503
// DataOut: bp bx cx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_14FC:
	si_537 = di_1186 + 0x0001
	sp_1031 = sp_1031 + 0xFFFE
	word16 bx_745
	selector es_747
	cx_683 = fn0800_1099(Mem0[ds:di_1186:byte], fp - 0x0002, di_1054, ds, out dx_589, out bx_745, out di_1054, out es_747) - 0x0001
	bx_540 = bx_745 - 0x0001
// DataOut: bp bx cx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1503:
	word16 dx_710 = cx_683
	branch dx_589 == 0x0000 l0800_150E
// DataOut: bp bx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1507:
	sp_1031 = sp_1031 + 0xFFFE
	word16 di_1419 = di_1054
	selector es_735
	branch fn0800_1099(0x30, fp - 0x0002, di_1419, ds, out dx_710, out bx_540, out di_1054, out es_735) != 0x0001 l0800_1507
// DataOut: bp bx di ds dx si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_150E:
	cx_559 = dx_710
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1510:
	branch cx_559 == 0x0000 l0800_1523
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1512:
	bx_540 = bx_540 - cx_559
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1514:
	Mem662[ds:di_1054:byte] = Mem0[ds:si_537:byte]
	byte v42_665 = bLoc57_124 - 0x01
	si_537 = si_537 + 0x0001
	di_1054 = di_1054 + 0x0001
	bLoc57_124 = v42_665
	branch v42_665 > 0x00 l0800_1521
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_151E:
	word16 dx_676
	selector es_679
	cx_559 = fn0800_10A1(fp - 0x0002, di_1054, out dx_676, out bx_540, out di_1054, out es_679)
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1521:
	cx_559 = cx_559 - 0x0001
	branch cx_559 != 0x0000 l0800_1514
// DataOut: bp bx cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1523:
	bx = bx_540
	branch bx_540 <= 0x0000 l0800_1530
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1527:
// DataOut: bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1529:
	sp_1031 = sp_1031 + 0xFFFE
	word16 di_1418 = di_1054
	word16 dx_640
	selector es_643
	branch fn0800_1099(0x20, fp - 0x0002, di_1418, ds, out dx_640, out bx, out di_1054, out es_643) != 0x0001 l0800_1529
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_1530:
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> Sequence es:di:<invalid> ch:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_12C9:
	branch wLoc94_248 == 0x0000 l0800_12EE
// DataOut: bp bx cx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:fp - 0x0089 si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_12D3:
	branch wLoc94_248 == 0xFFFF l0800_12EE
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Local -009A(16) Stack +0002(16) Stack +0004(16)

l0800_12D8:
	byte dl_1080
	ax = wLoc9A_1001 & 0x0008
	branch ax == 0x0000 l0800_12E5
// DataOut: bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_12E5:
	dl_1080 = 0x20
// DataOut: bp di dl ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_12E1:
	dl_1080 = 0x30
// DataOut: bp di dl ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_12E7:
	sp_1031 = sp_1031 + 0xFFFE
	word16 di_1420 = di_1054
	word16 dx_1086
	selector es_1089
	branch fn0800_1099(dl_1080, fp - 0x0002, di_1420, ds, out dx_1086, out bx, out di_1054, out es_1089) != 0x0001 l0800_12E7
// DataOut: bp bx di dl ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_12EE:
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> bh:<invalid> Sequence dx:ax:<invalid> es:<invalid> dl:<invalid> ch:<invalid> Sequence es:di:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_11B7:
	branch ch_1410 >u 0x00 l0800_1200
// DataOut: bp ch cl dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(0) Stack +0002(16)

l0800_11BC:
	branch (wLoc9A_1001 & 0x0002) != 0x0000 l0800_11E5
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11C4:
	wLoc9A_1001 = wLoc9A_1001 | 0x0008
	ch_1410 = 0x01
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_125C:
	wLoc9A_1001 = wLoc9A_1001 & 0xFFEF | 0x0080
	ch_1410 = 0x05
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_124C:
	wLoc9A_1001 = (wLoc9A_1001 | 0x0100) & 0xFFEF
	ch_1410 = 0x05
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1242:
	wLoc9A_1001 = wLoc9A_1001 | 0x0010
	ch_1410 = 0x05
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1200:
	word16 ax_432 = (int16) ((byte) ax_266 - 0x30)
	branch ch_1410 >u 0x02 l0800_1224
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1224:
	branch ch_1410 != 0x04 l0800_11CE
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1229:
	wLoc92_249 = ax_432
	ax_326 = wLoc92_249
	branch wLoc92_249 < 0x0000 l0800_11E5
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1231:
	word16 ax_470 = wLoc92_249 << 0x0001
	ax_326 = ax_470 * 0x0005
	wLoc92_249 = ax_432 + ax_470 * 0x0005
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1209:
	ch_1410 = 0x02
	wLoc94_248 = ax_432
	ax_326 = wLoc94_248
	branch wLoc94_248 < 0x0000 l0800_11E5
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1213:
	word16 ax_450 = wLoc94_248 << 0x0001
	ax_326 = ax_450 * 0x0005
	wLoc94_248 = ax_432 + ax_450 * 0x0005
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> ch:0x02 es:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11F6:
	branch ch_1410 >=u 0x04 l0800_11CE
// DataOut: bp cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11FB:
	ch_1410 = 0x04
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1184:
	branch ch_1410 >u 0x00 l0800_1175
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1189:
	wLoc9A_1001 = wLoc9A_1001 | 0x0002
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11D1:
	ax_326 = Mem0[ds:wArg02:word16]
	wArg02 = wArg02 + 0x0002
	branch ch_1410 >=u 0x02 l0800_11E8
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11E8:
	branch ch_1410 != 0x04 l0800_11CE
// DataOut: ax bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11CE:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_11ED:
	wLoc92_249 = ax_326
	ch_1410 = ch_1410 + 0x01
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11DF:
	wLoc94_248 = ax_326
	ch_1410 = 0x03
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11E5:
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> ch:<invalid> es:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1178:
	branch ch_1410 >u 0x00 l0800_1175
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_117D:
	wLoc9A_1001 = wLoc9A_1001 | 0x0001
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1190:
	branch ch_1410 >u 0x00 l0800_1175
// DataOut: bp ch cl dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1175:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_1195:
	branch bLoc8F_1121 == 0x2B l0800_11A0
// DataOut: bp ch cl dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_119C:
	bLoc8F_1121 = dl_269
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11A0:
// DataOut: bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_111F:
	ax = DPB(ax_326, Mem0[ds:si_131:byte], 0) (alias)
	si_131 = si_131 + 0x0001
// DataOut: al bp ch cl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> ch:<invalid> es:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(0) Local -008C(16) Local -008E(0) Local -008F(0) Local -0092(16) Local -0094(16) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1139:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_1560:
	word16 si_289 = si_131
	byte al_292 = 0x25
// DataOut: al bp di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0)

l0800_156A:
	word16 dx_301
	selector es_304
	fn0800_1099(al_292, fp - 0x0002, di_1054, ds, out dx_301, out bx, out di_1054, out es_304)
	byte al_307 = Mem0[ds:si_289:byte]
	sp_1031 = sp_1031 + 0xFFFE
	si_289 = si_289 + 0x0001
	al_292 = al_307
	branch al_307 != 0x00 l0800_156A
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0)

l0800_1572:
	branch bLoc57_124 >= 0x50 l0800_157B
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_1578:
	word16 dx_207
	word16 di_209
	selector es_210
	fn0800_10A1(fp - 0x0002, di_1054, out dx_207, out bx, out di_209, out es_210)
// DataOut: bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_157B:
	selector es_190
	*esOut = Mem0[ss:sp_1031:selector]
	word16 sp_192 = sp_1031 + 0x0002
	branch 0x0000 == 0x0000 l0800_1589
// DataOut: bx ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_1589:
// DataOut: bx ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_1582:
// DataOut: bx ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_158E:
	word16 di_196
	*diOut = Mem0[ss:sp_192:word16]
	return bx
// DataOut: bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>

fn0800_1073_exit:
// DataOut: bx di es
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>

l0800_10E6:
	Mem221[ds:di_1054:byte] = al_148
	byte v15_224 = bLoc57_124 - 0x01
	di_1054 = di_1054 + 0x0001
	bLoc57_124 = v15_224
	branch v15_224 > 0x00 l0800_10DD
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16)

l0800_10EE:
	word16 dx_227
	selector es_230
	fn0800_10A1(fp - 0x0002, di_1054, out dx_227, out bx, out di_1054, out es_230)
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> Sequence es:di:<invalid> bh:<invalid> Sequence dx:ax:<invalid> ch:<invalid> dl:<invalid> -172(fp):<invalid> -170(fp):<invalid> -168(fp):<invalid> -166(fp):<invalid> -164(fp):<invalid> -162(fp):<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -150(fp):<invalid> -149(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -139(fp):cl -137(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -6(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid> 4(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0057(8) Stack +0002(16)



word16 fn0800_108C(word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di es
// LiveOut: cx
// Trashed: SCZO al ax ch cl cx eax ecx rax rcx
// Preserved: di sp
fn0800_108C_entry:
// DataOut: bp di ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_108C:
	word16 cx_13 = 0xFFFF
// DataOut: bp cx di ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1092:
	branch cx_13 == 0x0000 l0800_1094
// DataOut: bp cx di ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1092_1:
	di = di_29 + 0x0001
	cx_13 = cx_13 - 0x0001
	word16 di_29 = di
	branch 0x00 == Mem0[es:di_29:byte] l0800_1092
// DataOut: bp cx di ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1094:
	return ~cx_13 - 0x0001
// DataOut: bp cx ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

fn0800_108C_exit:
// DataOut: cx
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:di -2(fp):di



word16 fn0800_1099(byte al, word16 bp, word16 di, selector ds, ptr16 & dxOut, ptr16 & bxOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al bp di ds ss
// LiveOut: bx cx di dl dx es
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esp rax rbx rcx rdi rdx rsp sp spl
// Preserved: sp
fn0800_1099_entry:
	*dxOut = dx
	*bxOut = bx
	*esOut = es
// DataOut: al bp bx cx di dl ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1099:
	Mem3[ds:di:byte] = al
	byte v9_9 = Mem3[ss:bp - 0x0055:byte] - 0x01
	Mem10[ss:bp - 0x0055:byte] = v9_9
	word16 di_6
	*diOut = di + 0x0001
	branch v9_9 <= 0x00 l0800_10CC_in_fn0800_1099
// DataOut: bp bx cx di dl ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10CC_in_fn0800_1099:
	return cx
// DataOut: bp bx cx di dl ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

l0800_109F_thunk_fn0800_10A1:
	word16 dx_21
	word16 bx_22
	word16 di_23
	selector es_24
	return fn0800_10A1(bp, di + 0x0001, out dx_21, out bx_22, out di_23, out es_24)
// DataOut: bp bx cx di dl ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

fn0800_1099_exit:
// DataOut: bx cx di dl dx es
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid>



word16 fn0800_10A1(word16 bp, word16 di, ptr16 & dxOut, ptr16 & bxOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp di ss
// LiveOut: bx cx di dl dx es sp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esp rax rbx rcx rdi rdx rsp sp spl
// Preserved:
fn0800_10A1_entry:
// DataOut: bp di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_10A1:
	word16 sp_30
	word16 bx_31
	selector ss_32
	word16 cx_33
	word16 dx_34
	selector es_35
	word16 bp_36
	word16 ax_37
	word16 di_38
	byte SCZO_39
	selector cs_40
	byte SZO_41
	byte C_42
	byte Z_43
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2; depth: 16)
		uses: ax_19,bp,bx,cs,cx,di_17,dx,es,SCZO_18,sp_27,ss,wLoc02_4,wLoc04_7,wLoc06_10,wLoc08_13,wLoc0A_21,wLoc0C_23,wLoc0E_28
		defs: ax_37,bp_36,bx_31,C_42,cs_40,cx_33,di_38,dx_34,es_35,SCZO_39,sp_30,ss_32,SZO_41,Z_43
	branch ax_37 != 0x0000 l0800_10BE
// DataOut: bp di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10B9:
	Mem65[ss_32:bp_36 - 0x0002:word16] = 0x0001
// DataOut: bp di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10BE:
	Mem48[ss_32:bp_36 - 0x0055:byte] = 0x50
	Mem50[ss_32:bp_36 - 0x0058:word16] = Mem48[ss_32:bp_36 - 0x0058:word16] + di_38
	word16 di_52
	*diOut = bp_36 - 0x0054
	selector es_53
	*esOut = Mem50[ss_32:sp_30:selector]
	word16 dx_55
	*dxOut = Mem50[ss_32:sp_30 + 0x0002:word16]
	word16 cx_57 = Mem50[ss_32:sp_30 + 0x0004:word16]
	word16 bx_59
	*bxOut = Mem50[ss_32:sp_30 + 0x0006:word16]
// DataOut: bp bx cx di dl ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10CC:
	return cx_57
// DataOut: bp bx cx di dl ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:bp - 0x0054 es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

fn0800_10A1_exit:
// DataOut: bx cx di dl dx es sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:bp - 0x0054 es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx



void fn0800_1596(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_1596_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1596:
	branch Mem0[ds:0x062A:word16] == 0x0000 l0800_15C1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15C1:
	Mem34[ds:0x062A:word16] = wArg02
	Mem35[ds:wArg02 + 0x0004:word16] = wArg02
	Mem36[ds:wArg02 + 0x0006:word16] = wArg02
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15A5:
	word16 di_27 = Mem0[ds:Mem0[ds:0x062A:word16] + 0x0006:word16]
	Mem29[ds:Mem0[ds:0x062A:word16] + 0x0006:word16] = wArg02
	Mem30[ds:di_27 + 0x0004:word16] = wArg02
	Mem31[ds:wArg02 + 0x0006:word16] = di_27
	Mem33[ds:wArg02 + 0x0004:word16] = Mem31[ds:0x062A:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15CB:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_1596_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> di:di ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp



void fn0800_15CF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_15CF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_15CF:
	Mem21[ds:wArg02:word16] = Mem0[ds:wArg02:word16] + Mem0[ds:wArg04:word16]
	branch Mem21[ds:0x0628:word16] != wArg04 l0800_15EE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15EE:
	Mem47[ds:Mem21[ds:wArg04:word16] + wArg04 + 0x0002:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15E8:
	Mem39[ds:0x0628:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15FB:
	___pull_free_block(ds, wArg04)
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> bx:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_15CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si di:di ax:<invalid> bx:<invalid> cx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_1606(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: si sp
fn0800_1606_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1606:
	branch Mem0[ds:0x062C:word16] != Mem0[ds:0x0628:word16] l0800_1622
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1622:
	word16 si_32 = Mem0[ds:Mem0[ds:0x0628:word16] + 0x0002:word16]
	branch (Mem0[ds:si_32:word16] & 0x0001) != 0x0000 l0800_1651
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1651:
	_brk(ds, Mem0[ds:0x0628:word16])
	Mem61[ds:0x0628:word16] = si_32
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si

l0800_162F:
	___pull_free_block(ds, si_32)
	branch si_32 != Mem0[ds:0x062C:word16] l0800_1644
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1644:
	Mem55[ds:0x0628:word16] = Mem0[ds:si_32 + 0x0002:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_163A:
	Mem52[ds:0x0628:word16] = 0x0000
	Mem53[ds:0x062C:word16] = 0x0000
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_164A:
	_brk(ds, si_32)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si

l0800_1610:
	_brk(ds, Mem0[ds:0x062C:word16])
	Mem28[ds:0x0628:word16] = 0x0000
	Mem29[ds:0x062C:word16] = 0x0000
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si

l0800_165D:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> cx:<invalid> bx:<invalid> si:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si

fn0800_1606_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> cx:<invalid> si:si bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si



void fn0800_165F(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_165F_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000C(16) Stack +0002(16)

l0800_165F:
	Mem18[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - 0x0001
	word16 si_14 = wArg02
	word16 ax_20 = Mem18[ds:wArg02:word16] + wArg02
	word16 di_22 = Mem18[ds:wArg02 + 0x0002:word16]
	branch (Mem18[ds:di_22:word16] & 0x0001) != 0x0000 l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_167C:
	branch wArg02 == Mem18[ds:0x062C:word16] l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_1690:
	fn0800_1596(ds, wArg02)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1682:
	Mem66[ds:di_22:word16] = Mem18[ds:di_22:word16] + Mem18[ds:wArg02:word16]
	Mem69[ds:ax_20 + 0x0002:word16] = di_22
	si_14 = di_22
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1695:
	branch (Mem18[ds:ax_20:word16] & 0x0001) != 0x0000 l0800_16A7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_169E:
	fn0800_15CF(ds, si_14, ax_20)
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_16A7:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_165F_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void _free(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_16AD_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16AD:
	branch wArg02 != 0x0000 l0800_16BA
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_16BA:
	branch wArg02 + 0xFFFC != Mem0[ds:0x0628:word16] l0800_16CC
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16CC:
	fn0800_165F(ds, wArg02 + 0xFFFC)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16C7:
	fn0800_1606(ds)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16B8:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16D1:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_16AD_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void _scanf(word16 bx, word16 di, selector es, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx di ds es ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: bp sp
// Stack args: Stack +0002(16)
_scanf_entry:
// DataOut: bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16D4:
	__scanner(bx, fp - 0x0002, di, es, ds, 0x07F2, 0x1D65, 0x0342, wArg02)
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_16F1:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp

_scanf_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp



word16 __scanner(word16 bx, word16 bp, word16 di, selector es, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx di ds es ss
// LiveOut: bp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_16F3_entry:
// DataOut: bp bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0026(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_16F3:
	word16 bp_1001 = fp - 0x0002
	word16 wLoc28_1039 = 0x0000
// DataOut: bp bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1721:
	word16 sp_101 = fp - 0x0032
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0030 bp:fp - 0x0002 -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1723:
	word16 si_169 = wArg08
// DataOut: bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1726:
	byte al_106 = Mem0[ds:si_169:byte]
	word16 si_107 = si_169 + 0x0001
	branch al_106 == 0x00 l0800_1788
// DataOut: al bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1788:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1788_thunk_fn0800_1AEB:
	word16 bp_1219
	fn0800_1AEB(bp_1001, out bp_1219)
	return bp_1219
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_172B:
	branch al_106 == 0x25 l0800_178B
// DataOut: al bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_178B:
	word16 wLoc24_396 = 0xFFFF
	byte bLoc2B_1212 = 0x00
	si_409 = si_107
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1794:
	word16 si_409
	si_409 = si_409 + 0x0001
	word16 ax_414 = (int16) Mem0[ds:si_409:byte]
	wArg08 = si_409
	branch ax_414 < 0x0000 l0800_17E6
// DataOut: bp di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_179E:
	word16 bx_436 = DPB(bx, 0x00, 8)
	branch bx_436 <=u 0x0015 l0800_17AE
// DataOut: al ax bp di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_17AE:
	word16 si_1203
	word16 ax_1194
	word16 dx_1197
	bx = bx_436 << 0x0001
	switch (bx_436) { l0800_17E6 l0800_17E6 l0800_17E6 l0800_17E3 l0800_17E9 l0800_17EF l0800_19C8 l0800_1837 l0800_1837 l0800_1841 l0800_1908 l0800_1803 l0800_180F l0800_1809 l0800_1832 l0800_196C l0800_1A06 l0800_1824 l0800_183C l0800_1895 l0800_1816 l0800_181D }
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_181D:
	bLoc2B_1212 = bLoc2B_1212 | 0x20
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1816:
	bLoc2B_1212 = bLoc2B_1212 & 0xDF
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1895:
	word16 bp_1204
	word16 ax_1205 = fn0800_1898(bx_436, bp_1001, ds, out bp_1204)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1895_thunk_fn0800_1898:
	word16 bp_1209
	fn0800_1898(ax_1205, bp_1204, ds, out bp_1209)
	return bp_1209
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_183C:
	si_1203 = 0x0010
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1824:
	ax_1194 = wLoc28_1039
	dx_1197 = 0x0000
	branch (bLoc2B_1212 & 0x01) == 0x00 l0800_187E
// DataOut: ax bp bx ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_182F:
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A06:
	word16 sp_792 = sp_101 - 0x0002
	Mem793[ss:sp_792:word16] = ss
	es = Mem793[ss:sp_792:selector]
	sp_101 = sp_792 + 0x0002
	word16 di_796 = fp - 0x0022
	word16 cx_797 = 0x0010
// DataOut: ax bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A11:
	branch cx_797 == 0x0000 l0800_1A13
// DataOut: ax bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A13:
	byte al_1190 = Mem793[ds:si_409:byte]
	byte v43_813 = bLoc2B_1212 & 0xEF
	word16 ax_1191 = (word16) al_1190
	word16 si_1193 = si_409 + 0x0001
	byte bLoc2B_1187 = v43_813
	branch al_1190 != 0x5E l0800_1A21
// DataOut: al bp bx ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A1C:
	al_1190 = Mem793[ds:si_409 + 0x0001:byte]
	bLoc2B_1187 = v43_813 | 0x10
	ax_1191 = DPB(ax_1191, al_1190, 0) (alias)
	si_1193 = si_409 + 0x0002
// DataOut: al bp bx ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A21:
	word16 ax_826 = DPB(ax_1191, 0x00, 8)
// DataOut: al ax bp bx ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A23:
	word16 di_1022 = ax_826 >>u 0x03
	byte ch_844 = 0x01 << (al_1190 & 0x07)
	Mem847[ss:bp_1001 - 0x0020 + di_1022:byte] = Mem793[ss:bp_1001 - 0x0020 + di_1022:byte] | ch_844
	byte dl_836 = al_1190
// DataOut: bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A35:
	al_1190 = Mem847[ds:si_1193:byte]
	ax_826 = DPB(ax_826, al_1190, 0) (alias)
	si_1193 = si_1193 + 0x0001
	branch al_1190 == 0x00 l0800_1A60
// DataOut: al ax bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A60:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1A60_thunk_fn0800_1AFF:
	word16 bp_1184
	fn0800_1AFF(bp_1001, out bp_1184)
	return bp_1184
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1A3A:
	branch al_1190 == 0x5D l0800_1A63
// DataOut: al ax bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A63:
	word16 v62_907 = wLoc24_1221 & 0x7FFF
	wArg08 = si_1193
	word16 si_1099 = v62_907
	branch (bLoc2B_1187 & 0x01) != 0x00 l0800_1A77
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A74:
	di_1022 = fn0800_1708(bp_1001, ds, out es)
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A77:
	word16 si_941 = si_1099 - 0x0001
	branch si_941 < 0x0000 l0800_1ACA
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A7A:
	word16 sp_1041 = sp_101 - 0x0002
	Mem1042[ss:sp_1041:word16] = es
	Mem1045[ss:sp_1041 - 0x0002:word16] = wArg06
	wLoc28_1039 = wLoc28_1039 + 0x0001
	word16 sp_1046
	byte SCZO_1049
	word16 si_1050
	selector es_1052
	byte D_1053
	byte al_1054
	byte SZO_1056
	byte C_1057
	byte Z_1058
	word16 ax_1059
	word16 cx_1061
	byte SO_1062
	byte S_1063
	word16 bx_1064
	byte bl_1065
	byte bh_1066
	byte CZ_1067
	word16 dx_1068
	byte ah_1069
	byte dl_1070
	byte cl_1071
	byte ch_1072
	call SEQ(cs, Mem1045[ss:bp_1001 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_918,al_936,ax_940,bh_921,bl_922,bLoc2B_818,bp_939,bx_923,C_938,ch_915,cl_916,cs_925,cx_934,CZ_920,D_928,di_930,dl_917,ds_927,dx_919,es_929,S_924,SCZO_932,si_941,SO_943,sp_1044,ss_933,SZO_1040,wLoc02_4,wLoc24_908,wLoc26,wLoc28_1039,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_926
		defs: ah_1069,al_1054,ax_1059,bh_1066,bl_1065,bp_1047,bx_1064,C_1057,ch_1072,cl_1071,cs_1060,cx_1061,CZ_1067,D_1053,di_1051,dl_1070,ds_1055,dx_1068,es_1052,S_1063,SCZO_1049,si_1050,SO_1062,sp_1046,ss_1048,SZO_1056,Z_1058
	es = Mem1045[ss:sp_1046 + 0x0002:selector]
	sp_101 = sp_1046 + 0x0004
	branch ax_1059 < 0x0000 l0800_1AD9
// DataOut: ax bp di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AD9:
	branch si_1050 + 0x0001 >= v62_907 l0800_1ADD_thunk_fn0800_1AEB
// DataOut: bp di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: Local -002A(16) Local -002B(0)

l0800_1ADD_thunk_fn0800_1AEB:
	word16 bp_1180
	fn0800_1AEB(bp_1001, out bp_1180)
	return bp_1180
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1ADF:
	branch (bLoc2B_1187 & 0x01) != 0x00 l0800_1AE3_thunk_fn0800_1AEB
// DataOut: bp di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: Local -002A(16)

l0800_1AE3_thunk_fn0800_1AEB:
	word16 bp_1178
	fn0800_1AEB(bp_1001, out bp_1178)
	return bp_1178
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1AE5:
	Mem1171[es:di_1022:byte] = 0x00
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1AE8_thunk_fn0800_1AEB:
	word16 bp_1176
	fn0800_1AEB(bp_1001, out bp_1176)
	return bp_1176
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:0x00 ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1A8A:
	byte ch_1093 = 0x01 << ((byte) ax_1059 & 0x07)
	si_1099 = si_1050
	byte al_1102 = (byte) ax_1059
	bx = ax_1059 >>u 0x03
	branch (Mem1045[ss:bp_1001 - 0x0020 + (ax_1059 >>u 0x03):byte] & ch_1093) == 0x00 l0800_1AA7
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AA7:
	branch (bLoc2B_1187 & 0x10) == 0x00 l0800_1AB6
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A9F:
	branch (bLoc2B_1187 & 0x10) == 0x00 l0800_1AAD
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AAD:
	branch (bLoc2B_1187 & 0x01) != 0x00 l0800_1A77
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AB3:
	Mem1156[es:di_1022:byte] = al_1102
	di_1022 = di_1022 + 0x0001
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AA5:
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(0) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AB6:
	Mem1109[ss:sp_1046 + 0x0002:word16] = es
	Mem1112[ss:sp_1046:word16] = wArg06
	Mem1114[ss:sp_1046 - 0x0002:word16] = ax_1059
	word16 sp_1115
	byte SCZO_1118
	word16 si_1119
	selector es_1121
	byte D_1122
	byte al_1123
	byte SZO_1125
	byte C_1126
	byte Z_1127
	word16 ax_1128
	word16 cx_1130
	byte SO_1131
	byte S_1132
	byte bl_1134
	byte bh_1135
	byte CZ_1136
	word16 dx_1137
	byte ah_1138
	byte dl_1139
	byte cl_1140
	byte ch_1141
	call SEQ(cs, Mem1114[ss:bp_1001 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_1104,al_1102,ax_1101,bh_1107,bl_1106,bLoc2B_818,bp_1047,bx_1105,C_1096,ch_1093,cl_1092,cs_1060,cx_1091,CZ_1067,D_1053,di_1051,dl_1070,ds_1055,dx_1068,es_1075,S_1063,SCZO_1049,si_1099,SO_1082,sp_1113,ss_1048,SZO_1094,wLoc02_4,wLoc24_908,wLoc26,wLoc28_1039,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_1095
		defs: ah_1138,al_1123,ax_1128,bh_1135,bl_1134,bp_1116,bx_1133,C_1126,ch_1141,cl_1140,cs_1129,cx_1130,CZ_1136,D_1122,di_1120,dl_1139,ds_1124,dx_1137,es_1121,S_1132,SCZO_1118,si_1119,SO_1131,sp_1115,ss_1117,SZO_1125,Z_1127
	es = Mem1114[ss:sp_1115 + 0x0004:selector]
	sp_101 = sp_1115 + 0x0006
	branch si_1119 + 0x0001 >= v62_907 l0800_1AD3
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1ACA:
	branch (bLoc2B_1187 & 0x01) != 0x00 l0800_1AD6
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AD0:
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AD3:
	Mem1004[es:di_1022:byte] = 0x00
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1AD6:
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A3E:
	branch al_1190 != 0x2D l0800_1A23
// DataOut: al ax bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A42:
	branch dl_836 >u Mem847[ds:si_1193:byte] l0800_1A23
// DataOut: al ax bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A46:
	branch Mem847[ds:si_1193:byte] == 0x5D l0800_1A23
// DataOut: al ax bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A4B:
	byte al_877 = Mem847[ds:si_1193:byte] - dl_836
	si_1193 = si_1193 + 0x0001
	ax_826 = DPB(ax_826, al_877, 0) (alias)
	branch al_877 == 0x00 l0800_1A35
// DataOut: al bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A50:
	dl_836 = dl_836 + al_877
// DataOut: al bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A52:
	ch_844 = __rol(ch_844, 0x01)
	di_1022 = di_1022 + ((ch_844 & 0x80) != 0x00)
	Mem898[ss:bp_1001 - 0x0020 + di_1022:byte] = Mem847[ss:bp_1001 - 0x0020 + di_1022:byte] | ch_844
	al_877 = al_877 - 0x01
	ax_826 = DPB(ax_826, al_877, 0) (alias)
	branch al_877 != 0x00 l0800_1A52
// DataOut: al bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A5E:
// DataOut: bp bx ch cl di dl ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> ah:0x00 dl:<invalid> cl:<invalid> ch:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1A11_1:
	Mem804[es:di_796:word16] = 0x0000
	di_796 = di_796 + 0x0002
	cx_797 = cx_797 - 0x0001
// DataOut: ax bp bx cx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_196C:
	word16 bp_779
	word16 ax_780 = fn0800_196F(bx_436, bp_1001, ds, out bp_779)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_196C_thunk_fn0800_196F:
	word16 bp_784
	fn0800_196F(ax_780, bp_779, ds, out bp_784)
	return bp_784
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1832:
	si_1203 = 0x0008
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1809:
	bLoc2B_1212 = bLoc2B_1212 | 0x04
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_180F:
	bLoc2B_1212 = bLoc2B_1212 | 0x02
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1803:
	bLoc2B_1212 = bLoc2B_1212 | 0x08
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1908:
	word16 sp_694 = sp_101 - 0x0002
	Mem695[ss:sp_694:word16] = fp - 0x0026
	Mem698[ss:sp_694 - 0x0002:word16] = fp - 0x0028
	Mem704[ss:sp_694 - 0x0004:word16] = wLoc24_1221 & 0x7FFF
	Mem707[ss:sp_694 - 0x0006:word16] = wArg06
	Mem710[ss:sp_694 - 0x0008:word16] = wArg04
	Mem713[ss:sp_694 - 0x000A:word16] = wArg02
	__scantod()
	sp_101 = sp_694 + 0x0002
	branch wLoc26 <= 0x0000 l0800_1964
// DataOut: bp bx di ds es sp ss
// DataOut (flags): SO
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1964:
	__scanpop()
	branch wLoc26 < 0x0000 l0800_1905
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1905:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1905_thunk_fn0800_1AEB:
	word16 bp_764
	fn0800_1AEB(bp_1001, out bp_764)
	return bp_764
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1969:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1969_thunk_fn0800_1AFF:
	word16 bp_762
	fn0800_1AFF(bp_1001, out bp_762)
	return bp_762
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_192C:
	branch (bLoc2B_1212 & 0x01) == 0x00 l0800_1935
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1935:
	word16 ax_738
	word16 di_726 = fn0800_1708(bp_1001, ds, out es)
	branch (bLoc2B_1212 & 0x04) == 0x00 l0800_1946
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1946:
	branch (bLoc2B_1212 & 0x08) == 0x00 l0800_1951
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1951:
	ax_738 = 0x0000
// DataOut: ax bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_194C:
	ax_738 = 0x0008
// DataOut: ax bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1941:
	ax_738 = 0x0004
// DataOut: ax bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1953:
	Mem740[ss:sp_694:word16] = ax_738
	Mem742[ss:sp_694 - 0x0002:word16] = di_726
	__scanrslt()
	sp_101 = sp_694 + 0x0002
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1932:
// DataOut: bp bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_195E:
	__scanpop()
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1841:
	si_1203 = 0x0000
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1837:
	si_1203 = 0x000A
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1844:
	branch (ax_414 & 0x0020) != 0x0000 l0800_184E
// DataOut: bp bx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_184A:
	bLoc2B_1212 = bLoc2B_1212 | 0x04
// DataOut: bp bx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_184E:
	word16 sp_633 = sp_101 - 0x0002
	Mem634[ss:sp_633:word16] = fp - 0x0026
	Mem637[ss:sp_633 - 0x0002:word16] = fp - 0x0028
	Mem643[ss:sp_633 - 0x0004:word16] = wLoc24_1221 & 0x7FFF
	Mem646[ss:sp_633 - 0x0006:word16] = si_1203
	Mem649[ss:sp_633 - 0x0008:word16] = wArg06
	Mem653[ss:sp_633 - 0x000A:word16] = wArg04
	Mem657[ss:sp_633 - 0x000C:word16] = wArg02
	word16 di_662
	ax_1194 = __scantol(si_1203, bx_436 << 0x0001, ds, wArg04, wArg06, si_409, wArg0A, wArg0C, out dx_1197, out bx, out di_662, out es)
	branch wLoc26 <= 0x0000 l0800_188D
// DataOut: ax bp bx di ds dx es sp ss
// DataOut (flags): SO
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_188D:
	branch wLoc26 < 0x0000 l0800_1892
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1892:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1892_thunk_fn0800_1AEB:
	word16 bp_685
	fn0800_1AEB(bp_1001, out bp_685)
	return bp_685
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_188F:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_188F_thunk_fn0800_1AFF:
	word16 bp_683
	fn0800_1AFF(bp_1001, out bp_683)
	return bp_683
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1875:
	branch (bLoc2B_1212 & 0x01) != 0x00 l0800_188A
// DataOut: ax bp bx di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_187B:
// DataOut: ax bp bx ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_187E:
	word16 di_616 = fn0800_1708(bp_1001, ds, out es)
	Mem617[es:di_616:word16] = ax_1194
	branch (bLoc2B_1212 & 0x04) == 0x00 l0800_188A
// DataOut: bp bx di ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> cx:<invalid> es:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1888:
	Mem625[es:di_616 + 0x0002:word16] = dx_1197
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_188A:
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dl:<invalid> ah:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19C8:
	branch (bLoc2B_1212 & 0x01) != 0x00 l0800_19D1
// DataOut: al ax bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19CE:
	fn0800_1708(bp_1001, ds, out es)
// DataOut: al ax bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19D1:
	branch wLoc24_1221 >= 0x0000 l0800_19DB
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19D8:
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19DB:
	branch wLoc24_1221 == 0x0000 l0800_19F7
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19DD:
	word16 sp_524 = sp_101 - 0x0002
	Mem525[ss:sp_524:word16] = es
	Mem528[ss:sp_524 - 0x0002:word16] = wArg06
	wLoc28_1039 = wLoc28_1039 + 0x0001
	word16 sp_529
	byte SCZO_532
	word16 si_533
	word16 di_534
	selector es_535
	byte D_536
	byte al_537
	byte SZO_539
	byte C_540
	byte Z_541
	word16 ax_542
	word16 cx_544
	byte SO_545
	byte S_546
	byte bl_548
	byte bh_549
	byte CZ_550
	word16 dx_551
	byte ah_552
	byte dl_553
	byte cl_554
	byte ch_555
	call SEQ(cs, Mem528[ss:bp_1001 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_440,al_438,ax_437,bh_448,bl_447,bLoc2B_399,bp_103,bx_446,C_478,ch_81,cl_82,cs_92,cx_100,CZ_480,D_94,di_471,dl_400,ds_93,dx_402,es_517,S_477,SCZO_479,si_481,SO_476,sp_527,ss_518,SZO_523,wLoc02_4,wLoc24_398,wLoc28_522,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_475
		defs: ah_552,al_537,ax_542,bh_549,bl_548,bp_530,bx_547,C_540,ch_555,cl_554,cs_543,cx_544,CZ_550,D_536,di_534,dl_553,ds_538,dx_551,es_535,S_546,SCZO_532,si_533,SO_545,sp_529,ss_531,SZO_539,Z_541
	es = Mem528[ss:sp_529 + 0x0002:selector]
	sp_101 = sp_529 + 0x0004
	branch (bLoc2B_1212 & 0x01) != 0x00 l0800_19F0
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19EF:
	Mem575[es:di_534:byte] = al_537
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19F0:
	branch ax_542 < 0x0000 l0800_1A03
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A03:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1A03_thunk_fn0800_1AEB:
	word16 bp_573
	fn0800_1AEB(bp_1001, out bp_573)
	return bp_573
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_19F4:
	branch si_533 > 0x0001 l0800_19DD
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(0) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19F7:
	branch (bLoc2B_1212 & 0x01) != 0x00 l0800_1A00
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_19FD:
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_1A00:
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> es:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_17EF:
	wLoc24_396 = ax_414 - 0x0030
	word16 wLoc24_1221 = wLoc24_396
	branch wLoc24_1221 < 0x0000 l0800_1794
// DataOut: bp di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_17F9:
	wLoc24_396 = ax_414 - 0x0026
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_17E9:
	bLoc2B_1212 = bLoc2B_1212 | 0x01
// DataOut: bp ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0024(16) Local -0026(0) Local -0028(16) Local -002A(16) Local -002B(8) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_17E3:
// DataOut: al bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_17E6:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_17E6_thunk_fn0800_1AEB:
	word16 bp_432
	fn0800_1AEB(bp_1001, out bp_432)
	return bp_432
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_17AB:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_17AB_thunk_fn0800_1AEB:
	word16 bp_443
	fn0800_1AEB(bp_1001, out bp_443)
	return bp_443
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> es:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_172F:
	word16 sp_163 = sp_101 - 0x0002
	Mem164[ss:sp_163:word16] = wArg06
	wLoc28_1039 = wLoc28_1039 + 0x0001
	word16 sp_165
	byte SCZO_168
	word16 di_170
	byte D_172
	byte al_173
	byte SZO_175
	byte C_176
	byte Z_177
	word16 ax_178
	word16 cx_180
	byte SO_181
	byte S_182
	byte bl_184
	byte bh_185
	byte CZ_186
	word16 dx_187
	byte ah_188
	byte dl_189
	byte cl_190
	byte ch_191
	call SEQ(cs, Mem164[ss:bp_1001 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_84,al_153,ax_156,bh_87,bl_88,bLoc2B_151,bp_103,bx_89,C_113,ch_81,cl_82,cs_92,cx_100,CZ_86,D_94,di_157,dl_83,ds_93,dx_85,es_95,S_90,SCZO_147,si_107,SO_91,sp_163,ss_99,SZO_160,wLoc02_4,wLoc24_150,wLoc28_159,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_148
		defs: ah_188,al_173,ax_178,bh_185,bl_184,bp_166,bx_183,C_176,ch_191,cl_190,cs_179,cx_180,CZ_186,D_172,di_170,dl_189,ds_174,dx_187,es_171,S_182,SCZO_168,si_169,SO_181,sp_165,ss_167,SZO_175,Z_177
	sp_101 = sp_165 + 0x0002
	word16 ax_194 = ax_178
	branch ax_178 < 0x0000 l0800_1764
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_173F:
	branch di_170 < 0x0000 l0800_1775
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1743:
	branch Mem164[ds:di_170 + 0x055A:byte] != 0x01 l0800_1775
// DataOut: al ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1775:
	branch ax_178 == di_170 l0800_1726
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1779:
	Mem240[ss:sp_165:word16] = wArg06
	Mem242[ss:sp_165 - 0x0002:word16] = ax_178
	word16 sp_243
	word16 bp_244
	selector ss_245
	byte SCZO_246
	word16 si_247
	word16 di_248
	selector es_249
	byte D_250
	byte al_251
	selector ds_252
	byte SZO_253
	byte C_254
	byte Z_255
	word16 ax_256
	selector cs_257
	word16 cx_258
	byte SO_259
	byte S_260
	word16 bx_261
	byte bl_262
	byte bh_263
	byte CZ_264
	word16 dx_265
	byte ah_266
	byte dl_267
	byte cl_268
	byte ch_269
	call SEQ(cs, Mem242[ss:bp_1001 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_197,al_195,ax_194,bh_185,bl_184,bLoc2B_151,bp_166,bx_183,C_235,ch_191,cl_190,cs_179,cx_192,CZ_186,D_172,di_232,dl_189,ds_174,dx_187,es_171,S_234,SCZO_236,si_169,SO_199,sp_241,ss_167,SZO_233,wLoc02_4,wLoc24_150,wLoc28_159,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_237
		defs: ah_266,al_251,ax_256,bh_263,bl_262,bp_244,bx_261,C_254,ch_269,cl_268,cs_257,cx_258,CZ_264,D_250,di_248,dl_267,ds_252,dx_265,es_249,S_260,SCZO_246,si_247,SO_259,sp_243,ss_245,SZO_253,Z_255
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1782_thunk_fn0800_1AEB:
	word16 bp_277
	fn0800_1AEB(bp_244, out bp_277)
	return bp_277
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_174A:
	byte bl_308 = (byte) ax_194
	word16 bx_311 = DPB(ax_194, bl_308, 0)
	branch bl_308 < 0x00 l0800_1767
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_174F:
	branch Mem164[ds:bx_311 + 0x055A:byte] != 0x01 l0800_1767
// DataOut: ax bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1767:
	word16 sp_316 = sp_101 - 0x0002
	Mem317[ss:sp_316:word16] = wArg06
	Mem319[ss:sp_316 - 0x0002:word16] = bx_311
	word16 sp_320
	byte SCZO_323
	word16 di_325
	byte D_327
	byte al_328
	byte SZO_330
	byte C_331
	byte Z_332
	word16 ax_333
	word16 cx_335
	byte SO_336
	byte S_337
	byte bl_339
	byte bh_340
	byte CZ_341
	word16 dx_342
	byte ah_343
	byte dl_344
	byte cl_345
	byte ch_346
	call SEQ(cs, Mem319[ss:bp_1001 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_306,al_304,ax_303,bh_309,bl_310,bLoc2B_151,bp_300,bx_311,C_314,ch_282,cl_283,cs_289,cx_298,CZ_286,D_292,di_294,dl_284,ds_291,dx_285,es_293,S_313,SCZO_296,si_295,SO_288,sp_318,ss_297,SZO_312,wLoc02_4,wLoc24_150,wLoc28_281,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_290
		defs: ah_343,al_328,ax_333,bh_340,bl_339,bp_321,bx_338,C_331,ch_346,cl_345,cs_334,cx_335,CZ_341,D_327,di_325,dl_344,ds_329,dx_342,es_326,S_337,SCZO_323,si_324,SO_336,sp_320,ss_322,SZO_330,Z_332
	sp_101 = sp_320 + 0x0004
	wLoc28_1039 = wLoc28_1039 - 0x0001
// DataOut: bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1756:
	word16 sp_360 = sp_101 - 0x0002
	Mem361[ss:sp_360:word16] = wArg06
	wLoc28_1039 = wLoc28_1039 + 0x0001
	word16 sp_362
	byte SCZO_365
	word16 si_366
	word16 di_367
	selector es_368
	byte D_369
	byte al_370
	byte SZO_372
	byte C_373
	byte Z_374
	word16 ax_375
	word16 cx_377
	byte SO_378
	byte S_379
	word16 bx_380
	byte bl_381
	byte bh_382
	byte CZ_383
	word16 dx_384
	byte ah_385
	byte dl_386
	byte cl_387
	byte ch_388
	call SEQ(cs, Mem361[ss:bp_1001 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_306,al_304,ax_303,bh_309,bl_310,bLoc2B_151,bp_300,bx_311,C_314,ch_282,cl_283,cs_289,cx_298,CZ_286,D_292,di_294,dl_284,ds_291,dx_285,es_293,S_313,SCZO_354,si_295,SO_288,sp_360,ss_297,SZO_358,wLoc02_4,wLoc24_150,wLoc28_357,wLoc2A_45,wLoc2E_10,wLoc30_13,wLoc32_18,Z_355
		defs: ah_385,al_370,ax_375,bh_382,bl_381,bp_363,bx_380,C_373,ch_388,cl_387,cs_376,cx_377,CZ_383,D_369,di_367,dl_386,ds_371,dx_384,es_368,S_379,SCZO_365,si_366,SO_378,sp_362,ss_364,SZO_372,Z_374
	sp_101 = sp_362 + 0x0002
	ax_194 = ax_375
	branch ax_375 > 0x0000 l0800_174A
// DataOut: al bp bx di ds es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16) Local -0026(0) Local -0028(16) Local -002A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_1764:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

l0800_1764_thunk_fn0800_1AEB:
	word16 bp_230
	fn0800_1AEB(bp_1001, out bp_230)
	return bp_230
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> dx:<invalid> es:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>

fn0800_16F3_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> ah:<invalid> dl:<invalid> cl:<invalid> ch:<invalid> -64(fp):<invalid> -62(fp):<invalid> -60(fp):<invalid> -58(fp):<invalid> -56(fp):0x7FFF -54(fp):<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):<invalid> -42(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -34(fp):0x0000 -2(fp):bp 8(fp):<invalid>



word16 fn0800_1708(word16 bp, selector ds, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut: di es
// Trashed: SCZO di dil edi es rdi
// Preserved: sp
fn0800_1708_entry:
// DataOut: al ax bp bx ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1708:
	word16 di_5 = Mem0[ss:bp + 0x000C:word16]
	branch (Mem0[ss:bp - 0x0029:byte] & 0x20) == 0x00 l0800_1718
// DataOut: al ax bp bx di ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1718:
	word16 di_26 = Mem0[ds:di_5:word16]
	Mem33[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0002
	selector es_29
	*esOut = ds
	return di_26
// DataOut: al ax bp bx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

l0800_1711:
	ptr32 es_di_19 = Mem0[ds:di_5:segptr32]
	Mem23[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0004
	selector es_21
	*esOut = SLICE(es_di_19, selector, 16)
	return (word16) es_di_19
// DataOut: al ax bp bx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

fn0800_1708_exit:
// DataOut: di es
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid> Sequence es:di:<invalid> es:ds -2(fp):ds



word16 fn0800_1898(word16 ax, word16 bp, selector ds, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut: ax bp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_1898_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898_thunk_fn0800_1B06:
	word16 bp_5
	return fn0800_1B06(ax, bp, ds, out bp_5)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1898_exit:
// DataOut: ax bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



void fn0800_18AF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18AF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18AF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid>



void fn0800_18CF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18CF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid>



word16 fn0800_196F(word16 ax, word16 bp, selector ds, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut: ax bp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_196F_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F_thunk_fn0800_1B06:
	word16 bp_5
	return fn0800_1B06(ax, bp, ds, out bp_5)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_196F_exit:
// DataOut: ax bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



word16 fn0800_1AEB(word16 bp, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ss
// LiveOut: ax bp
// Trashed: SCZO ah al ax bp bpl ch cl cx di dil eax ebp ecx edi es esi esp rax rbp rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1AEB_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_1AEB:
	Mem7[ss:v3 - 0x0002:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem10[ss:v3 - 0x0004:word16] = 0xFFFF
	word16 sp_12
	selector ss_13
	word16 bp_14
	word16 ax_15
	selector cs_16
	word16 cx_17
	byte SCZO_18
	byte C_19
	selector es_20
	word16 di_21
	word16 si_22
	call SEQ(cs, Mem10[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ax_8,bp,cs,sp_9,ss
		defs: ax_15,bp_14,C_19,cs_16,cx_17,di_21,es_20,SCZO_18,si_22,sp_12,ss_13
	Mem30[ss_13:bp_14 - 0x0028:word16] = Mem10[ss_13:bp_14 - 0x0028:word16] - (Mem10[ss_13:bp_14 - 0x0028:word16] <u 0x0001)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1AFB_thunk_fn0800_1AFF:
	word16 bp_32
	return fn0800_1AFF(bp_14, out bp_32)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid>

fn0800_1AEB_exit:
// DataOut: ax bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



word16 fn0800_1AFF(word16 bp, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ss
// LiveOut: ax bp
// Trashed: ah al ax bp bpl di dil eax ebp edi es esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1AFF_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_1AFF:
	word16 ax_7 = Mem0[ss:bp - 0x0028:word16]
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B8C:
	word16 bp_12
	*bpOut = Mem0[ss:bp:word16]
	return ax_7
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:v3 + 0x0002 es:<invalid> ax:<invalid>

fn0800_1AFF_exit:
// DataOut: ax bp
// DataOut (flags): 
// SymbolicIn: sp:bp + 0x0002 es:<invalid> ax:<invalid> di:<invalid> si:<invalid> bp:<invalid>



word16 fn0800_1B06(word16 ax, word16 bp, selector ds, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut: ax bp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1B06_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_1B06:
	Mem8[ss:bp - 0x0026:word16] = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem12[ss:v3 - 0x0002:word16] = Mem8[ss:bp + 0x0008:word16]
	word16 sp_14
	byte SZO_17
	selector cs_18
	word16 cx_19
	word16 ax_20
	byte C_21
	byte al_22
	byte S_23
	word16 bx_24
	selector ds_25
	byte SCZO_26
	byte Z_27
	call SEQ(cs, Mem12[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: bp_2,cs,sp_11,ss_3,SZO_9
		defs: al_22,ax_20,bp_16,bx_24,C_21,cs_18,cx_19,ds_25,S_23,SCZO_26,sp_14,ss_15,SZO_17,Z_27
	byte al_31 = (byte) ax_20
	branch ax_20 <= 0x0000 l0800_1B27
// DataOut: al ax bp ds sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>
// LocalsOut: v3(16)

l0800_1B27:
	branch ax_20 == 0x0000 l0800_1B21
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>

l0800_1B29:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>

l0800_1B2A_thunk_fn0800_1AEB:
	word16 bp_86
	return fn0800_1AEB(bp, out bp_86)
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>

l0800_1B14:
	word16 ax_71 = DPB(ax_20, al_31, 0)
	branch al_31 < 0x00 l0800_1B21
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>
// LocalsOut: v3(16)

l0800_1B18:
	branch Mem12[ds_25:ax_71 + 0x055A:byte] == 0x01 l0800_1B06
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>
// LocalsOut: v3(16)

l0800_1B21:
	word16 sp_56
	selector ss_57
	word16 bp_58
	byte SZO_59
	selector cs_60
	word16 cx_61
	word16 ax_62
	byte C_63
	byte al_64
	byte S_65
	word16 bx_66
	selector ds_67
	byte SCZO_68
	byte Z_69
	call Mem12[ss:sp_14 + 0x0002:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_31,ax_30,bp_16,bx_24,C_35,cs_18,cx_54,ds_25,S_34,SCZO_55,sp_53,ss_15,SZO_32,Z_33
		defs: al_64,ax_62,bp_58,bx_66,C_63,cs_60,cx_61,ds_67,S_65,SCZO_68,sp_56,ss_57,SZO_59,Z_69
	return ax_62
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid>

fn0800_1B06_exit:
// DataOut: ax bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



void fn0800_1B2C(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_1B2C_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B2C:
	word16 sp_1 = fp
	word16 dx_148 = 0x0000
	word16 cx_134 = 0x0004
	byte cl_119 = 0x04
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B31:
	word16 v8_30 = Mem0[ss:bp - 0x0022:word16] - 0x0001
	Mem31[ss:bp - 0x0022:word16] = v8_30
	branch v8_30 < 0x0000 l0800_1B7B
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7B:
// DataOut: bp cl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B36:
	word16 sp_90 = sp_1 - 0x0002
	Mem91[ss:sp_90:word16] = dx_148
	Mem93[ss:sp_90 - 0x0002:word16] = cx_134
	Mem95[ss:bp - 0x0026:word16] = Mem93[ss:bp - 0x0026:word16] + 0x0001
	Mem99[ss:sp_90 - 0x0004:word16] = Mem95[ss:bp + 0x0008:word16]
	word16 sp_100
	word16 dx_101
	byte SCZO_102
	word16 cx_103
	byte SZO_106
	byte SO_107
	word16 ax_109
	byte C_110
	byte cl_111
	byte ch_112
	byte al_113
	byte dl_114
	byte Z_115
	call SEQ(cs, Mem99[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: al_16,ax_19,bp_22,C_18,ch_24,cl_17,cs_20,cx_25,dl_26,dx_27,SCZO_28,SO_33,sp_98,ss_21,SZO_96,Z_15
		defs: al_113,ax_109,bp_104,C_110,ch_112,cl_111,cs_108,cx_103,dl_114,dx_101,SCZO_102,SO_107,sp_100,ss_105,SZO_106,Z_115
	word16 cx_118 = Mem99[ss:sp_100 + 0x0002:word16]
	cl_119 = (byte) cx_118 (alias)
	word16 dx_121 = Mem99[ss:sp_100 + 0x0004:word16]
	sp_1 = sp_100 + 0x0006
	byte al_125 = (byte) ax_109
	branch ax_109 <= 0x0000 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B48:
	cl_119 = cl_119 - 0x01
	word16 cx_129 = DPB(cx_118, cl_119 - 0x01, 0)
	branch cl_119 < 0x01 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B4C:
	byte ch_133 = al_125 - 0x30
	cx_134 = DPB(cx_129, al_125 - 0x30, 8) (alias)
	branch al_125 <u 0x30 l0800_1B7D
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B53:
	branch al_125 <u 0x3A l0800_1B6F
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B58:
	byte ch_150 = al_125 - 0x41
	word16 cx_151 = DPB(cx_129, al_125 - 0x41, 8)
	branch al_125 <u 0x41 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B5D:
	branch al_125 <u 0x47 l0800_1B6C
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B62:
	ch_150 = al_125 - 0x61
	cx_151 = DPB(cx_129, al_125 - 0x61, 8) (alias)
	branch al_125 <u 0x61 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B67:
	branch al_125 >=u 0x67 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x61 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7D:
	branch cl_119 == 0x04 l0800_1B88
// DataOut: bp sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B88:
// DataOut: bp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B89_thunk_fn0800_1AEB:
	word16 bp_88
	fn0800_1AEB(bp, out bp_88)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B82:
	word16 sp_70
	word16 dx_71
	byte SCZO_72
	word16 cx_73
	word16 bp_74
	selector ss_75
	byte SZO_76
	byte SO_77
	selector cs_78
	word16 ax_79
	byte C_80
	byte cl_81
	byte ch_82
	byte al_83
	byte dl_84
	byte Z_85
	call Mem31[ss:sp_1:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_34,ax_37,bp_42,C_36,ch_44,cl_35,cs_38,cx_68,dl_46,dx_47,SCZO_69,SO_39,sp_67,ss_41,SZO_40,Z_49
		defs: al_83,ax_79,bp_74,C_80,ch_82,cl_81,cs_78,cx_73,dl_84,dx_71,SCZO_72,SO_77,sp_70,ss_75,SZO_76,Z_85
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

fn0800_1B2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6C:
	ch_133 = ch_150 + 0x0A
	cx_134 = DPB(cx_151, ch_133, 8) (alias)
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6F:
	dx_148 = DPB(dx_121 << 0x0004, (byte) (dx_121 << 0x0004) + ch_133, 0) (alias)
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000



void __scantod()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: sp
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B92_entry:
// DataOut: bp bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B92:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E2:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B92_exit:
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void __scanrslt()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: sp
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B96_entry:
// DataOut: bp bx di ds es ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B96:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E4:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut: bp bx di ds es sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B96_exit:
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void __scanpop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: sp
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B9A_entry:
// DataOut: bp bx di ds es ss
// DataOut (flags): SO
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B9A:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E6:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut: bp bx di ds es sp ss
// DataOut (flags): SO
// SymbolicIn: sp:fp

fn0800_1B9A_exit:
// DataOut: sp
// DataOut (flags): SO
// SymbolicIn: sp:<invalid>



byte fn0800_1B9E(byte cl, byte bl)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bl cl
// LiveOut: C
// Trashed: SCZO bh bl bx ebx rbx
// Preserved: bx sp
fn0800_1B9E_entry:
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B9E:
	byte C_13
	byte bl_26 = bl - 0x30
	branch bl <u 0x30 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1BA4:
	branch bl <=u 0x39 l0800_1BBB
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BA9:
	branch bl >u 0x5A l0800_1BB3
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BB3:
	bl_26 = bl - 0x57
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BAE:
	bl_26 = bl - 0x37
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BB6:
	branch bl_26 <=u 0x09 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16)

l0800_1BBB:
	branch bl_26 >=u cl l0800_1BC7
// DataOut: bl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16)

l0800_1BC7:
	C_13 = true
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BBF:
	C_13 = false
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BC5:
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

l0800_1BCB:
	return C_13
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

fn0800_1B9E_exit:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx



word16 __scantol(word16 ax, word16 bx, selector ds, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, word16 wArg0E, ptr16 & dxOut, ptr16 & bxOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx ds ss
// LiveOut: ax bx di dx es
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: al bp sp
// Stack args: Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)
fn0800_1BCC_entry:
// DataOut: ax bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BCC:
	byte bLoc07_14 = 0x00
	word16 wLoc06_133 = 0x0000
	word16 wLoc04_130 = 0x0001
	word16 sp_101 = fp - 0x000E
// DataOut: ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BE6:
	selector ds_160
	word16 ax_178
	word16 v9_28 = wLoc06_133 + 0x0001
	word16 sp_33 = sp_101 - 0x0002
	Mem34[ss:sp_33:word16] = wArg06
	wLoc06_133 = v9_28
	word16 sp_36
	word16 bp_37
	byte SCZO_39
	word16 si_40
	word16 di_41
	selector es_42
	byte SZO_43
	selector cs_44
	word16 cx_45
	word16 ax_46
	byte C_47
	byte SO_48
	byte al_49
	word16 bx_50
	byte bl_51
	byte Z_52
	selector ds_53
	byte CZ_54
	byte cl_55
	word16 dx_56
	byte dl_57
	byte dh_58
	byte ah_59
	call SEQ(cs, Mem34[ss:fp + 0x0002:word16]) (retsize: 2; depth: 2)
		uses: bLoc07_14,bp_5,cs,cx,di_20,es,SCZO_7,si,sp_33,ss_25,SZO_30,wLoc02_4,wLoc04_16,wLoc06_29,wLoc0A_10,wLoc0C_13,wLoc0E_19
		defs: ah_59,al_49,ax_46,bl_51,bp_37,bx_50,C_47,cl_55,cs_44,cx_45,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_48,sp_36,ss_38,SZO_43,Z_52
	sp_101 = sp_36 + 0x0002
	word16 ax_134 = ax_46
	byte al_66 = (byte) ax_46
	branch ax_46 < 0x0000 l0800_1C5A
// DataOut: al ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BF4:
	word16 ax_216 = (int16) al_66
	byte bl_225 = (byte) ax_216
	branch (bl_225 & 0x80) != 0x00 l0800_1C00
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BFB:
	branch (Mem34[ds_53:ax_216 + di_41:byte] & 0x01) != 0x00 l0800_1BE6
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C00:
	ax_134 = ax_216
	byte al_235 = (byte) ax_216
	word16 wArg0A_240 = wArg0A - 0x0001
	branch wArg0A < 0x0001 l0800_1C61
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C06:
	word16 bp_301
	selector cs_284
	branch al_235 == 0x2B l0800_1C11
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0A:
	ds_160 = ds_53
	cs_284 = cs_44
	bp_301 = bp_37
	branch al_235 != 0x2D l0800_1C24
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0E:
	bLoc07_14 = 0x01
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C11:
	wArg0A_240 = wArg0A - 0x0002
	branch wArg0A < 0x0002 l0800_1C61
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C16:
	Mem834[ss:sp_36:word16] = wArg06
	wLoc06_133 = v9_28 + 0x0001
	word16 sp_835
	byte SCZO_838
	word16 si_839
	word16 di_840
	selector es_841
	byte SZO_842
	word16 cx_844
	word16 ax_845
	byte C_846
	byte SO_847
	byte al_848
	word16 bx_849
	byte bl_850
	byte Z_851
	byte CZ_853
	byte cl_854
	word16 dx_855
	byte dl_856
	byte dh_857
	byte ah_858
	call SEQ(cs_44, Mem834[ss:bp_37 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_236,al_235,ax_232,bl_225,bLoc07_822,bp_37,bx_238,C_230,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_824,si_40,SO_828,sp_833,ss_38,SZO_831,wLoc02_4,wLoc04_16,wLoc06_830,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_823
		defs: ah_858,al_848,ax_845,bl_850,bp_836,bx_849,C_846,cl_854,cs_843,cx_844,CZ_853,dh_857,di_840,dl_856,ds_852,dx_855,es_841,SCZO_838,si_839,SO_847,sp_835,ss_837,SZO_842,Z_851
	sp_101 = sp_835 + 0x0002
	ax_134 = ax_845
	al_235 = (byte) ax_845 (alias)
	branch ax_845 < 0x0000 l0800_1C5A
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C5A:
	wLoc04_130 = 0xFFFF
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C24:
	word16 ax_408
	word16 si_303 = 0x0000
	word16 di_306 = 0x0000
	byte cl_310 = (byte) wArg08
	branch wArg08 == 0x0000 l0800_1C7B
// DataOut: al ax cl cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C7B:
	wArg08 = 0x000A
	branch al_235 != 0x30 l0800_1CA7
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C84:
	word16 v63_777 = wArg0A_240 - 0x0001
	wArg0A_240 = v63_777
	branch v63_777 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C89:
	word16 sp_785 = sp_101 - 0x0002
	Mem786[ss:sp_785:word16] = wArg06
	wLoc06_133 = wLoc06_133 + 0x0001
	word16 sp_787
	byte SCZO_790
	selector es_793
	byte SZO_794
	word16 cx_796
	byte C_798
	byte SO_799
	byte al_800
	word16 bx_801
	byte bl_802
	byte Z_803
	byte CZ_805
	byte cl_806
	word16 dx_807
	byte dl_808
	byte dh_809
	byte ah_810
	call SEQ(cs_284, Mem786[ss:bp_301 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_291,al_290,ax_289,bl_299,bLoc07_279,bp_301,bx_298,C_293,cl_310,cs_284,cx_308,CZ_281,dh_297,di_306,dl_296,ds_282,dx_294,es_300,SCZO_774,si_303,SO_780,sp_785,ss_285,SZO_783,wLoc02_4,wLoc04_16,wLoc06_782,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_775
		defs: ah_810,al_800,ax_797,bl_802,bp_788,bx_801,C_798,cl_806,cs_795,cx_796,CZ_805,dh_809,di_792,dl_808,ds_804,dx_807,es_793,SCZO_790,si_791,SO_799,sp_787,ss_789,SZO_794,Z_803
	sp_101 = sp_787 + 0x0002
	wArg08 = 0x0008
	branch al_800 == 0x78 l0800_1CA0
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C9C:
	branch al_800 != 0x58 l0800_1CCD
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA0:
	wArg08 = 0x0010
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C2D:
	branch wArg08 >u 0x0024 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C32:
	branch cl_310 <u 0x02 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C37:
	branch al_235 != 0x30 l0800_1CA7
// DataOut: al cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA7:
	branch fn0800_1B9E(0x0A, (byte) ax_134) l0800_1C61
// DataOut: ax di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C61:
	wLoc04_130 = 0x0000
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C66:
	word16 sp_139 = sp_101 - 0x0002
	Mem140[ss:sp_139:word16] = wArg06
	Mem142[ss:sp_139 - 0x0002:word16] = ax_134
	word16 sp_143
	word16 bp_144
	byte SCZO_146
	word16 si_147
	word16 di_148
	selector es_149
	byte SZO_150
	selector cs_151
	word16 cx_152
	word16 ax_153
	byte C_154
	byte SO_155
	byte al_156
	word16 bx_157
	byte bl_158
	byte Z_159
	byte CZ_161
	byte cl_162
	word16 dx_163
	byte dl_164
	byte dh_165
	byte ah_166
	call SEQ(cs_44, Mem142[ss:bp_37 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_67,al_66,ax_134,bl_51,bLoc07_128,bp_37,bx_50,C_71,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_70,sp_141,ss_132,SZO_69,wLoc02_4,wLoc04_130,wLoc06_133,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_52
		defs: ah_166,al_156,ax_153,bl_158,bp_144,bx_157,C_154,cl_162,cs_151,cx_152,CZ_161,dh_165,di_148,dl_164,ds_160,dx_163,es_149,SCZO_146,si_147,SO_155,sp_143,ss_145,SZO_150,Z_159
	sp_101 = sp_143 + 0x0004
	wLoc06_133 = wLoc06_133 - 0x0001
	ax_178 = 0x0000 (alias)
	word16 dx_180
	*dxOut = 0x0000
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CB1:
	si_303 = ax_134
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:0x000A ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C3B:
	branch cl_310 != 0x10 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C40:
	word16 v31_733 = wArg0A_240 - 0x0001
	wArg0A_240 = v31_733
	branch v31_733 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C78:
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1C45:
	word16 sp_741 = sp_101 - 0x0002
	Mem742[ss:sp_741:word16] = wArg06
	wLoc06_133 = wLoc06_133 + 0x0001
	word16 sp_743
	byte SCZO_746
	selector es_749
	byte SZO_750
	word16 cx_752
	byte C_754
	byte SO_755
	byte al_756
	word16 bx_757
	byte bl_758
	byte Z_759
	byte CZ_761
	byte cl_762
	word16 dx_763
	byte dl_764
	byte dh_765
	byte ah_766
	call SEQ(cs_284, Mem742[ss:bp_301 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_291,al_290,ax_289,bl_299,bLoc07_279,bp_301,bx_298,C_728,cl_310,cs_284,cx_308,CZ_726,dh_297,di_306,dl_296,ds_282,dx_294,es_300,SCZO_731,si_303,SO_736,sp_741,ss_285,SZO_739,wLoc02_4,wLoc04_16,wLoc06_738,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_732
		defs: ah_766,al_756,ax_753,bl_758,bp_744,bx_757,C_754,cl_762,cs_751,cx_752,CZ_761,dh_765,di_748,dl_764,ds_760,dx_763,es_749,SCZO_746,si_747,SO_755,sp_743,ss_745,SZO_750,Z_759
	sp_101 = sp_743 + 0x0002
	branch al_756 == 0x78 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C53:
	branch al_756 == 0x58 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA5:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0010 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C57:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CCD:
	byte cl_449 = (byte) wArg08
	byte bl_453 = (byte) ax_408
	byte C_454 = fn0800_1B9E(cl_449, bl_453)
	word16 ax_456 = ax_408
	branch C_454 l0800_1CB4
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CB4:
	int32 dx_ax_513 = wArg08 *u si_303
	ui32 di_si_520 = SEQ(di_306, ax_408 + (word16) dx_ax_513) + dx_ax_513
	di_306 = SLICE(di_si_520, word16, 16) (alias)
	si_303 = (word16) di_si_520 (alias)
	cs_529 = cs_284
	bp_552 = bp_301
	branch di_si_520 != 0x00000000 l0800_1CEA
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEA:
	selector cs_529
	word16 bp_552
	word16 v48_554 = wArg0A_240 - 0x0001
	wArg0A_240 = v48_554
	branch v48_554 < 0x0000 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEF:
	word16 sp_562 = sp_101 - 0x0002
	Mem563[ss:sp_562:word16] = wArg06
	wLoc06_133 = wLoc06_133 + 0x0001
	word16 sp_564
	byte SCZO_567
	word16 si_568
	word16 di_569
	selector es_570
	byte SZO_571
	word16 cx_573
	word16 ax_574
	byte C_575
	byte SO_576
	byte al_577
	word16 bx_578
	byte bl_579
	byte Z_580
	byte CZ_582
	byte cl_583
	word16 dx_584
	byte dl_585
	byte dh_586
	byte ah_587
	call SEQ(cs_529, Mem563[ss:bp_552 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_536,al_535,ax_534,bl_545,bLoc07_279,bp_552,bx_544,C_538,cl_526,cs_529,cx_531,CZ_527,dh_542,di_547,dl_541,ds_528,dx_539,es_546,SCZO_543,si_549,SO_557,sp_562,ss_530,SZO_560,wLoc02_4,wLoc04_16,wLoc06_559,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_533
		defs: ah_587,al_577,ax_574,bl_579,bp_565,bx_578,C_575,cl_583,cs_572,cx_573,CZ_582,dh_586,di_569,dl_585,ds_581,dx_584,es_570,SCZO_567,si_568,SO_576,sp_564,ss_566,SZO_571,Z_580
	sp_101 = sp_564 + 0x0002
	ax_456 = ax_574
	branch fn0800_1B9E((byte) wArg08, (byte) ax_574) l0800_1CD9
// DataOut: ax cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD9:
	int32 dx_ax_609 = wArg08 *u si_568
	word16 ax_610 = (word16) dx_ax_609
	ui32 ax_si_625 = SEQ(di_569, ax_574 + ax_610) + SEQ(SLICE(dx_ax_609, word16, 16), ax_610)
	int32 dx_ax_619 = wArg08 *u di_569
	si_303 = (word16) ax_si_625 (alias)
	di_306 = SLICE(ax_si_625, word16, 16)
	branch SLICE(dx_ax_619, byte, 16) + SLICE(dx_ax_619, byte, 24) + (ax_si_625 <u 0x00000000) != 0x00 l0800_1D32
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1D32:
	byte ah_649 = (bLoc07_14 <u 0xFF) + 0xFF
	ax_178 = DPB(0xFFFF, ah_649, 8) (alias)
	word16 dx_655
	*dxOut = (ah_649 <u 0x00) + 0x7FFF
	wLoc04_130 = 0x0002
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CBE:
	word16 v40_388 = wArg0A_240 - 0x0001
	wArg0A_240 = v40_388
	branch v40_388 < 0x0000 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CC3:
	word16 sp_396 = sp_101 - 0x0002
	Mem397[ss:sp_396:word16] = wArg06
	wLoc06_133 = wLoc06_133 + 0x0001
	word16 sp_398
	byte SCZO_401
	selector es_404
	byte SZO_405
	word16 cx_407
	byte C_409
	byte SO_410
	byte al_411
	word16 bx_412
	byte bl_413
	byte Z_414
	byte CZ_416
	byte cl_417
	word16 dx_418
	byte dl_419
	byte dh_420
	byte ah_421
	call SEQ(cs_284, Mem397[ss:bp_301 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_370,al_369,ax_368,bl_379,bLoc07_279,bp_386,bx_378,C_372,cl_360,cs_363,cx_365,CZ_361,dh_376,di_381,dl_375,ds_362,dx_373,es_380,SCZO_377,si_383,SO_391,sp_396,ss_364,SZO_394,wLoc02_4,wLoc04_16,wLoc06_393,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_367
		defs: ah_421,al_411,ax_408,bl_413,bp_399,bx_412,C_409,cl_417,cs_406,cx_407,CZ_416,dh_420,di_403,dl_419,ds_415,dx_418,es_404,SCZO_401,si_402,SO_410,sp_398,ss_400,SZO_405,Z_414
	sp_101 = sp_398 + 0x0002
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD7:
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D03:
	word16 sp_473 = sp_101 - 0x0002
	Mem474[ss:sp_473:word16] = wArg06
	Mem476[ss:sp_473 - 0x0002:word16] = ax_456
	word16 sp_477
	word16 bp_478
	byte SCZO_480
	selector es_483
	byte SZO_484
	selector cs_485
	word16 cx_486
	word16 ax_487
	byte C_488
	byte SO_489
	byte al_490
	word16 bx_491
	byte bl_492
	byte Z_493
	byte CZ_495
	byte cl_496
	word16 dx_497
	byte dl_498
	byte dh_499
	byte ah_500
	call SEQ(cs_284, Mem476[ss:bp_301 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_460,al_459,ax_466,bl_453,bLoc07_279,bp_445,bx_462,C_454,cl_449,cs_430,cx_447,CZ_427,dh_438,di_442,dl_437,ds_428,dx_436,es_441,SCZO_439,si_443,SO_429,sp_475,ss_464,SZO_433,wLoc02_4,wLoc04_16,wLoc06_465,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_434
		defs: ah_500,al_490,ax_487,bl_492,bp_478,bx_491,C_488,cl_496,cs_485,cx_486,CZ_495,dh_499,di_482,dl_498,ds_494,dx_497,es_483,SCZO_480,si_481,SO_489,sp_477,ss_479,SZO_484,Z_493
	sp_101 = sp_477 + 0x0004
	wLoc06_133 = wLoc06_133 - 0x0001
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1D0F:
	word16 dx_333
	*dxOut = di_306
	ax_178 = si_303
	branch bLoc07_14 == 0x00 l0800_1D1F
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D18:
	ax_178 = -si_303
	word16 dx_353
	*dxOut = -di_306 - (ax_178 == 0x0000)
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D1F:
	Mem106[ds_160:wArg0C:word16] = Mem34[ds_160:wArg0C:word16] + wLoc06_133
	Mem112[ds_160:wArg0E:word16] = wLoc04_130
	word16 bx_110
	*bxOut = wLoc04_130
	selector es_113
	*esOut = Mem112[ss:sp_101:selector]
	word16 sp_114 = sp_101 + 0x0002
// DataOut: ax bx ds dx es sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16)

l0800_1D48:
	word16 di_115
	*diOut = Mem112[ss:sp_114:word16]
	return ax_178
// DataOut: ax bx di ds dx es ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>

fn0800_1BCC_exit:
// DataOut: ax bx di dx es
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>



void _tell(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1D4E_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1D4E:
	word16 dx_23
	_lseek(0x00, ds, wArg02, 0x0000, 0x0000, 0x01, out dx_23)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1D63:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp

fn0800_1D4E_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp



