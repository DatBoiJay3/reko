// fn00001000
// Return size: 4
void fn00001000()
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a2 = a0
	d2 = d0
	CVZN = cond(d2)
	a4 = 0x00009608
	a6 = Mem0[0x00000004:word32]
	a3 = 0x0000B620
	d1 = 0
	CVZN = cond(d1)
	d0 = 0x000009E6
	CVZN = cond(d0)
	goto l00001024
	// succ:  l00001024
l00001022:
	v26 = d1
	Mem0[a3:word32] = v26
	a3 = a3 + 0x00000004
	CVZN = cond(v26)
	// succ:  l00001024
l00001024:
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00001022
	// succ:  l00001028 l00001022
l00001028:
	v18 = a7
	Mem0[a4 + 8280:word32] = v18
	CVZN = cond(v18)
	v19 = a6
	Mem0[a4 + 8272:word32] = v19
	CVZN = cond(v19)
	Mem0[a4 + 8276:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00003000
	CVZN = cond(d1)
	SetSignal(d0, d1)
	a1 = 0x000011EA
	d0 = 0
	CVZN = cond(d0)
	d0 = OpenLibrary(a1, d0)
	v25 = d0
	Mem0[a4 + 18340:word32] = v25
	CVZN = cond(v25)
	branch Test(NE,Z) l00001056
	// succ:  l00001050 l00001056
l00001050:
	d0 = 100
	CVZN = cond(d0)
	// succ:  l00001050_thunk_fn000011DA
l00001050_thunk_fn000011DA:
	call fn000011DA (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001056:
	a3 = Mem0[a6 + 276:word32]
	v27 = Mem0[a3 + 152:word32]
	Mem0[a4 + 8268:word32] = v27
	CVZN = cond(v27)
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000010F8
	// succ:  l00001068 l000010F8
l00001068:
	d0 = a7
	CVZN = cond(d0)
	d0 = d0 - Mem0[a7 + 56:word32]
	CVZNX = cond(d0)
	d0 = d0 + 0x00000080
	CVZNX = cond(d0)
	v30 = d0
	Mem0[a4 + 8220:word32] = v30
	CVZN = cond(v30)
	a0 = Mem0[a3 + 172:word32]
	a0 = a0 + a0
	a0 = a0 + a0
	a1 = Mem0[a0 + 16:word32]
	a1 = a1 + a1
	a1 = a1 + a1
	d0 = d2
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v31 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	d1 = DPB(d1, v31, 0)
	CVZN = cond(v31)
	v32 = a1
	Mem0[a4 + 8288:word32] = v32
	CVZN = cond(v32)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d0 = d0 + 0x00000007
	CVZNX = cond(d0)
	v33 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v33, 0)
	ZN = cond(v33)
	C = false
	V = false
	v34 = d0
	Mem0[a4 + 8296:word32] = v34
	CVZN = cond(v34)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000010C0
	// succ:  l000010B4 l000010C0
l000010B4:
	d0 = 0x000003E8
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v35 = d0
	Mem0[a7:word32] = v35
	CVZN = cond(v35)
	// succ:  l000010BA_thunk_fn000011DA
l000010BA_thunk_fn000011DA:
	call fn000011DA (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000010C0:
	a0 = d0
	v44 = d0
	Mem0[a4 + 8292:word32] = v44
	CVZN = cond(v44)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	d2 = d2 + d1
	CVZNX = cond(d2)
	// succ:  l000010CC
l000010CC:
	v45 = Mem0[a2 + (int32) ((int16) d0):byte]
	Mem0[a2 + 2 + d2:byte] = v45
	CVZN = cond(v45)
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l000010CC
	// succ:  l000010D8 l000010CC
l000010D8:
	v46 = 0x20
	Mem0[a4 + 2 + d2:byte] = v46
	CVZN = cond(v46)
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	v47 = 0x22
	Mem0[a4 + 2 + d2:byte] = v47
	CVZN = cond(v47)
	// succ:  l000010E6
l000010E6:
	v48 = Mem0[a1 + (int32) ((int16) d2):byte]
	Mem0[a1 + 1 + d2:byte] = v48
	CVZN = cond(v48)
	d2 = d2 - 0x00000001
	branch d2 != 0xFFFFFFFF l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v49 = 0x22
	Mem0[a0:byte] = v49
	CVZN = cond(v49)
	a7 = a7 - 0x00000004
	v50 = a0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	goto l00001170
	// succ:  l00001170
l000010F8:
	v36 = Mem0[a3 + 58:word32]
	Mem0[a4 + 8220:word32] = v36
	CVZN = cond(v36)
	d0 = 127
	CVZN = cond(d0)
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	v37 = Mem0[a4 + 8220:word32] + d0
	Mem0[a4 + 8220:word32] = v37
	CVZNX = cond(v37)
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	v38 = d0
	Mem0[a4 + 8276:word32] = v38
	CVZN = cond(v38)
	a7 = a7 - 0x00000004
	v39 = d0
	Mem0[a7:word32] = v39
	CVZN = cond(v39)
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000113C
	// succ:  l00001124 l0000113C
l00001124:
	a6 = Mem0[a4 + 18340:word32]
	a0 = d0
	d1 = Mem0[a0 + 0:word32]
	CVZN = cond(d1)
	FindResident(a1)
	v40 = d0
	Mem0[a4 + 8268:word32] = v40
	CVZN = cond(v40)
	d1 = d0
	CVZN = cond(d1)
	Enable()
	// succ:  l0000113C
l0000113C:
	d1 = Mem0[a2 + 32:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000115C
	// succ:  l00001142 l0000115C
l00001142:
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v42 = d0
	Mem0[a4 + 8284:word32] = v42
	CVZN = cond(v42)
	branch Test(EQ,Z) l0000115C
	// succ:  l00001152 l0000115C
l00001152:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	v43 = Mem0[a0 + 8:word32]
	Mem0[a3 + 164:word32] = v43
	CVZN = cond(v43)
	// succ:  l0000115C
l0000115C:
	a0 = Mem0[a4 + 8276:word32]
	a7 = a7 - 0x00000004
	v51 = a0
	Mem0[a7:word32] = v51
	CVZN = cond(v51)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 8216
	a0 = Mem0[a0 + 36:word32]
	v52 = Mem0[a0 + 4:word32]
	Mem0[a4 + 8288:word32] = v52
	CVZN = cond(v52)
	// succ:  l00001170
l00001170:
	call fn000060AC (retsize: 4;)
	call fn00006FB8 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000117A_thunk_fn00001180
l0000117A_thunk_fn00001180:
	call fn00001180 (retsize: 0;)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn0000117C
// Return size: 0
void fn0000117C()
fn0000117C_entry:
	// succ:  l0000117C
l0000117C:
	a7 = fp
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	// succ:  l0000117C_thunk_fn00001180
l0000117C_thunk_fn00001180:
	call fn00001180 (retsize: 0;)
	return
	// succ:  fn0000117C_exit
fn0000117C_exit:


// fn00001180
// Return size: 0
void fn00001180()
fn00001180_entry:
	// succ:  l00001180
l00001180:
	a7 = fp
	a7 = Mem0[a4 + 8280:word32]
	a7 = a7 - 0x00000004
	v5 = d0
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	d0 = Mem0[a4 + 8260:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000118A_thunk_fn00001190
	goto l0000118A_thunk_fn0000118C
	// succ:  l0000118A_thunk_fn0000118C l0000118A_thunk_fn00001190
l00001180:
	a7 = Mem0[a4 + 8280:word32]
	a7 = a7 - 0x00000004
	v8 = d0
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	d0 = Mem0[a4 + 8260:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	goto l0000118A_thunk_fn0000118C
	// succ:  l0000118A_thunk_fn0000118C l0000118A_thunk_fn00001190
l0000118A_thunk_fn0000118C:
	call fn0000118C (retsize: 0;)
	return
	// succ:  fn00001180_exit l0000118A_thunk_fn0000118C
l0000118A_thunk_fn0000118C:
	call fn0000118C (retsize: 0;)
	return
	// succ:  fn00001180_exit
l0000118A_thunk_fn0000118C:
	call fn0000118C (retsize: 0;)
	return
	// succ:  fn00001180_exit
l0000118A_thunk_fn00001190:
	call fn00001190 (retsize: 0;)
	return
	// succ:  fn00001180_exit
l0000118A_thunk_fn00001190:
	call fn00001190 (retsize: 0;)
	return
	// succ:  fn00001180_exit
fn00001180_exit:


// fn0000118C
// Return size: 0
void fn0000118C()
fn0000118C_entry:
	// succ:  l0000118C
l0000118C:
	a7 = v3
	a0 = d0
	call a0 (retsize: 4;)
	// succ:  l0000118E_thunk_fn00001190
l0000118E_thunk_fn00001190:
	call fn00001190 (retsize: 0;)
	return
	// succ:  fn0000118C_exit
fn0000118C_exit:


// fn00001190
// Return size: 0
void fn00001190()
fn00001190_entry:
	// succ:  l00001190
l00001190:
	a7 = v3
	call fn0000830C (retsize: 4;)
	call fn000060AE (retsize: 4;)
	ZN = cond(Mem0[a4 + 8276:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000011C8
	// succ:  l0000119E l000011C8
l0000119E:
	a6 = Mem0[a4 + 18340:word32]
	d1 = Mem0[a4 + 8284:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l000011AC
	// succ:  l000011A8 l000011AC
l000011A8:
	execPrivate1()
	// succ:  l000011AC
l000011AC:
	d1 = Mem0[a4 + 8268:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011B2 l000011B6
l000011B2:
	MakeFunctions(a0, a1, a2)
	// succ:  l000011B6
l000011B6:
	a6 = Mem0[0x00000004:word32]
	Forbid()
	a1 = Mem0[a4 + 8276:word32]
	ReplyMsg(a1)
	// succ:  l000011C6_thunk_fn000011DA
l000011C6_thunk_fn000011DA:
	call fn000011DA (retsize: 0;)
	return
	// succ:  fn00001190_exit
l000011C8:
	d0 = Mem0[a4 + 8296:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011CC_thunk_fn000011DA
	goto l000011CE
	// succ:  l000011CE l000011CC_thunk_fn000011DA
l000011CC_thunk_fn000011DA:
	call fn000011DA (retsize: 0;)
	return
	// succ:  fn00001190_exit
l000011CE:
	a1 = Mem0[a4 + 8292:word32]
	a6 = Mem0[0x00000004:word32]
	FreeMem(a1, d0)
	// succ:  l000011D6_thunk_fn000011DA
l000011D6_thunk_fn000011DA:
	call fn000011DA (retsize: 0;)
	return
	// succ:  fn00001190_exit
fn00001190_exit:


// fn000011DA
// Return size: 0
void fn000011DA()
fn000011DA_entry:
	// succ:  l000011DA
l000011DA:
	a7 = v3
	a1 = Mem0[a4 + 18340:word32]
	CloseLibrary(a1)
	v6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v6
	CVZN = cond(d0)
	// succ:  l000011E4
l000011E4:
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000011DA_exit
fn000011DA_exit:


// fn000011F8
// Return size: 4
void fn000011F8()
fn000011F8_entry:
	// succ:  l000011F8
l000011F8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x000000A4
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l00001200_thunk_fn000076EC
	goto l00001204
	// succ:  l00001204 l00001200_thunk_fn000076EC
l00001200_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn000011F8_exit
l00001204:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d7 = Mem0[a5 + 8:word32]
	CVZN = cond(d7)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1584
	call fn00006170 (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = 3
	CVZN = cond(d0)
	v16 = d7 - d0
	CVZN = cond(v16)
	branch Test(GE,VN) l00001224
	// succ:  l00001220 l00001224
l00001220:
	call fn00002376 (retsize: 4;)
	// succ:  l00001224
l00001224:
	a3 = Mem0[a5 + 12:word32]
	a0 = Mem0[a3 + 4:word32]
	// succ:  l0000122C
l0000122C:
	v19 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v19 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000122C
	// succ:  l00001230 l0000122C
l00001230:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a3 + 4:word32]
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	d1 = 1
	CVZN = cond(d1)
	v25 = d0 - d1
	CVZN = cond(v25)
	branch Test(LE,VZN) l00001246
	// succ:  l0000123E l00001246
l0000123E:
	a7 = a7 - 0x00000004
	v27 = d1
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001246
l00001246:
	a0 = Mem0[a3 + 4:word32]
	v28 = Mem0[a0:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v29 = d0
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1588
	call fn00001AFA (retsize: 4;)
	a7 = a7 + 0x0008
	v30 = d0
	Mem0[a4 + 8916:word32] = v30
	CVZN = cond(v30)
	d1 = 2
	CVZN = cond(d1)
	v31 = d0 - d1
	CVZN = cond(v31)
	branch Test(LE,VZN) l00001270
	// succ:  l00001266 l00001270
l00001266:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000001
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001270
l00001270:
	a0 = Mem0[a3 + 8:word32]
	// succ:  l00001274
l00001274:
	v32 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v32 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001274
	// succ:  l00001278 l00001274
l00001278:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a3 + 8:word32]
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	d1 = 1
	CVZN = cond(d1)
	v33 = d0 - d1
	CVZN = cond(v33)
	branch Test(LE,VZN) l00001290
	// succ:  l00001286 l00001290
l00001286:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000002
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001290
l00001290:
	a0 = Mem0[a3 + 8:word32]
	v34 = Mem0[a0:byte]
	d0 = DPB(d0, v34, 0)
	CVZN = cond(v34)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v35 = d0
	Mem0[a7:word32] = v35
	CVZN = cond(v35)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1592
	call fn00001AFA (retsize: 4;)
	a7 = a7 + 0x0008
	v36 = d0
	Mem0[a4 + 8920:word32] = v36
	CVZN = cond(v36)
	d1 = 5
	CVZN = cond(d1)
	v37 = d0 - d1
	CVZN = cond(v37)
	branch Test(LE,VZN) l000012BA
	// succ:  l000012B0 l000012BA
l000012B0:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000002
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000012BA
l000012BA:
	d0 = Mem0[a4 + 8920:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = a4 + 1142
	a0 = Mem0[a0 + d0:word32]
	a1 = a4 + 14496
	// succ:  l000012CC
l000012CC:
	v39 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v40 = v39
	Mem0[a1:byte] = v40
	a1 = a1 + 0x00000001
	CVZN = cond(v40)
	branch Test(NE,Z) l000012CC
	// succ:  l000012D0 l000012CC
l000012D0:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1600
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	d4 = d7
	CVZN = cond(d4)
	d4 = d4 - 0x00000003
	CVZNX = cond(d4)
	d7 = 3
	CVZN = cond(d7)
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EC
	// succ:  l000012E8 l000012EC
l000012E8:
	call fn00002376 (retsize: 4;)
	// succ:  l000012EC
l000012EC:
	d0 = 0
	CVZN = cond(d0)
	v41 = d0
	Mem0[a4 + 8912:word32] = v41
	CVZN = cond(v41)
	v42 = d0
	Mem0[a4 + 8936:word32] = v42
	CVZN = cond(v42)
	d1 = 0
	CVZN = cond(d1)
	v43 = (word16) d1
	Mem0[a4 + 9964:word16] = v43
	CVZN = cond(v43)
	v44 = d0
	Mem0[a4 + 8932:word32] = v44
	CVZN = cond(v44)
	v45 = (word16) d1
	Mem0[a4 + 9966:word16] = v45
	CVZN = cond(v45)
	v46 = d0
	Mem0[a4 + 8928:word32] = v46
	CVZN = cond(v46)
	v47 = 0x00003000
	Mem0[a4 + 8904:word32] = v47
	CVZN = cond(v47)
	v48 = 0xFFFF
	Mem0[a4 + 10000:word16] = v48
	CVZN = cond(v48)
	d0 = 1
	CVZN = cond(d0)
	v49 = d0
	Mem0[a4 + 8924:word32] = v49
	CVZN = cond(v49)
	Mem0[a4 + 14364:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a2 = a3 + 12
	goto l00001494
	// succ:  l00001494
l00001328:
	v71 = Mem0[a3 + 1:byte]
	d0 = DPB(d0, v71, 0)
	CVZN = cond(v71)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v72 = d0
	Mem0[a7:word32] = v72
	CVZN = cond(v72)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1602
	call fn00001AFA (retsize: 4;)
	a7 = a7 + 0x0008
	d6 = d0
	CVZN = cond(d6)
	d0 = 9
	CVZN = cond(d0)
	v73 = d6 - d0
	CVZN = cond(v73)
	branch Test(LT,CZ) l0000134E
	// succ:  l00001344 l0000134E
l00001344:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000003
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000134E
l0000134E:
	d0 = 6
	CVZN = cond(d0)
	v75 = d6 - d0
	CVZN = cond(v75)
	branch Test(GE,VN) l00001386
	// succ:  l00001354 l00001386
l00001354:
	a0 = Mem0[a2:word32]
	// succ:  l00001356
l00001356:
	v76 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v76 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001356
	// succ:  l0000135A l00001356
l0000135A:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a2:word32]
	CVZNX = cond(a0)
	v77 = (word16) a0 - 0x0002
	CVZN = cond(v77)
	branch Test(NE,Z) l0000137E
	// succ:  l00001364 l0000137E
l00001364:
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	a2 = a2 + 0x00000004
	branch Test(NE,Z) l00001376
	// succ:  l0000136C l00001376
l0000136C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000003
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001376
l00001376:
	a0 = Mem0[a2:word32]
	v85 = a0
	Mem0[a5 + -34:word32] = v85
	CVZN = cond(v85)
	goto l00001386
	// succ:  l00001386
l0000137E:
	a0 = Mem0[a2:word32]
	a0 = a0 + 0x00000002
	v83 = a0
	Mem0[a5 + -34:word32] = v83
	CVZN = cond(v83)
	// succ:  l00001386
l00001386:
	a3 = Mem0[a5 + -34:word32]
	d0 = d6
	CVZN = cond(d0)
	v80 = d0 - 0x00000009
	CVZN = cond(v80)
	branch Test(UGE,C) l0000148E
	// succ:  l00001396 l0000148E
l00001396:
	v81 = (word16) d0 + (word16) d0
	d0 = DPB(d0, v81, 0)
	CVZNX = cond(v81)
	v82 = Mem0[0x000013A0 + (int32) ((int16) d0):word16]
	d0 = DPB(d0, v82, 0)
	CVZN = cond(v82)
	call 0x000013A2 + (int32) ((int16) d0) (retsize: 4;)
	return
	// succ:  fn000011F8_exit
l0000148E:
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	a2 = a2 + 0x00000004
	// succ:  l00001494
l00001494:
	a3 = Mem0[a2:word32]
	v52 = Mem0[a3:byte]
	d0 = DPB(d0, v52, 0)
	CVZN = cond(v52)
	d1 = 45
	CVZN = cond(d1)
	v53 = (byte) d0 - (byte) d1
	CVZN = cond(v53)
	branch Test(EQ,Z) l00001328
	// succ:  l000014A0 l00001328
l000014A0:
	d1 = 47
	CVZN = cond(d1)
	v54 = (byte) d0 - (byte) d1
	CVZN = cond(v54)
	branch Test(EQ,Z) l00001328
	// succ:  l000014A8 l00001328
l000014A8:
	d0 = Mem0[a4 + 8924:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l000014B6
	// succ:  l000014B0 l000014B6
l000014B0:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l000014E0
	// succ:  l000014B4 l000014E0
l000014B4:
	goto l00001504
	// succ:  l00001504
l000014B6:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1632
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = 0
	CVZN = cond(d0)
	v63 = Mem0[a4 + 10000:word16]
	d0 = DPB(d0, v63, 0)
	CVZN = cond(v63)
	v64 = d0 - 0x00008000
	CVZN = cond(v64)
	branch Test(LE,VZN) l000014D8
	// succ:  l000014D2 l000014D8
l000014D2:
	v65 = 0x8000
	Mem0[a4 + 10000:word16] = v65
	CVZN = cond(v65)
	// succ:  l000014D8
l000014D8:
	v66 = 0x1000
	Mem0[a4 + 10002:word16] = v66
	CVZN = cond(v66)
	goto l00001504
	// succ:  l00001504
l000014E0:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1634
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	v55 = Mem0[a4 + 10000:word16]
	d0 = DPB(d0, v55, 0)
	CVZN = cond(v55)
	v56 = (word16) d0 - 0x1000
	CVZN = cond(v56)
	branch Test(ULE,VZ) l000014FE
	// succ:  l000014F8 l000014FE
l000014F8:
	v58 = 0x1000
	Mem0[a4 + 10000:word16] = v58
	CVZN = cond(v58)
	// succ:  l000014FE
l000014FE:
	v62 = 0x00FF
	Mem0[a4 + 10002:word16] = v62
	CVZN = cond(v62)
	// succ:  l00001504
l00001504:
	d0 = 5
	CVZN = cond(d0)
	v59 = d0 - Mem0[a4 + 8920:word32]
	CVZN = cond(v59)
	branch Test(NE,Z) l00001516
	// succ:  l0000150C l00001516
l0000150C:
	Mem0[a4 + 8936:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	v61 = (word16) d0
	Mem0[a4 + 9964:word16] = v61
	CVZN = cond(v61)
	// succ:  l00001516
l00001516:
	ZN = cond(Mem0[a4 + 9964:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l0000152A
	// succ:  l0000151C l0000152A
l0000151C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1636
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l0000152A
l0000152A:
	ZN = cond(Mem0[a4 + 8936:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000153E
	// succ:  l00001530 l0000153E
l00001530:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1638
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l0000153E
l0000153E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1640
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn00007B74 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1646
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14364
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 16
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001562
	// succ:  l0000155E l00001562
l0000155E:
	call fn00002376 (retsize: 4;)
	// succ:  l00001562
l00001562:
	a0 = Mem0[a2:word32]
	d0 = 46
	CVZN = cond(d0)
	v67 = (byte) d0 - Mem0[a0:byte]
	CVZN = cond(v67)
	branch Test(NE,Z) l000015A6
	// succ:  l0000156A l000015A6
l0000156A:
	v68 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v68 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000156A
	// succ:  l0000156E l0000156A
l0000156E:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a2:word32]
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	v69 = d0 - d1
	CVZN = cond(v69)
	branch Test(LE,VZN) l00001582
	// succ:  l0000157A l00001582
l0000157A:
	a7 = a7 - 0x00000004
	v70 = d1
	Mem0[a7:word32] = v70
	CVZN = cond(v70)
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001582
l00001582:
	a0 = Mem0[a2:word32]
	a1 = a4 + 0
	// succ:  l00001588
l00001588:
	v78 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v79 = v78
	Mem0[a1:byte] = v79
	a1 = a1 + 0x00000001
	CVZN = cond(v79)
	branch Test(NE,Z) l00001588
	// succ:  l0000158C l00001588
l0000158C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 0
	call fn00002394 (retsize: 4;)
	a7 = a7 + 0x0004
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	branch Test(NE,Z) l000015A0
	// succ:  l0000159C l000015A0
l0000159C:
	call fn00002376 (retsize: 4;)
	// succ:  l000015A0
l000015A0:
	d0 = 0
	CVZN = cond(d0)
	v84 = d0
	Mem0[a4 + 8928:word32] = v84
	CVZN = cond(v84)
	// succ:  l000015A6
l000015A6:
	ZN = cond(Mem0[a4 + 8916:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000015CC
	// succ:  l000015AC l000015CC
l000015AC:
	d0 = Mem0[a4 + 8920:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = a4 + 1142
	a0 = Mem0[a0 + d0:word32]
	ZN = cond(Mem0[a0:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000015CC
	// succ:  l000015BE l000015CC
l000015BE:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14509
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14496
	call fn000019C8 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l000015CC
l000015CC:
	call fn00001D64 (retsize: 4;)
	Mem0[a5 + -30:word16] = 0x0000
	Z = true
	C = false
	N = false
	V = false
	d6 = 0
	CVZN = cond(d6)
	d5 = 0
	CVZN = cond(d5)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn000077D4 (retsize: 4;)
	a7 = a7 + 0x0004
	d1 = Mem0[a4 + 8916:word32]
	CVZN = cond(d1)
	d1 = d1 << 0x00000002
	CVZNX = cond(d1)
	d2 = Mem0[a4 + 8920:word32]
	CVZN = cond(d2)
	d2 = d2 << 0x00000002
	CVZNX = cond(d2)
	a0 = a4 + 1096
	v87 = Mem0[a0 + d2:word32]
	a7 = a7 - 0x00000004
	v88 = v87
	Mem0[a7:word32] = v88
	CVZN = cond(v88)
	a0 = a4 + 1030
	v89 = Mem0[a0 + d1:word32]
	a7 = a7 - 0x00000004
	v90 = v89
	Mem0[a7:word32] = v90
	CVZN = cond(v90)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1660
	v91 = d0
	Mem0[a7 + 44:word32] = v91
	CVZN = cond(v91)
	call fn00006170 (retsize: 4;)
	a7 = a7 + 12
	v92 = Mem0[a4 + 9964:word16]
	d0 = DPB(d0, v92, 0)
	CVZN = cond(v92)
	branch Test(EQ,Z) l00001624
	// succ:  l00001612 l00001624
l00001612:
	d1 = 0
	CVZN = cond(d1)
	v93 = (word16) d0
	d1 = DPB(d1, v93, 0)
	CVZN = cond(v93)
	a7 = a7 - 0x00000004
	v94 = d1
	Mem0[a7:word32] = v94
	CVZN = cond(v94)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1674
	call fn0000812A (retsize: 4;)
	a7 = a7 + 0x0008
	goto l0000163A
	// succ:  l0000163A
l00001624:
	ZN = cond(Mem0[a4 + 8916:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000163A
	// succ:  l0000162A l0000163A
l0000162A:
	ZN = cond(Mem0[a4 + 8932:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000163A
	// succ:  l00001630 l0000163A
l00001630:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1696
	call fn00006110 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000163A
l0000163A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1710
	call fn00006110 (retsize: 4;)
	a7 = a7 + 0x0004
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = Mem0[a5 + 12:word32]
	a0 = a0 + d0
	a2 = a0
	d7 = Mem0[a5 + -28:word32]
	CVZN = cond(d7)
	goto l0000190E
	// succ:  l0000190E
l00001658:
	a3 = a4 + 10004
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -135
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00001000
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 10004
	v119 = Mem0[a2:word32]
	a7 = a7 - 0x00000004
	v120 = v119
	Mem0[a7:word32] = v120
	CVZN = cond(v120)
	call fn00001B44 (retsize: 4;)
	a7 = a7 + 16
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001904
	// succ:  l00001678 l00001904
l00001678:
	v121 = Mem0[a2:word32]
	a7 = a7 - 0x00000004
	v122 = v121
	Mem0[a7:word32] = v122
	CVZN = cond(v122)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1714
	call fn00006170 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000001
	call fn00008A58 (retsize: 4;)
	a7 = a7 + 12
	goto l00001904
	// succ:  l00001904
l00001692:
	a0 = a5 + -135
	a1 = a4 + 14100
	// succ:  l0000169A
l0000169A:
	v123 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v124 = v123
	Mem0[a1:byte] = v124
	a1 = a1 + 0x00000001
	CVZN = cond(v124)
	branch Test(NE,Z) l0000169A
	// succ:  l0000169E l0000169A
l0000169E:
	a7 = a7 - 0x00000004
	v125 = a3
	Mem0[a7:word32] = v125
	CVZN = cond(v125)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	call fn00007B74 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1730
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	call fn00001EE2 (retsize: 4;)
	v126 = d0
	Mem0[a4 + 8876:word32] = v126
	CVZN = cond(v126)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000002E
	a7 = a7 - 0x00000004
	v127 = a3
	Mem0[a7:word32] = v127
	CVZN = cond(v127)
	call fn00007BCC (retsize: 4;)
	a7 = a7 + 24
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000016F0
	// succ:  l000016CA l000016F0
l000016CA:
	a0 = a4 + 0
	a1 = a0
	// succ:  l000016D0
l000016D0:
	v128 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	ZN = cond(v128 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000016D0
	// succ:  l000016D4 l000016D0
l000016D4:
	a1 = a1 - 0x00000001
	a1 = a1 - a0
	CVZNX = cond(a1)
	a7 = a7 - 0x00000004
	v129 = a1
	Mem0[a7:word32] = v129
	CVZN = cond(v129)
	a7 = a7 - 0x00000004
	v130 = a0
	Mem0[a7:word32] = v130
	CVZN = cond(v130)
	a7 = a7 - 0x00000004
	v131 = d0
	Mem0[a7:word32] = v131
	CVZN = cond(v131)
	call fn00007A88 (retsize: 4;)
	a7 = a7 + 12
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000016F0
	// succ:  l000016EA l000016F0
l000016EA:
	d0 = 1
	CVZN = cond(d0)
	v132 = d0
	Mem0[a4 + 8928:word32] = v132
	CVZN = cond(v132)
	// succ:  l000016F0
l000016F0:
	d0 = 2
	CVZN = cond(d0)
	v133 = d0 - Mem0[a4 + 8916:word32]
	CVZN = cond(v133)
	branch Test(EQ,Z) l000016FE
	// succ:  l000016F8 l000016FE
l000016F8:
	ZN = cond(Mem0[a4 + 8928:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000171A
	// succ:  l000016FE l0000171A
l000016FE:
	a0 = a5 + -135
	a1 = a4 + 14232
	// succ:  l00001706
l00001706:
	v134 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v135 = v134
	Mem0[a1:byte] = v135
	a1 = a1 + 0x00000001
	CVZN = cond(v135)
	branch Test(NE,Z) l00001706
	// succ:  l0000170A l00001706
l0000170A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1734
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	goto l00001752
	// succ:  l00001752
l0000171A:
	a0 = a4 + 14100
	a1 = a4 + 14232
	// succ:  l00001722
l00001722:
	v136 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v137 = v136
	Mem0[a1:byte] = v137
	a1 = a1 + 0x00000001
	CVZN = cond(v137)
	branch Test(NE,Z) l00001722
	// succ:  l00001726 l00001722
l00001726:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000002E
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007BCC (retsize: 4;)
	a7 = a7 + 0x0008
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001744
	// succ:  l00001738 l00001744
l00001738:
	a0 = a4 + 0
	a1 = d0
	// succ:  l0000173E
l0000173E:
	v138 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v139 = v138
	Mem0[a1:byte] = v139
	a1 = a1 + 0x00000001
	CVZN = cond(v139)
	branch Test(NE,Z) l0000173E
	// succ:  l00001742 l0000173E
l00001742:
	goto l00001752
	// succ:  l00001752
l00001744:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00001752
l00001752:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1748
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00001EE2 (retsize: 4;)
	a7 = a7 + 0x0008
	v140 = d0
	Mem0[a4 + 8880:word32] = v140
	CVZN = cond(v140)
	a7 = a7 - 0x00000004
	v141 = a3
	Mem0[a7:word32] = v141
	CVZN = cond(v141)
	d0 = 20
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v142 = d0
	Mem0[a7:word32] = v142
	CVZN = cond(v142)
	a7 = a7 - 0x00000004
	v143 = d0
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1752
	call fn0000812A (retsize: 4;)
	a7 = a7 + 16
	d0 = Mem0[a4 + 8916:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000178A
	// succ:  l00001780 l0000178A
l00001780:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l000017B8
	// succ:  l00001784 l000017B8
l00001784:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l000017B8
	// succ:  l00001788 l000017B8
l00001788:
	goto l000017C0
	// succ:  l000017C0
l0000178A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1760
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14364
	call fn00001EE2 (retsize: 4;)
	v149 = d0
	Mem0[a4 + 8884:word32] = v149
	CVZN = cond(v149)
	call fn00002668 (retsize: 4;)
	d7 = 0
	CVZN = cond(d7)
	v150 = (word16) d0
	d7 = DPB(d7, v150, 0)
	CVZN = cond(v150)
	v151 = Mem0[a4 + 8884:word32]
	Mem0[a7:word32] = v151
	CVZN = cond(v151)
	call fn000089F8 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14364
	call fn00007F80 (retsize: 4;)
	a7 = a7 + 12
	goto l000017C0
	// succ:  l000017C0
l000017B8:
	call fn000047E4 (retsize: 4;)
	d7 = 0
	CVZN = cond(d7)
	v144 = (word16) d0
	d7 = DPB(d7, v144, 0)
	CVZN = cond(v144)
	// succ:  l000017C0
l000017C0:
	v145 = Mem0[a4 + 8876:word32]
	a7 = a7 - 0x00000004
	v146 = v145
	Mem0[a7:word32] = v146
	CVZN = cond(v146)
	call fn000089F8 (retsize: 4;)
	v147 = Mem0[a4 + 8880:word32]
	Mem0[a7:word32] = v147
	CVZN = cond(v147)
	call fn000089F8 (retsize: 4;)
	a7 = a7 + 0x0004
	d0 = 2
	CVZN = cond(d0)
	v148 = d0 - Mem0[a4 + 8916:word32]
	CVZN = cond(v148)
	branch Test(NE,Z) l000017E4
	// succ:  l000017DA l000017E4
l000017DA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007F80 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000017E4
l000017E4:
	d0 = 1
	CVZN = cond(d0)
	v152 = d7 - d0
	CVZN = cond(v152)
	branch Test(GT,VZN) l0000184C
	// succ:  l000017EA l0000184C
l000017EA:
	d1 = Mem0[a4 + 8916:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l000017F4
	// succ:  l000017F0 l000017F4
l000017F0:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	branch Test(NE,Z) l00001866
	// succ:  l000017F4 l00001866
l000017F4:
	ZN = cond(Mem0[a4 + 8928:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001866
	// succ:  l000017FA l00001866
l000017FA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000000D
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	call fn000093B4 (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001816
	// succ:  l0000180C l00001816
l0000180C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000009
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001816
l00001816:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	call fn00007F80 (retsize: 4;)
	a7 = a7 + 0x0004
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l0000182E
	// succ:  l00001824 l0000182E
l00001824:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000009
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000182E
l0000182E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007F3C (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001866
	// succ:  l00001840 l00001866
l00001840:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000009
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00001866
	// succ:  l00001866
l0000184C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14100
	call fn000022E6 (retsize: 4;)
	v171 = d0
	Mem0[a4 + 8892:word32] = v171
	CVZN = cond(v171)
	v172 = d0
	Mem0[a4 + 8888:word32] = v172
	CVZN = cond(v172)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00007F80 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00001866
l00001866:
	d0 = Mem0[a4 + 8888:word32]
	CVZN = cond(d0)
	d1 = Mem0[a4 + 8892:word32]
	CVZN = cond(d1)
	v153 = d1 - d0
	CVZN = cond(v153)
	branch Test(ULE,VZ) l00001876
	// succ:  l00001872 l00001876
l00001872:
	v154 = d0
	Mem0[a4 + 8892:word32] = v154
	CVZN = cond(v154)
	// succ:  l00001876
l00001876:
	d5 = d5 + d0
	CVZNX = cond(d5)
	d1 = Mem0[a4 + 8892:word32]
	CVZN = cond(d1)
	d6 = d6 + d1
	CVZNX = cond(d6)
	v155 = Mem0[a5 + -30:word16] + 0x0001
	Mem0[a5 + -30:word16] = v155
	CVZNX = cond(v155)
	a7 = a7 - 0x00000004
	v156 = d1
	Mem0[a7:word32] = v156
	CVZN = cond(v156)
	a7 = a7 - 0x00000004
	v157 = d0
	Mem0[a7:word32] = v157
	CVZN = cond(v157)
	call fn00001AC0 (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = 0
	CVZN = cond(d1)
	v158 = (word16) d0
	d1 = DPB(d1, v158, 0)
	CVZN = cond(v158)
	d0 = d1
	CVZN = cond(d0)
	v159 = d1
	Mem0[a7 + 28:word32] = v159
	CVZN = cond(v159)
	d1 = 100
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	d1 = Mem0[a7 + 28:word32]
	CVZN = cond(d1)
	v160 = d0
	Mem0[a7 + 36:word32] = v160
	CVZN = cond(v160)
	d0 = d1
	CVZN = cond(d0)
	d1 = 100
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	a7 = a7 - 0x00000004
	v161 = d1
	Mem0[a7:word32] = v161
	CVZN = cond(v161)
	v162 = Mem0[a7 + 40:word32]
	a7 = a7 - 0x00000004
	v163 = v162
	Mem0[a7:word32] = v163
	CVZN = cond(v163)
	v164 = Mem0[a4 + 8892:word32]
	a7 = a7 - 0x00000004
	v165 = v164
	Mem0[a7:word32] = v165
	CVZN = cond(v165)
	v166 = Mem0[a4 + 8888:word32]
	a7 = a7 - 0x00000004
	v167 = v166
	Mem0[a7:word32] = v167
	CVZN = cond(v167)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1764
	call fn0000812A (retsize: 4;)
	a7 = a7 + 20
	d0 = 2
	CVZN = cond(d0)
	v168 = d0 - Mem0[a4 + 8916:word32]
	CVZN = cond(v168)
	branch Test(EQ,Z) l000018D2
	// succ:  l000018CE l000018D2
l000018CE:
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000018EA
	// succ:  l000018D2 l000018EA
l000018D2:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = a4 + 1536
	v169 = Mem0[a0 + d0:word32]
	a7 = a7 - 0x00000004
	v170 = v169
	Mem0[a7:word32] = v170
	CVZN = cond(v170)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1792
	call fn00006170 (retsize: 4;)
	a7 = a7 + 0x0008
	goto l000018F4
	// succ:  l000018F4
l000018EA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1800
	call fn00006110 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000018F4
l000018F4:
	a0 = a3
	// succ:  l000018F6
l000018F6:
	v173 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v173 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000018F6
	// succ:  l000018FA l000018F6
l000018FA:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a3 = a3 + d0
	// succ:  l00001904
l00001904:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001692
	// succ:  l0000190A l00001692
l0000190A:
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	a2 = a2 + 0x00000004
	// succ:  l0000190E
l0000190E:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001658
	// succ:  l00001914 l00001658
l00001914:
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn000077D4 (retsize: 4;)
	d0 = d0 - Mem0[a7 + 36:word32]
	CVZNX = cond(d0)
	v95 = d6
	Mem0[a7:word32] = v95
	CVZN = cond(v95)
	a7 = a7 - 0x00000004
	v96 = d5
	Mem0[a7:word32] = v96
	CVZN = cond(v96)
	v97 = d0
	Mem0[a7 + 36:word32] = v97
	CVZN = cond(v97)
	call fn00001AC0 (retsize: 4;)
	d1 = 0
	CVZN = cond(d1)
	v98 = Mem0[a5 + -30:word16]
	d1 = DPB(d1, v98, 0)
	CVZN = cond(v98)
	d2 = 0
	CVZN = cond(d2)
	v99 = (word16) d0
	d2 = DPB(d2, v99, 0)
	CVZN = cond(v99)
	d0 = d2
	CVZN = cond(d0)
	v100 = d1
	Mem0[a7 + 42:word32] = v100
	CVZN = cond(v100)
	d1 = 100
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v101 = d0
	Mem0[a7 + 50:word32] = v101
	CVZN = cond(v101)
	d0 = d2
	CVZN = cond(d0)
	d1 = 100
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	d0 = Mem0[a7 + 36:word32]
	CVZN = cond(d0)
	v102 = d1
	Mem0[a7 + 46:word32] = v102
	CVZN = cond(v102)
	d1 = 0x00015180
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0x00000E10
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v103 = d0
	Mem0[a7 + 54:word32] = v103
	CVZN = cond(v103)
	d0 = Mem0[a7 + 36:word32]
	CVZN = cond(d0)
	d1 = 0x00000E10
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v104 = d0
	Mem0[a7 + 58:word32] = v104
	CVZN = cond(v104)
	d0 = Mem0[a7 + 36:word32]
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v105 = d1
	Mem0[a7:word32] = v105
	CVZN = cond(v105)
	v106 = Mem0[a7 + 58:word32]
	a7 = a7 - 0x00000004
	v107 = v106
	Mem0[a7:word32] = v107
	CVZN = cond(v107)
	v108 = Mem0[a7 + 58:word32]
	a7 = a7 - 0x00000004
	v109 = v108
	Mem0[a7:word32] = v109
	CVZN = cond(v109)
	v110 = Mem0[a7 + 54:word32]
	a7 = a7 - 0x00000004
	v111 = v110
	Mem0[a7:word32] = v111
	CVZN = cond(v111)
	v112 = Mem0[a7 + 62:word32]
	a7 = a7 - 0x00000004
	v113 = v112
	Mem0[a7:word32] = v113
	CVZN = cond(v113)
	a7 = a7 - 0x00000004
	v114 = d6
	Mem0[a7:word32] = v114
	CVZN = cond(v114)
	a7 = a7 - 0x00000004
	v115 = d5
	Mem0[a7:word32] = v115
	CVZN = cond(v115)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1864
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000009
	v116 = Mem0[a7 + 74:word32]
	a7 = a7 - 0x00000004
	v117 = v116
	Mem0[a7:word32] = v117
	CVZN = cond(v117)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1802
	call fn0000812A (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	v118 = a5 + -192
	d2 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	d4 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	d5 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	d6 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	d7 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	a2 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	a3 = Mem0[v118:word32]
	v118 = v118 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000011F8_exit
fn000011F8_exit:


// fn000019C8
// Return size: 4
void fn000019C8()
fn000019C8_entry:
	// succ:  l000019C8
l000019C8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l000019D0_thunk_fn000076EC
	goto l000019D4
	// succ:  l000019D4 l000019D0_thunk_fn000076EC
l000019D0_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn000019C8_exit
l000019D4:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	v13 = Mem0[a4 + 2043:byte]
	d0 = DPB(d0, v13, 0)
	CVZN = cond(v13)
	d1 = 0
	CVZN = cond(d1)
	v15 = (byte) d0
	d1 = DPB(d1, v15, 0)
	CVZN = cond(v15)
	v16 = Mem0[a4 + 2042:byte]
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d2 = 0
	CVZN = cond(d2)
	v18 = (word16) d0
	d2 = DPB(d2, v18, 0)
	CVZN = cond(v18)
	d2 = d2 << 0x00000008
	CVZNX = cond(d2)
	d2 = d2 + d1
	CVZNX = cond(d2)
	v20 = Mem0[a4 + 2041:byte]
	d0 = DPB(d0, v20, 0)
	CVZN = cond(v20)
	d1 = 0
	CVZN = cond(d1)
	v21 = (byte) d0
	d1 = DPB(d1, v21, 0)
	CVZN = cond(v21)
	v22 = Mem0[a4 + 2040:byte]
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d3 = 0
	CVZN = cond(d3)
	v23 = (word16) d0
	d3 = DPB(d3, v23, 0)
	CVZN = cond(v23)
	d3 = d3 << 0x00000008
	CVZNX = cond(d3)
	d3 = d3 + d1
	CVZNX = cond(d3)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = d3 + d2
	CVZNX = cond(d3)
	d0 = 32
	CVZN = cond(d0)
	d3 = d3 + d0
	CVZNX = cond(d3)
	a7 = a7 - 0x00000004
	v28 = d3
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00001E98 (retsize: 4;)
	a2 = d0
	a3 = a2
	v29 = a2
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 2036
	call fn00005C1C (retsize: 4;)
	a7 = a7 + 0x0008
	goto l00001A6A
	// succ:  l00001A6A
l00001A28:
	a0 = a3
	// succ:  l00001A2A
l00001A2A:
	v46 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v46 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A2A
	// succ:  l00001A2E l00001A2A
l00001A2E:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	v47 = Mem0[a3 + 1 + d0:byte]
	d0 = DPB(d0, v47, 0)
	CVZN = cond(v47)
	a0 = a3
	// succ:  l00001A3A
l00001A3A:
	v48 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v48 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A3A
	// succ:  l00001A3E l00001A3A
l00001A3E:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d1 = a0
	CVZN = cond(d1)
	v49 = Mem0[a3 + 2 + d1:byte]
	d1 = DPB(d1, v49, 0)
	CVZN = cond(v49)
	a0 = a3
	// succ:  l00001A4A
l00001A4A:
	v50 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v50 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A4A
	// succ:  l00001A4E l00001A4A
l00001A4E:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d2 = 0
	CVZN = cond(d2)
	v51 = (byte) d1
	d2 = DPB(d2, v51, 0)
	CVZN = cond(v51)
	v52 = (byte) d0
	d1 = DPB(d1, v52, 0)
	CVZN = cond(v52)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	v53 = (word16) d1
	d0 = DPB(d0, v53, 0)
	CVZN = cond(v53)
	d0 = d0 << 0x00000008
	CVZNX = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	a3 = a3 + d0
	// succ:  l00001A6A
l00001A6A:
	a0 = Mem0[a5 + 8:word32]
	a1 = a3
	// succ:  l00001A70
l00001A70:
	v32 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	v33 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	v34 = (byte) d0 - v33
	CVZN = cond(v34)
	branch Test(NE,Z) l00001A28
	// succ:  l00001A76 l00001A28
l00001A76:
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A70
	// succ:  l00001A7A l00001A70
l00001A7A:
	branch Test(NE,Z) l00001A28
	// succ:  l00001A7C l00001A28
l00001A7C:
	a0 = a3
	// succ:  l00001A7E
l00001A7E:
	v35 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v35 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A7E
	// succ:  l00001A82 l00001A7E
l00001A82:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a0 = a3
	a0 = a0 + d0
	v36 = Mem0[a0 + 1:byte]
	d0 = DPB(d0, v36, 0)
	CVZN = cond(v36)
	d1 = 0
	CVZN = cond(d1)
	v37 = (byte) d0
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	v38 = Mem0[a0:byte]
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d2 = 0
	CVZN = cond(d2)
	v39 = (word16) d0
	d2 = DPB(d2, v39, 0)
	CVZN = cond(v39)
	d2 = d2 << 0x00000008
	CVZNX = cond(d2)
	d2 = d2 + d1
	CVZNX = cond(d2)
	d2 = d2 + 0x00000002
	CVZNX = cond(d2)
	a7 = a7 - 0x00000004
	v40 = d2
	Mem0[a7:word32] = v40
	CVZN = cond(v40)
	v41 = Mem0[a5 + 12:word32]
	a7 = a7 - 0x00000004
	v42 = v41
	Mem0[a7:word32] = v42
	CVZN = cond(v42)
	a7 = a7 - 0x00000004
	v43 = a0
	Mem0[a7:word32] = v43
	CVZN = cond(v43)
	call fn000082E4 (retsize: 4;)
	v44 = a2
	Mem0[a7:word32] = v44
	CVZN = cond(v44)
	call fn00001EC8 (retsize: 4;)
	v45 = a5 + -24
	d2 = Mem0[v45:word32]
	v45 = v45 + 0x00000004
	d3 = Mem0[v45:word32]
	v45 = v45 + 0x00000004
	a2 = Mem0[v45:word32]
	v45 = v45 + 0x00000004
	a3 = Mem0[v45:word32]
	v45 = v45 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000019C8_exit
fn000019C8_exit:


// fn00001AC0
// Return size: 4
void fn00001AC0()
fn00001AC0_entry:
	// succ:  l00001AC0
l00001AC0:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001AC4_thunk_fn000076EC
	goto l00001AC8
	// succ:  l00001AC8 l00001AC4_thunk_fn000076EC
l00001AC4_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001AC0_exit
l00001AC8:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	d7 = Mem0[a7 + 12:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 16:word32]
	CVZN = cond(d6)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001ADC
	// succ:  l00001AD8 l00001ADC
l00001AD8:
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001AE0
	// succ:  l00001ADC l00001AE0
l00001ADC:
	d0 = 0
	CVZN = cond(d0)
	goto l00001AF4
	// succ:  l00001AF4
l00001AE0:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 - d6
	CVZNX = cond(d0)
	d1 = 0x00002710
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	d1 = d7
	CVZN = cond(d1)
	call fn000091A6 (retsize: 4;)
	// succ:  l00001AF4
l00001AF4:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001AC0_exit
fn00001AC0_exit:


// fn00001AFA
// Return size: 4
void fn00001AFA()
fn00001AFA_entry:
	// succ:  l00001AFA
l00001AFA:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000004
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l00001B02_thunk_fn000076EC
	goto l00001B06
	// succ:  l00001B06 l00001B02_thunk_fn000076EC
l00001B02_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001AFA_exit
l00001B06:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a7 + 24:word32]
	v11 = Mem0[a7 + 31:byte]
	d7 = DPB(d7, v11, 0)
	CVZN = cond(v11)
	d0 = d7
	CVZN = cond(d0)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v14 = d0
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	a2 = a3
	v15 = (byte) d0
	Mem0[a7 + 12:byte] = v15
	CVZN = cond(v15)
	goto l00001B2A
	// succ:  l00001B2A
l00001B28:
	a2 = a2 + 0x00000001
	// succ:  l00001B2A
l00001B2A:
	v16 = Mem0[a2:byte]
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	branch Test(EQ,Z) l00001B36
	// succ:  l00001B2E l00001B36
l00001B2E:
	v19 = Mem0[a7 + 12:byte]
	d1 = DPB(d1, v19, 0)
	CVZN = cond(v19)
	v20 = (byte) d0 - (byte) d1
	CVZN = cond(v20)
	branch Test(NE,Z) l00001B28
	// succ:  l00001B36 l00001B28
l00001B36:
	d0 = a2
	CVZN = cond(d0)
	d1 = a3
	CVZN = cond(d1)
	d0 = d0 - d1
	CVZNX = cond(d0)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001AFA_exit
fn00001AFA_exit:


// fn00001B44
// Return size: 4
void fn00001B44()
fn00001B44_entry:
	// succ:  l00001B44
l00001B44:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000028
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l00001B4C_thunk_fn000076EC
	goto l00001B50
	// succ:  l00001B50 l00001B4C_thunk_fn000076EC
l00001B4C_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001B44_exit
l00001B50:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	d7 = Mem0[a5 + 16:word32]
	CVZN = cond(d7)
	a0 = 0x00009D54
	a1 = a5 + -39
	v15 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v16 = v15
	Mem0[a1:byte] = v16
	a1 = a1 + 0x00000001
	CVZN = cond(v16)
	v17 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v18 = v17
	Mem0[a1:byte] = v18
	a1 = a1 + 0x00000001
	CVZN = cond(v18)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -39
	v19 = Mem0[a5 + 20:word32]
	a7 = a7 - 0x00000004
	v20 = v19
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = a3
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	call fn00001BC2 (retsize: 4;)
	a7 = a7 + 12
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001BBA
	// succ:  l00001B84 l00001BBA
l00001B84:
	d6 = 0
	CVZN = cond(d6)
	// succ:  l00001B86
l00001B86:
	a0 = a5 + -39
	a1 = a0
	// succ:  l00001B8C
l00001B8C:
	v26 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	ZN = cond(v26 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001B8C
	// succ:  l00001B90 l00001B8C
l00001B90:
	a1 = a1 - 0x00000001
	a1 = a1 - a0
	CVZNX = cond(a1)
	d0 = a1
	CVZN = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	d7 = d7 - d5
	CVZNX = cond(d7)
	branch Test(LT,CZ) l00001BB6
	// succ:  l00001B9E l00001BB6
l00001B9E:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	a1 = a2
	// succ:  l00001BA2
l00001BA2:
	v29 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v30 = v29
	Mem0[a1:byte] = v30
	a1 = a1 + 0x00000001
	CVZN = cond(v30)
	branch Test(NE,Z) l00001BA2
	// succ:  l00001BA6 l00001BA2
l00001BA6:
	a2 = a2 + d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -39
	call fn00001C2A (retsize: 4;)
	a7 = a7 + 0x0004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001B86
	// succ:  l00001BB6 l00001B86
l00001BB6:
	Mem0[a2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00001BBA
l00001BBA:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001B44_exit
fn00001B44_exit:


// fn00001BC2
// Return size: 4
void fn00001BC2()
fn00001BC2_entry:
	// succ:  l00001BC2
l00001BC2:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 + 0x00000000
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l00001BCA_thunk_fn000076EC
	goto l00001BCE
	// succ:  l00001BCE l00001BCA_thunk_fn000076EC
l00001BCA_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001BC2_exit
l00001BCE:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	a7 = a7 - 0x00000004
	v10 = a3
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	a7 = a7 - 0x00000004
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00007D30 (retsize: 4;)
	a7 = a7 + 0x0008
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001BFC
	// succ:  l00001BE8 l00001BFC
l00001BE8:
	d1 = 58
	CVZN = cond(d1)
	v17 = (byte) d1 - Mem0[(a2 + -1) + d0:byte]
	CVZN = cond(v17)
	branch Test(EQ,Z) l00001BFC
	// succ:  l00001BF0 l00001BFC
l00001BF0:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1866
	a7 = a7 - 0x00000004
	v18 = a2
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00001BFC
l00001BFC:
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	v20 = a3
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 15392
	call fn00008C08 (retsize: 4;)
	a7 = a7 + 12
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C14
	// succ:  l00001C10 l00001C14
l00001C10:
	d0 = 0
	CVZN = cond(d0)
	goto l00001C22
	// succ:  l00001C22
l00001C14:
	a0 = a4 + 15400
	a1 = Mem0[a5 + 16:word32]
	// succ:  l00001C1C
l00001C1C:
	v23 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v24 = v23
	Mem0[a1:byte] = v24
	a1 = a1 + 0x00000001
	CVZN = cond(v24)
	branch Test(NE,Z) l00001C1C
	// succ:  l00001C20 l00001C1C
l00001C20:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l00001C22
l00001C22:
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001BC2_exit
fn00001BC2_exit:


// fn00001C2A
// Return size: 4
void fn00001C2A()
fn00001C2A_entry:
	// succ:  l00001C2A
l00001C2A:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001C2E_thunk_fn000076EC
	goto l00001C32
	// succ:  l00001C32 l00001C2E_thunk_fn000076EC
l00001C2E_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001C2A_exit
l00001C32:
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a3 = Mem0[a7 + 8:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 15392
	call fn00008DE8 (retsize: 4;)
	a7 = a7 + 0x0004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C4A
	// succ:  l00001C46 l00001C4A
l00001C46:
	d0 = 0
	CVZN = cond(d0)
	goto l00001C56
	// succ:  l00001C56
l00001C4A:
	a0 = a4 + 15400
	a1 = a3
	// succ:  l00001C50
l00001C50:
	v15 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v16 = v15
	Mem0[a1:byte] = v16
	a1 = a1 + 0x00000001
	CVZN = cond(v16)
	branch Test(NE,Z) l00001C50
	// succ:  l00001C54 l00001C50
l00001C54:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l00001C56
l00001C56:
	v17 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v17
	return
	// succ:  fn00001C2A_exit
fn00001C2A_exit:


// fn00001D64
// Return size: 4
void fn00001D64()
fn00001D64_entry:
	// succ:  l00001D64
l00001D64:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001D68_thunk_fn000076EC
	goto l00001D6C
	// succ:  l00001D6C l00001D68_thunk_fn000076EC
l00001D68_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001D64_exit
l00001D6C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	d6 = 0
	CVZN = cond(d6)
	goto l00001DAA
	// succ:  l00001DAA
l00001D74:
	d4 = d6
	CVZN = cond(d4)
	d5 = 8
	CVZN = cond(d5)
	goto l00001D96
	// succ:  l00001D96
l00001D7A:
	d0 = 0
	CVZN = cond(d0)
	v21 = (word16) d4
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d0 = d0 >> 0x00000001
	CVZNX = cond(d0)
	d7 = d0
	CVZN = cond(d7)
	Z = __btst((byte) d4, 0x0000)
	branch Test(EQ,Z) l00001D90
	// succ:  l00001D88 l00001D90
l00001D88:
	d0 = d7
	CVZN = cond(d0)
	v22 = (word16) d0 ^ 0xA001
	d0 = DPB(d0, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	goto l00001D92
	// succ:  l00001D92
l00001D90:
	d0 = d7
	CVZN = cond(d0)
	// succ:  l00001D92
l00001D92:
	d4 = d0
	CVZN = cond(d4)
	v23 = (word16) d5 - 0x0001
	d5 = DPB(d5, v23, 0)
	CVZNX = cond(v23)
	// succ:  l00001D96
l00001D96:
	ZN = cond((word16) d5 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00001D7A
	// succ:  l00001D9A l00001D7A
l00001D9A:
	d0 = 0
	CVZN = cond(d0)
	v16 = (word16) d6
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	d0 = d0 + d0
	CVZNX = cond(d0)
	a0 = a4 + 8940
	v19 = (word16) d4
	Mem0[a4 + d0:word16] = v19
	CVZN = cond(v19)
	v20 = (word16) d6 + 0x0001
	d6 = DPB(d6, v20, 0)
	CVZNX = cond(v20)
	// succ:  l00001DAA
l00001DAA:
	v11 = (word16) d6 - 0x0100
	CVZN = cond(v11)
	branch Test(ULT,C) l00001D74
	// succ:  l00001DB0 l00001D74
l00001DB0:
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D64_exit
fn00001D64_exit:


// fn00001E98
// Return size: 4
void fn00001E98()
fn00001E98_entry:
	// succ:  l00001E98
l00001E98:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001E9C_thunk_fn000076EC
	goto l00001EA0
	// succ:  l00001EA0 l00001E9C_thunk_fn000076EC
l00001E9C_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001E98_exit
l00001EA0:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a7 + 12:word32]
	CVZN = cond(d7)
	a7 = a7 - 0x00000004
	v9 = d7
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn0000833C (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001EC0
	// succ:  l00001EB6 l00001EC0
l00001EB6:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000005
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001EC0
l00001EC0:
	d0 = a3
	CVZN = cond(d0)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E98_exit
fn00001E98_exit:


// fn00001EC8
// Return size: 4
void fn00001EC8()
fn00001EC8_entry:
	// succ:  l00001EC8
l00001EC8:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001ECC_thunk_fn000076EC
	goto l00001ED0
	// succ:  l00001ED0 l00001ECC_thunk_fn000076EC
l00001ECC_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001EC8_exit
l00001ED0:
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a3 = Mem0[a7 + 8:word32]
	a7 = a7 - 0x00000004
	v9 = a3
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000087A0 (retsize: 4;)
	a7 = a7 + 0x0004
	v10 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v10
	return
	// succ:  fn00001EC8_exit
fn00001EC8_exit:


// fn00001EE2
// Return size: 4
void fn00001EE2()
fn00001EE2_entry:
	// succ:  l00001EE2
l00001EE2:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00001EE6_thunk_fn000076EC
	goto l00001EEA
	// succ:  l00001EEA l00001EE6_thunk_fn000076EC
l00001EE6_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00001EE2_exit
l00001EEA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = Mem0[a7 + 12:word32]
	a2 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v9 = a2
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	a7 = a7 - 0x00000004
	v10 = a3
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn00008830 (retsize: 4;)
	a7 = a7 + 0x0008
	a3 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001F10
	// succ:  l00001F06 l00001F10
l00001F06:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000006
	call fn00002322 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00001F10
l00001F10:
	d0 = a3
	CVZN = cond(d0)
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001EE2_exit
fn00001EE2_exit:


// fn0000229C
// Return size: 4
void fn0000229C()
fn0000229C_entry:
	// succ:  l0000229C
l0000229C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l000022A4_thunk_fn000076EC
	goto l000022A8
	// succ:  l000022A8 l000022A4_thunk_fn000076EC
l000022A4_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn0000229C_exit
l000022A8:
	a7 = a7 - 0x00000004
	v9 = a3
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	a3 = Mem0[a7 + 20:word32]
	a7 = a7 - 0x00000004
	v10 = a3
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn000086A4 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000002
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	v14 = a3
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	v16 = d0
	Mem0[a7 + 20:word32] = v16
	CVZN = cond(v16)
	call fn0000871C (retsize: 4;)
	v17 = a3
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn000086A4 (retsize: 4;)
	Mem0[a7:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v19 = Mem0[a7 + 20:word32]
	a7 = a7 - 0x00000004
	v20 = v19
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = a3
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	v22 = d0
	Mem0[a7 + 32:word32] = v22
	CVZN = cond(v22)
	call fn0000871C (retsize: 4;)
	d0 = Mem0[a7 + 32:word32]
	CVZN = cond(d0)
	a3 = Mem0[a5 + -12:word32]
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000229C_exit
fn0000229C_exit:


// fn000022E6
// Return size: 4
void fn000022E6()
fn000022E6_entry:
	// succ:  l000022E6
l000022E6:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	v5 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v5)
	branch Test(ULT,C) l000022EE_thunk_fn000076EC
	goto l000022F2
	// succ:  l000022F2 l000022EE_thunk_fn000076EC
l000022EE_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn000022E6_exit
l000022F2:
	a7 = a7 - 0x00000004
	v9 = a3
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	a3 = Mem0[a7 + 20:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1876
	a7 = a7 - 0x00000004
	v10 = a3
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn00001EE2 (retsize: 4;)
	v12 = d0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	v13 = d0
	Mem0[a7 + 12:word32] = v13
	CVZN = cond(v13)
	call fn0000229C (retsize: 4;)
	v14 = Mem0[a7 + 12:word32]
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	v15 = d0
	Mem0[a7 + 16:word32] = v15
	CVZN = cond(v15)
	call fn000089F8 (retsize: 4;)
	d0 = Mem0[a7 + 16:word32]
	CVZN = cond(d0)
	a3 = Mem0[a5 + -12:word32]
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000022E6_exit
fn000022E6_exit:


// fn00002322
// Return size: 4
void fn00002322()
fn00002322_entry:
	// succ:  l00002322
l00002322:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00002326_thunk_fn000076EC
	goto l0000232A
	// succ:  l0000232A l00002326_thunk_fn000076EC
l00002326_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00002322_exit
l0000232A:
	a7 = a7 - 0x00000004
	v8 = d7
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	v9 = Mem0[a7 + 10:word16]
	d7 = DPB(d7, v9, 0)
	CVZN = cond(v9)
	v10 = Mem0[a4 + 8884:word32]
	a7 = a7 - 0x00000004
	v11 = v10
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn000089F8 (retsize: 4;)
	v12 = Mem0[a4 + 8880:word32]
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	call fn000089F8 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14364
	call fn00006F88 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 14232
	call fn00006F88 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	v14 = (word16) d7
	d0 = DPB(d0, v14, 0)
	CVZN = cond(v14)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = a4 + 1310
	v17 = Mem0[a0 + d0:word32]
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1880
	call fn00006170 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000001
	call fn00008A58 (retsize: 4;)
	a7 = a7 + 20
	v18 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = v18
	CVZN = cond(d7)
	return
	// succ:  fn00002322_exit
fn00002322_exit:


// fn00002376
// Return size: 4
void fn00002376()
fn00002376_entry:
	// succ:  l00002376
l00002376:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l0000237A_thunk_fn000076EC
	goto l0000237E
	// succ:  l0000237E l0000237A_thunk_fn000076EC
l0000237A_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00002376_exit
l0000237E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 213
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 1886
	call fn00006170 (retsize: 4;)
	Mem0[a7:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn00008A58 (retsize: 4;)
	a7 = a7 + 0x0008
	return
	// succ:  fn00002376_exit
fn00002376_exit:


// fn00002394
// Return size: 4
void fn00002394()
fn00002394_entry:
	// succ:  l00002394
l00002394:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l00002398_thunk_fn000076EC
	goto l0000239C
	// succ:  l0000239C l00002398_thunk_fn000076EC
l00002398_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00002394_exit
l0000239C:
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a3 = Mem0[a7 + 8:word32]
	goto l000023B4
	// succ:  l000023B4
l000023A4:
	v14 = Mem0[a3:byte]
	d0 = DPB(d0, v14, 0)
	CVZN = cond(v14)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v15 = d0
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	v16 = (byte) d0
	Mem0[a3:byte] = v16
	a3 = a3 + 0x00000001
	CVZN = cond(v16)
	// succ:  l000023B4
l000023B4:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000023A4
	// succ:  l000023B8 l000023A4
l000023B8:
	v12 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v12
	return
	// succ:  fn00002394_exit
fn00002394_exit:


// fn00002668
// Return size: 4
void fn00002668()
fn00002668_entry:
	// succ:  l00002668
l00002668:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l0000266C_thunk_fn000076EC
	goto l00002670
	// succ:  l00002670 l0000266C_thunk_fn000076EC
l0000266C_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn00002668_exit
l00002670:
	a7 = a7 - 0x00000004
	v8 = d7
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	v9 = Mem0[a4 + 8876:word32]
	a7 = a7 - 0x00000004
	v10 = v9
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn0000229C (retsize: 4;)
	a7 = a7 + 0x0004
	v12 = d0
	Mem0[a4 + 8888:word32] = v12
	CVZN = cond(v12)
	d1 = 18
	CVZN = cond(d1)
	v14 = d0 - d1
	CVZN = cond(v14)
	branch Test(UGT,CZ) l0000268C
	// succ:  l00002686 l0000268C
l00002686:
	d0 = 2
	CVZN = cond(d0)
	goto l0000275C
	// succ:  l0000275C
l0000268C:
	d0 = 0
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	a7 = a7 - 0x00000004
	v17 = d0
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	v18 = Mem0[a4 + 8876:word32]
	a7 = a7 - 0x00000004
	v19 = v18
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	call fn0000871C (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	v20 = d0
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = d0
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a4 + 8880:word32]
	a7 = a7 - 0x00000004
	v23 = v22
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	call fn0000871C (retsize: 4;)
	a7 = a7 + 20
	d0 = Mem0[a4 + 8920:word32]
	CVZN = cond(d0)
	v24 = d0 - 0x00000006
	CVZN = cond(v24)
	branch Test(UGE,C) l00002738
	// succ:  l000026BA l00002738
l000026BA:
	v25 = (word16) d0 + (word16) d0
	d0 = DPB(d0, v25, 0)
	CVZNX = cond(v25)
	v27 = Mem0[0x000026C4 + (int32) ((int16) d0):word16]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	call 0x000026C6 + (int32) ((int16) d0) (retsize: 4;)
	return
	// succ:  fn00002668_exit
l00002738:
	d0 = 1
	CVZN = cond(d0)
	v29 = (word16) d7 - (word16) d0
	CVZN = cond(v29)
	branch Test(ULE,VZ) l00002742
	// succ:  l0000273E l00002742
l0000273E:
	d0 = d7
	CVZN = cond(d0)
	goto l0000275C
	// succ:  l0000275C
l00002742:
	v31 = Mem0[a4 + 8880:word32]
	a7 = a7 - 0x00000004
	v32 = v31
	Mem0[a7:word32] = v32
	CVZN = cond(v32)
	call fn0000229C (retsize: 4;)
	a7 = a7 + 0x0004
	v33 = d0
	Mem0[a4 + 8892:word32] = v33
	CVZN = cond(v33)
	v34 = d0 - Mem0[a4 + 8888:word32]
	CVZN = cond(v34)
	branch Test(ULT,C) l0000275A
	// succ:  l00002756 l0000275A
l00002756:
	d0 = 2
	CVZN = cond(d0)
	goto l0000275C
	// succ:  l0000275C
l0000275A:
	d0 = d7
	CVZN = cond(d0)
	// succ:  l0000275C
l0000275C:
	v28 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = v28
	CVZN = cond(d7)
	return
	// succ:  fn00002668_exit
fn00002668_exit:


// fn000047E4
// Return size: 4
void fn000047E4()
fn000047E4_entry:
	// succ:  l000047E4
l000047E4:
	a7 = fp
	v4 = a7 - Mem0[a4 + 8220:word32]
	CVZN = cond(v4)
	branch Test(ULT,C) l000047E8_thunk_fn000076EC
	goto l000047EC
	// succ:  l000047EC l000047E8_thunk_fn000076EC
l000047E8_thunk_fn000076EC:
	call fn000076EC (retsize: 4;)
	return
	// succ:  fn000047E4_exit
l000047EC:
	a7 = a7 - 0x00000004
	v8 = d7
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	v9 = Mem0[a4 + 8876:word32]
	a7 = a7 - 0x00000004
	v10 = v9
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn0000229C (retsize: 4;)
	a7 = a7 + 0x0004
	v12 = d0
	Mem0[a4 + 8888:word32] = v12
	CVZN = cond(v12)
	v13 = d0
	Mem0[a4 + 8892:word32] = v13
	CVZN = cond(v13)
	d1 = 18
	CVZN = cond(d1)
	v15 = d0 - d1
	CVZN = cond(v15)
	branch Test(UGE,C) l0000480C
	// succ:  l00004806 l0000480C
l00004806:
	d0 = 6
	CVZN = cond(d0)
	goto l00004898
	// succ:  l00004898
l0000480C:
	d0 = Mem0[a4 + 8920:word32]
	CVZN = cond(d0)
	v16 = d0 - 0x00000006
	CVZN = cond(v16)
	branch Test(UGE,C) l00004874
	// succ:  l00004818 l00004874
l00004818:
	v17 = (word16) d0 + (word16) d0
	d0 = DPB(d0, v17, 0)
	CVZNX = cond(v17)
	v19 = Mem0[0x00004822 + (int32) ((int16) d0):word16]
	d0 = DPB(d0, v19, 0)
	CVZN = cond(v19)
	call 0x00004824 + (int32) ((int16) d0) (retsize: 4;)
	return
	// succ:  fn000047E4_exit
l00004874:
	ZN = cond((word16) d7 - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l0000487C
	// succ:  l00004878 l0000487C
l00004878:
	d0 = d7
	CVZN = cond(d0)
	goto l00004898
	// succ:  l00004898
l0000487C:
	v24 = Mem0[a4 + 8876:word32]
	a7 = a7 - 0x00000004
	v25 = v24
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn0000229C (retsize: 4;)
	v26 = d0
	Mem0[a4 + 8892:word32] = v26
	CVZN = cond(v26)
	v27 = Mem0[a4 + 8880:word32]
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn0000229C (retsize: 4;)
	a7 = a7 + 0x0004
	v28 = d0
	Mem0[a4 + 8888:word32] = v28
	CVZN = cond(v28)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00004898
l00004898:
	v20 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = v20
	CVZN = cond(d7)
	return
	// succ:  fn000047E4_exit
fn000047E4_exit:


// fn00005C1C
// Return size: 4
void fn00005C1C()
fn00005C1C_entry:
	// succ:  l00005C1C
l00005C1C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	a0 = Mem0[a7 + 28:word32]
	a1 = Mem0[a7 + 32:word32]
	a0 = a0 + 18
	d2 = -128
	CVZN = cond(d2)
	v10 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v10, 0)
	CVZNX = cond(v10)
	v12 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v12, 0)
	CVZN = cond(v12)
	v14 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v14, 0)
	CVZNX = cond(v14)
	v15 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v15, 0)
	CVZNX = cond(v15)
	goto l00005CF2
	// succ:  l00005CF2
l00005C3A:
	v86 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v86, 0)
	CVZN = cond(v86)
	v87 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v87, 0)
	CVZNX = cond(v87)
	goto l00005C70
	// succ:  l00005C70
l00005C40:
	v51 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v51, 0)
	CVZN = cond(v51)
	v52 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v52, 0)
	CVZNX = cond(v52)
	goto l00005C8A
	// succ:  l00005C8A
l00005C46:
	v84 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v84, 0)
	CVZN = cond(v84)
	v85 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v85, 0)
	CVZNX = cond(v85)
	goto l00005C90
	// succ:  l00005C90
l00005C4C:
	v82 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v82, 0)
	CVZN = cond(v82)
	v83 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v83, 0)
	CVZNX = cond(v83)
	goto l00005C98
	// succ:  l00005C98
l00005C52:
	v69 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v69, 0)
	CVZN = cond(v69)
	v70 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v70, 0)
	CVZNX = cond(v70)
	goto l00005CA4
	// succ:  l00005CA4
l00005C58:
	v63 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v63, 0)
	CVZN = cond(v63)
	v64 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v64, 0)
	CVZNX = cond(v64)
	goto l00005CAA
	// succ:  l00005CAA
l00005C5E:
	v61 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v61, 0)
	CVZN = cond(v61)
	v62 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v62, 0)
	CVZNX = cond(v62)
	goto l00005CB0
	// succ:  l00005CB0
l00005C64:
	v53 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v53, 0)
	CVZN = cond(v53)
	v54 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v54, 0)
	CVZNX = cond(v54)
	goto l00005CBC
	// succ:  l00005CBC
l00005C6A:
	d0 = 3
	CVZN = cond(d0)
	// succ:  l00005C6C
l00005C6C:
	v71 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v71, 0)
	CVZNX = cond(v71)
	branch Test(EQ,Z) l00005C3A
	// succ:  l00005C70 l00005C3A
l00005C70:
	v72 = (word16) d1 + (word16) d1 + X
	d1 = DPB(d1, v72, 0)
	CVZNX = cond(v72)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00005C6C
	// succ:  l00005C76 l00005C6C
l00005C76:
	v73 = (word16) d1 + 0x0002
	d1 = DPB(d1, v73, 0)
	CVZNX = cond(v73)
	// succ:  l00005C78
l00005C78:
	v74 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v75 = v74
	Mem0[a1:byte] = v75
	a1 = a1 + 0x00000001
	CVZN = cond(v75)
	v76 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v77 = v76
	Mem0[a1:byte] = v77
	a1 = a1 + 0x00000001
	CVZN = cond(v77)
	v78 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v79 = v78
	Mem0[a1:byte] = v79
	a1 = a1 + 0x00000001
	CVZN = cond(v79)
	v80 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v81 = v80
	Mem0[a1:byte] = v81
	a1 = a1 + 0x00000001
	CVZN = cond(v81)
	d1 = d1 - 0x00000001
	branch d1 != 0xFFFFFFFF l00005C78
	// succ:  l00005C84 l00005C78
l00005C84:
	goto l00005CF2
	// succ:  l00005CF2
l00005C86:
	v32 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v32, 0)
	CVZNX = cond(v32)
	branch Test(EQ,Z) l00005C40
	// succ:  l00005C8A l00005C40
l00005C8A:
	v33 = (word16) d0 + (word16) d0 + X
	d0 = DPB(d0, v33, 0)
	CVZNX = cond(v33)
	v34 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v34, 0)
	CVZNX = cond(v34)
	branch Test(EQ,Z) l00005C46
	// succ:  l00005C90 l00005C46
l00005C90:
	branch Test(UGE,C) l00005CA0
	// succ:  l00005C92 l00005CA0
l00005C92:
	v35 = (word16) d0 - 0x0001
	d0 = DPB(d0, v35, 0)
	CVZNX = cond(v35)
	v36 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v36, 0)
	CVZNX = cond(v36)
	branch Test(EQ,Z) l00005C4C
	// succ:  l00005C98 l00005C4C
l00005C98:
	v37 = (word16) d0 + (word16) d0 + X
	d0 = DPB(d0, v37, 0)
	CVZNX = cond(v37)
	v38 = (byte) d0 - 0x09
	CVZN = cond(v38)
	branch Test(EQ,Z) l00005C6A
	// succ:  l00005CA0 l00005C6A
l00005CA0:
	v39 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v39, 0)
	CVZNX = cond(v39)
	branch Test(EQ,Z) l00005C52
	// succ:  l00005CA4 l00005C52
l00005CA4:
	branch Test(UGE,C) l00005CC0
	// succ:  l00005CA6 l00005CC0
l00005CA6:
	v40 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v40, 0)
	CVZNX = cond(v40)
	branch Test(EQ,Z) l00005C58
	// succ:  l00005CAA l00005C58
l00005CAA:
	v41 = (word16) d1 + (word16) d1 + X
	d1 = DPB(d1, v41, 0)
	CVZNX = cond(v41)
	v42 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v42, 0)
	CVZNX = cond(v42)
	branch Test(EQ,Z) l00005C5E
	// succ:  l00005CB0 l00005C5E
l00005CB0:
	branch Test(ULT,C) l00005D20
	// succ:  l00005CB2 l00005D20
l00005CB2:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00005CBE
	// succ:  l00005CB6 l00005CBE
l00005CB6:
	v45 = (word16) d1 + 0x0001
	d1 = DPB(d1, v45, 0)
	CVZNX = cond(v45)
	// succ:  l00005CB8
l00005CB8:
	v46 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v46, 0)
	CVZNX = cond(v46)
	branch Test(EQ,Z) l00005C64
	// succ:  l00005CBC l00005C64
l00005CBC:
	v47 = (word16) d1 + (word16) d1 + X
	d1 = DPB(d1, v47, 0)
	CVZNX = cond(v47)
	// succ:  l00005CBE
l00005CBE:
	v55 = __rol((word16) d1, 0x0008)
	d1 = DPB(d1, v55, 0)
	CZN = cond(v55)
	V = false
	// succ:  l00005CC0
l00005CC0:
	v90 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d1 = DPB(d1, v90, 0)
	CVZN = cond(v90)
	a2 = a1
	v91 = (word16) a2 - (word16) d1
	a2 = DPB(a2, v91, 0)
	CVZNX = cond(v91)
	a2 = a2 - 0x0001
	v92 = (word16) d0 >>u 0x0001
	d0 = DPB(d0, v92, 0)
	CVZNX = cond(v92)
	branch Test(UGE,C) l00005CCE
	// succ:  l00005CCC l00005CCE
l00005CCC:
	v93 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	v94 = v93
	Mem0[a1:byte] = v94
	a1 = a1 + 0x00000001
	CVZN = cond(v94)
	// succ:  l00005CCE
l00005CCE:
	v97 = (word16) d0 - 0x0001
	d0 = DPB(d0, v97, 0)
	CVZNX = cond(v97)
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00005CE0
	// succ:  l00005CD4 l00005CE0
l00005CD4:
	v98 = Mem0[a2:byte]
	d1 = DPB(d1, v98, 0)
	CVZN = cond(v98)
	// succ:  l00005CD6
l00005CD6:
	v99 = (byte) d1
	Mem0[a1:byte] = v99
	a1 = a1 + 0x00000001
	CVZN = cond(v99)
	v100 = (byte) d1
	Mem0[a1:byte] = v100
	a1 = a1 + 0x00000001
	CVZN = cond(v100)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00005CD6
	// succ:  l00005CDE l00005CD6
l00005CDE:
	goto l00005CF2
	// succ:  l00005CF2
l00005CE0:
	v103 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	v104 = v103
	Mem0[a1:byte] = v104
	a1 = a1 + 0x00000001
	CVZN = cond(v104)
	v105 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	v106 = v105
	Mem0[a1:byte] = v106
	a1 = a1 + 0x00000001
	CVZN = cond(v106)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00005CE0
	// succ:  l00005CE8 l00005CE0
l00005CE8:
	goto l00005CF2
	// succ:  l00005CF2
l00005CEA:
	v28 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v28, 0)
	CVZN = cond(v28)
	v29 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v29, 0)
	CVZNX = cond(v29)
	branch Test(ULT,C) l00005CFE
	// succ:  l00005CF0 l00005CFE
l00005CF0:
	v30 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v31 = v30
	Mem0[a1:byte] = v31
	a1 = a1 + 0x00000001
	CVZN = cond(v31)
	// succ:  l00005CF2
l00005CF2:
	v16 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v16, 0)
	CVZNX = cond(v16)
	branch Test(ULT,C) l00005CFC
	// succ:  l00005CF6 l00005CFC
l00005CF6:
	v18 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v19 = v18
	Mem0[a1:byte] = v19
	a1 = a1 + 0x00000001
	CVZN = cond(v19)
	v20 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v20, 0)
	CVZNX = cond(v20)
	branch Test(UGE,C) l00005CF0
	// succ:  l00005CFC l00005CF0
l00005CFC:
	branch Test(EQ,Z) l00005CEA
	// succ:  l00005CFE l00005CEA
l00005CFE:
	d0 = 2
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v22 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v22, 0)
	CVZNX = cond(v22)
	branch Test(EQ,Z) l00005D32
	// succ:  l00005D06 l00005D32
l00005D06:
	branch Test(UGE,C) l00005C86
	// succ:  l00005D0A l00005C86
l00005D0A:
	v23 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v23, 0)
	CVZNX = cond(v23)
	branch Test(EQ,Z) l00005D38
	// succ:  l00005D0E l00005D38
l00005D0E:
	branch Test(UGE,C) l00005CC0
	// succ:  l00005D10 l00005CC0
l00005D10:
	v24 = (word16) d0 + 0x0001
	d0 = DPB(d0, v24, 0)
	CVZNX = cond(v24)
	v25 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v25, 0)
	CVZNX = cond(v25)
	branch Test(EQ,Z) l00005D3E
	// succ:  l00005D16 l00005D3E
l00005D16:
	branch Test(UGE,C) l00005CA0
	// succ:  l00005D18 l00005CA0
l00005D18:
	v26 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v26, 0)
	CVZN = cond(v26)
	branch Test(EQ,Z) l00005D50
	// succ:  l00005D1C l00005D50
l00005D1C:
	v27 = (word16) d0 + 0x0008
	d0 = DPB(d0, v27, 0)
	CVZNX = cond(v27)
	goto l00005CA0
	// succ:  l00005CA0
l00005D20:
	v57 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v57, 0)
	CVZNX = cond(v57)
	branch Test(EQ,Z) l00005D44
	// succ:  l00005D24 l00005D44
l00005D24:
	v58 = (word16) d1 + (word16) d1 + X
	d1 = DPB(d1, v58, 0)
	CVZNX = cond(v58)
	v59 = (word16) d1 | 0x0004
	d1 = DPB(d1, v59, 0)
	ZN = cond(v59)
	C = false
	V = false
	v60 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v60, 0)
	CVZNX = cond(v60)
	branch Test(EQ,Z) l00005D4A
	// succ:  l00005D2E l00005D4A
l00005D2E:
	branch Test(ULT,C) l00005CBE
	// succ:  l00005D30 l00005CBE
l00005D30:
	goto l00005CB8
	// succ:  l00005CB8
l00005D32:
	v101 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v101, 0)
	CVZN = cond(v101)
	v102 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v102, 0)
	CVZNX = cond(v102)
	goto l00005D06
	// succ:  l00005D06
l00005D38:
	v95 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v95, 0)
	CVZN = cond(v95)
	v96 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v96, 0)
	CVZNX = cond(v96)
	goto l00005D0E
	// succ:  l00005D0E
l00005D3E:
	v88 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v88, 0)
	CVZN = cond(v88)
	v89 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v89, 0)
	CVZNX = cond(v89)
	goto l00005D16
	// succ:  l00005D16
l00005D44:
	v67 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v67, 0)
	CVZN = cond(v67)
	v68 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v68, 0)
	CVZNX = cond(v68)
	goto l00005D24
	// succ:  l00005D24
l00005D4A:
	v65 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v65, 0)
	CVZN = cond(v65)
	v66 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v66, 0)
	CVZNX = cond(v66)
	goto l00005D2E
	// succ:  l00005D2E
l00005D50:
	v48 = (byte) d2 + (byte) d2
	d2 = DPB(d2, v48, 0)
	CVZNX = cond(v48)
	branch Test(NE,Z) l00005D58
	// succ:  l00005D54 l00005D58
l00005D54:
	v49 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d2 = DPB(d2, v49, 0)
	CVZN = cond(v49)
	v50 = (byte) d2 + (byte) d2 + X
	d2 = DPB(d2, v50, 0)
	CVZNX = cond(v50)
	// succ:  l00005D58
l00005D58:
	branch Test(ULT,C) l00005CF2
	// succ:  l00005D5A l00005CF2
l00005D5A:
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00005C1C_exit
fn00005C1C_exit:


// fn00006078
// Return size: 4
void fn00006078()
fn00006078_entry:
	// succ:  l00006078
l00006078:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a6 = Mem0[a7 + 56:word32]
	a0 = Mem0[a7 + 24:word32]
	a1 = Mem0[a7 + 28:word32]
	a2 = Mem0[a7 + 32:word32]
	a3 = Mem0[a7 + 36:word32]
	d0 = Mem0[a7 + 40:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 44:word32]
	CVZN = cond(d1)
	d2 = Mem0[a7 + 48:word32]
	CVZN = cond(d2)
	d3 = Mem0[a7 + 52:word32]
	CVZN = cond(d3)
	FreeTrap(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006078_exit
fn00006078_exit:


// fn000060AC
// Return size: 4
void fn000060AC()
fn000060AC_entry:
	// succ:  l000060AC
l000060AC:
	a7 = fp
	return
	// succ:  fn000060AC_exit
fn000060AC_exit:


// fn000060AE
// Return size: 4
void fn000060AE()
fn000060AE_entry:
	// succ:  l000060AE
l000060AE:
	a7 = fp
	return
	// succ:  fn000060AE_exit
fn000060AE_exit:


// fn000060B0
// Return size: 4
void fn000060B0()
fn000060B0_entry:
	// succ:  l000060B0
l000060B0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	d7 = Mem0[a7 + 24:word32]
	CVZN = cond(d7)
	a3 = Mem0[a7 + 28:word32]
	d6 = Mem0[a7 + 32:word32]
	CVZN = cond(d6)
	a7 = a7 - 0x00000004
	v9 = d7
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000093F4 (retsize: 4;)
	a7 = a7 + 0x0004
	a2 = d0
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l000060D2
	// succ:  l000060CE l000060D2
l000060CE:
	d0 = -1
	CVZN = cond(d0)
	goto l00006108
	// succ:  l00006108
l000060D2:
	Z = __btst(Mem0[a2 + 3:byte], 0x0003)
	branch Test(EQ,Z) l000060EA
	// succ:  l000060DA l000060EA
l000060DA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000002
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	v15 = d7
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00008388 (retsize: 4;)
	a7 = a7 + 12
	// succ:  l000060EA
l000060EA:
	a7 = a7 - 0x00000004
	v16 = d6
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	a7 = a7 - 0x00000004
	v17 = a3
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	v18 = Mem0[a2 + 4:word32]
	a7 = a7 - 0x00000004
	v19 = v18
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	call fn00008AAC (retsize: 4;)
	a7 = a7 + 12
	d5 = d0
	CVZN = cond(d5)
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00006106
	// succ:  l00006102 l00006106
l00006102:
	d0 = -1
	CVZN = cond(d0)
	goto l00006108
	// succ:  l00006108
l00006106:
	d0 = d5
	CVZN = cond(d0)
	// succ:  l00006108
l00006108:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000060B0_exit
fn000060B0_exit:


// fn00006110
// Return size: 4
void fn00006110()
fn00006110_entry:
	// succ:  l00006110
l00006110:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a7 + 16:word32]
	a0 = a3
	// succ:  l0000611A
l0000611A:
	v7 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000611A
	// succ:  l0000611E l0000611A
l0000611E:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d6 = a0
	CVZN = cond(d6)
	// succ:  l00006124
l00006124:
	d7 = 0
	CVZN = cond(d7)
	v14 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d7 = DPB(d7, v14, 0)
	CVZN = cond(v14)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000615A
	// succ:  l0000612C l0000615A
l0000612C:
	v16 = Mem0[a4 + 7714:word32] - 0x00000001
	Mem0[a4 + 7714:word32] = v16
	CVZNX = cond(v16)
	branch Test(LT,CZ) l00006144
	// succ:  l00006132 l00006144
l00006132:
	a0 = Mem0[a4 + 7706:word32]
	v18 = Mem0[a4 + 7706:word32] + 0x00000001
	Mem0[a4 + 7706:word32] = v18
	CVZNX = cond(v18)
	d0 = d7
	CVZN = cond(d0)
	v20 = (byte) d0
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	d1 = 0
	CVZN = cond(d1)
	v22 = (byte) d0
	d1 = DPB(d1, v22, 0)
	CVZN = cond(v22)
	goto l00006124
	// succ:  l00006124
l00006144:
	d0 = d7
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	v24 = d1
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = d0
	CVZN = cond(d1)
	goto l00006124
	// succ:  l00006124
l0000615A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = d6
	CVZN = cond(d0)
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006110_exit
fn00006110_exit:


// fn00006170
// Return size: 4
void fn00006170()
fn00006170_entry:
	// succ:  l00006170
l00006170:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000024
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a3 = Mem0[a5 + 8:word32]
	d6 = 0
	CVZN = cond(d6)
	a0 = a5 + 12
	v12 = a0
	Mem0[a5 + -14:word32] = v12
	CVZN = cond(v12)
	// succ:  l00006186
l00006186:
	v13 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d7 = DPB(d7, v13, 0)
	CVZN = cond(v13)
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000627E
	// succ:  l0000618E l0000627E
l0000618E:
	d0 = 37
	CVZN = cond(d0)
	v19 = (byte) d7 - (byte) d0
	CVZN = cond(v19)
	branch Test(NE,Z) l0000624C
	// succ:  l00006196 l0000624C
l00006196:
	v20 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d7 = DPB(d7, v20, 0)
	CVZN = cond(v20)
	d0 = 0
	CVZN = cond(d0)
	v21 = (byte) d7
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = (word16) d0 - 0x0064
	d0 = DPB(d0, v22, 0)
	CVZNX = cond(v22)
	branch Test(EQ,Z) l000061F2
	// succ:  l000061A2 l000061F2
l000061A2:
	v24 = (word16) d0 - 0x000C
	d0 = DPB(d0, v24, 0)
	CVZNX = cond(v24)
	branch Test(EQ,Z) l000061BE
	// succ:  l000061A8 l000061BE
l000061A8:
	v25 = (word16) d0 - 0x0003
	d0 = DPB(d0, v25, 0)
	CVZNX = cond(v25)
	branch Test(EQ,Z) l000061B2
	// succ:  l000061AC l000061B2
l000061AC:
	v26 = (word16) d0 - 0x0005
	d0 = DPB(d0, v26, 0)
	CVZNX = cond(v26)
	branch Test(EQ,Z) l000061BE
	// succ:  l000061B0 l000061BE
l000061B0:
	goto l0000621A
	// succ:  l0000621A
l000061B2:
	a0 = Mem0[a5 + -14:word32]
	v35 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	a2 = v35
	v36 = a0
	Mem0[a5 + -14:word32] = v36
	CVZN = cond(v36)
	goto l0000620C
	// succ:  l0000620C
l000061BE:
	a0 = Mem0[a5 + -14:word32]
	v40 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	d4 = v40
	CVZN = cond(d4)
	v41 = a0
	Mem0[a5 + -14:word32] = v41
	CVZN = cond(v41)
	a2 = a5 + -20
	d5 = 7
	CVZN = cond(d5)
	// succ:  l000061CE
l000061CE:
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000061E8
	// succ:  l000061D2 l000061E8
l000061D2:
	d0 = d4
	CVZN = cond(d0)
	d1 = 15
	CVZN = cond(d1)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00006296
	a0 = a0 + d0
	v43 = Mem0[a0:byte]
	Mem0[a2:byte] = v43
	CVZN = cond(v43)
	a2 = a2 - 0x00000001
	d4 = d4 >> 0x00000004
	CVZNX = cond(d4)
	d5 = d5 - 0x00000001
	CVZNX = cond(d5)
	goto l000061CE
	// succ:  l000061CE
l000061E8:
	Mem0[a5 + -19:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a2 = a5 + -27
	goto l0000620C
	// succ:  l0000620C
l000061F2:
	a0 = Mem0[a5 + -14:word32]
	v44 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	d4 = v44
	CVZN = cond(d4)
	v45 = a0
	Mem0[a5 + -14:word32] = v45
	CVZN = cond(v45)
	a7 = a7 - 0x00000004
	v46 = d4
	Mem0[a7:word32] = v46
	CVZN = cond(v46)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -27
	call fn00007CF8 (retsize: 4;)
	a7 = a7 + 0x0008
	a2 = a5 + -27
	// succ:  l0000620C
l0000620C:
	a7 = a7 - 0x00000004
	v39 = a2
	Mem0[a7:word32] = v39
	CVZN = cond(v39)
	call fn00006110 (retsize: 4;)
	a7 = a7 + 0x0004
	d6 = d6 + d0
	CVZNX = cond(d6)
	goto l00006186
	// succ:  l00006186
l0000621A:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	v29 = Mem0[a4 + 7714:word32] - 0x00000001
	Mem0[a4 + 7714:word32] = v29
	CVZNX = cond(v29)
	branch Test(LT,CZ) l00006236
	// succ:  l00006222 l00006236
l00006222:
	a0 = Mem0[a4 + 7706:word32]
	v31 = Mem0[a4 + 7706:word32] + 0x00000001
	Mem0[a4 + 7706:word32] = v31
	CVZNX = cond(v31)
	d0 = d7
	CVZN = cond(d0)
	v32 = (byte) d0
	Mem0[a0:byte] = v32
	CVZN = cond(v32)
	d1 = 0
	CVZN = cond(d1)
	v34 = (byte) d0
	d1 = DPB(d1, v34, 0)
	CVZN = cond(v34)
	goto l00006186
	// succ:  l00006186
l00006236:
	d0 = 0
	CVZN = cond(d0)
	v37 = (byte) d7
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	v38 = d0
	Mem0[a7:word32] = v38
	CVZN = cond(v38)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = d0
	CVZN = cond(d1)
	goto l00006186
	// succ:  l00006186
l0000624C:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	v48 = Mem0[a4 + 7714:word32] - 0x00000001
	Mem0[a4 + 7714:word32] = v48
	CVZNX = cond(v48)
	branch Test(LT,CZ) l00006268
	// succ:  l00006254 l00006268
l00006254:
	a0 = Mem0[a4 + 7706:word32]
	v49 = Mem0[a4 + 7706:word32] + 0x00000001
	Mem0[a4 + 7706:word32] = v49
	CVZNX = cond(v49)
	d0 = d7
	CVZN = cond(d0)
	v50 = (byte) d0
	Mem0[a0:byte] = v50
	CVZN = cond(v50)
	d1 = 0
	CVZN = cond(d1)
	v51 = (byte) d0
	d1 = DPB(d1, v51, 0)
	CVZN = cond(v51)
	goto l00006186
	// succ:  l00006186
l00006268:
	d0 = 0
	CVZN = cond(d0)
	v52 = (byte) d7
	d0 = DPB(d0, v52, 0)
	CVZN = cond(v52)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = d0
	CVZN = cond(d1)
	goto l00006186
	// succ:  l00006186
l0000627E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	d0 = d6
	CVZN = cond(d0)
	v28 = a5 + -60
	d4 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	d5 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	d6 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	d7 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	a2 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	a3 = Mem0[v28:word32]
	v28 = v28 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006170_exit
fn00006170_exit:


// fn00006B30
// Return size: 4
void fn00006B30()
fn00006B30_entry:
	// succ:  l00006B30
l00006B30:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000003C
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	d7 = 0
	CVZN = cond(d7)
	d6 = 0
	CVZN = cond(d6)
	d5 = 0
	CVZN = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v12 = 0x20
	Mem0[a5 + -5:byte] = v12
	CVZN = cond(v12)
	d1 = 0
	CVZN = cond(d1)
	v14 = d1
	Mem0[a5 + -10:word32] = v14
	CVZN = cond(v14)
	d2 = -1
	CVZN = cond(d2)
	v15 = d2
	Mem0[a5 + -14:word32] = v15
	CVZN = cond(v15)
	a0 = a5 + -48
	v17 = (byte) d0
	Mem0[a5 + -15:byte] = v17
	CVZN = cond(v17)
	v18 = (byte) d0
	Mem0[a5 + -4:byte] = v18
	CVZN = cond(v18)
	v19 = d1
	Mem0[a5 + -28:word32] = v19
	CVZN = cond(v19)
	v20 = d1
	Mem0[a5 + -24:word32] = v20
	CVZN = cond(v20)
	v21 = a0
	Mem0[a5 + -52:word32] = v21
	CVZN = cond(v21)
	// succ:  l00006B72
l00006B72:
	v22 = Mem0[a3:byte]
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	branch Test(EQ,Z) l00006BA2
	// succ:  l00006B76 l00006BA2
l00006B76:
	d1 = 0
	CVZN = cond(d1)
	v24 = (byte) d0
	d1 = DPB(d1, v24, 0)
	CVZN = cond(v24)
	v25 = (word16) d1 - 0x0020
	d1 = DPB(d1, v25, 0)
	CVZNX = cond(v25)
	branch Test(EQ,Z) l00006B94
	// succ:  l00006B80 l00006B94
l00006B80:
	v27 = (word16) d1 - 0x0003
	d1 = DPB(d1, v27, 0)
	CVZNX = cond(v27)
	branch Test(EQ,Z) l00006B98
	// succ:  l00006B84 l00006B98
l00006B84:
	v28 = (word16) d1 - 0x0008
	d1 = DPB(d1, v28, 0)
	CVZNX = cond(v28)
	branch Test(EQ,Z) l00006B90
	// succ:  l00006B88 l00006B90
l00006B88:
	v29 = (word16) d1 - 0x0002
	d1 = DPB(d1, v29, 0)
	CVZNX = cond(v29)
	branch Test(NE,Z) l00006BA2
	// succ:  l00006B8C l00006BA2
l00006B8C:
	d7 = 1
	CVZN = cond(d7)
	goto l00006B9E
	// succ:  l00006B9E
l00006B90:
	d6 = 1
	CVZN = cond(d6)
	goto l00006B9E
	// succ:  l00006B9E
l00006B94:
	d5 = 1
	CVZN = cond(d5)
	goto l00006B9E
	// succ:  l00006B9E
l00006B98:
	v42 = 0x01
	Mem0[a5 + -4:byte] = v42
	CVZN = cond(v42)
	// succ:  l00006B9E
l00006B9E:
	a3 = a3 + 0x00000001
	goto l00006B72
	// succ:  l00006B72
l00006BA2:
	v30 = Mem0[a3:byte]
	d0 = DPB(d0, v30, 0)
	CVZN = cond(v30)
	d1 = 48
	CVZN = cond(d1)
	v31 = (byte) d0 - (byte) d1
	CVZN = cond(v31)
	branch Test(NE,Z) l00006BB0
	// succ:  l00006BAA l00006BB0
l00006BAA:
	a3 = a3 + 0x00000001
	v32 = (byte) d1
	Mem0[a5 + -5:byte] = v32
	CVZN = cond(v32)
	// succ:  l00006BB0
l00006BB0:
	d0 = 42
	CVZN = cond(d0)
	v33 = (byte) d0 - Mem0[a3:byte]
	CVZN = cond(v33)
	branch Test(NE,Z) l00006BC2
	// succ:  l00006BB6 l00006BC2
l00006BB6:
	a0 = Mem0[a2:word32]
	v34 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v34
	CVZNX = cond(v34)
	v35 = Mem0[a0:word32]
	Mem0[a5 + -10:word32] = v35
	CVZN = cond(v35)
	a3 = a3 + 0x00000001
	goto l00006BD0
	// succ:  l00006BD0
l00006BC2:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -10
	a7 = a7 - 0x00000004
	v41 = a3
	Mem0[a7:word32] = v41
	CVZN = cond(v41)
	call fn00007D98 (retsize: 4;)
	a7 = a7 + 0x0008
	a3 = a3 + d0
	// succ:  l00006BD0
l00006BD0:
	v36 = Mem0[a3:byte]
	d0 = DPB(d0, v36, 0)
	CVZN = cond(v36)
	d1 = 46
	CVZN = cond(d1)
	v37 = (byte) d0 - (byte) d1
	CVZN = cond(v37)
	branch Test(NE,Z) l00006BFA
	// succ:  l00006BD8 l00006BFA
l00006BD8:
	a3 = a3 + 0x00000001
	d0 = 42
	CVZN = cond(d0)
	v38 = (byte) d0 - Mem0[a3:byte]
	CVZN = cond(v38)
	branch Test(NE,Z) l00006BEC
	// succ:  l00006BE0 l00006BEC
l00006BE0:
	a0 = Mem0[a2:word32]
	v39 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v39
	CVZNX = cond(v39)
	v40 = Mem0[a0:word32]
	Mem0[a5 + -14:word32] = v40
	CVZN = cond(v40)
	a3 = a3 + 0x00000001
	goto l00006BFA
	// succ:  l00006BFA
l00006BEC:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -14
	a7 = a7 - 0x00000004
	v43 = a3
	Mem0[a7:word32] = v43
	CVZN = cond(v43)
	call fn00007D98 (retsize: 4;)
	a7 = a7 + 0x0008
	a3 = a3 + d0
	// succ:  l00006BFA
l00006BFA:
	v44 = Mem0[a3:byte]
	d0 = DPB(d0, v44, 0)
	CVZN = cond(v44)
	d1 = 108
	CVZN = cond(d1)
	v45 = (byte) d0 - (byte) d1
	CVZN = cond(v45)
	branch Test(NE,Z) l00006C0C
	// succ:  l00006C02 l00006C0C
l00006C02:
	v46 = 0x01
	Mem0[a5 + -15:byte] = v46
	CVZN = cond(v46)
	a3 = a3 + 0x00000001
	goto l00006C14
	// succ:  l00006C14
l00006C0C:
	d1 = 104
	CVZN = cond(d1)
	v47 = (byte) d0 - (byte) d1
	CVZN = cond(v47)
	branch Test(NE,Z) l00006C14
	// succ:  l00006C12 l00006C14
l00006C12:
	a3 = a3 + 0x00000001
	// succ:  l00006C14
l00006C14:
	v48 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v48, 0)
	CVZN = cond(v48)
	d1 = 0
	CVZN = cond(d1)
	v49 = (byte) d0
	d1 = DPB(d1, v49, 0)
	CVZN = cond(v49)
	v50 = (byte) d0
	Mem0[a5 + -16:byte] = v50
	CVZN = cond(v50)
	v51 = (word16) d1 - 0x0050
	d1 = DPB(d1, v51, 0)
	CVZNX = cond(v51)
	branch Test(EQ,Z) l00006D90
	// succ:  l00006C26 l00006D90
l00006C26:
	v52 = (word16) d1 - 0x0008
	d1 = DPB(d1, v52, 0)
	CVZNX = cond(v52)
	branch Test(EQ,Z) l00006DA4
	// succ:  l00006C2C l00006DA4
l00006C2C:
	v53 = (word16) d1 - 0x000B
	d1 = DPB(d1, v53, 0)
	CVZNX = cond(v53)
	branch Test(EQ,Z) l00006E38
	// succ:  l00006C34 l00006E38
l00006C34:
	v54 = (word16) d1 - 0x0001
	d1 = DPB(d1, v54, 0)
	CVZNX = cond(v54)
	branch Test(EQ,Z) l00006C5C
	// succ:  l00006C38 l00006C5C
l00006C38:
	v55 = (word16) d1 - 0x000B
	d1 = DPB(d1, v55, 0)
	CVZNX = cond(v55)
	branch Test(EQ,Z) l00006D4C
	// succ:  l00006C40 l00006D4C
l00006C40:
	v56 = (word16) d1 - 0x0001
	d1 = DPB(d1, v56, 0)
	CVZNX = cond(v56)
	branch Test(EQ,Z) l00006D90
	// succ:  l00006C46 l00006D90
l00006C46:
	v57 = (word16) d1 - 0x0003
	d1 = DPB(d1, v57, 0)
	CVZNX = cond(v57)
	branch Test(EQ,Z) l00006E00
	// succ:  l00006C4C l00006E00
l00006C4C:
	v58 = (word16) d1 - 0x0002
	d1 = DPB(d1, v58, 0)
	CVZNX = cond(v58)
	branch Test(EQ,Z) l00006D30
	// succ:  l00006C52 l00006D30
l00006C52:
	v59 = (word16) d1 - 0x0003
	d1 = DPB(d1, v59, 0)
	CVZNX = cond(v59)
	branch Test(EQ,Z) l00006DA4
	// succ:  l00006C58 l00006DA4
l00006C58:
	goto l00006E4E
	// succ:  l00006E4E
l00006C5C:
	ZN = cond(Mem0[a5 + -15:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006C6A
	// succ:  l00006C62 l00006C6A
l00006C62:
	a0 = Mem0[a2:word32]
	v128 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v128
	CVZNX = cond(v128)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	goto l00006C70
	// succ:  l00006C70
l00006C6A:
	a0 = Mem0[a2:word32]
	v140 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v140
	CVZNX = cond(v140)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	// succ:  l00006C70
l00006C70:
	v137 = d0
	Mem0[a5 + -20:word32] = v137
	CVZN = cond(v137)
	branch Test(GE,VN) l00006C80
	// succ:  l00006C76 l00006C80
l00006C76:
	d1 = 1
	CVZN = cond(d1)
	v138 = -Mem0[a5 + -20:word32]
	Mem0[a5 + -20:word32] = v138
	CVZNX = cond(v138)
	v139 = d1
	Mem0[a5 + -24:word32] = v139
	CVZN = cond(v139)
	// succ:  l00006C80
l00006C80:
	d0 = Mem0[a5 + -24:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00006C8A
	// succ:  l00006C86 l00006C8A
l00006C86:
	d1 = 45
	CVZN = cond(d1)
	goto l00006C94
	// succ:  l00006C94
l00006C8A:
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006C92
	// succ:  l00006C8E l00006C92
l00006C8E:
	d1 = 43
	CVZN = cond(d1)
	goto l00006C94
	// succ:  l00006C94
l00006C92:
	d1 = 32
	CVZN = cond(d1)
	// succ:  l00006C94
l00006C94:
	v143 = (byte) d1
	Mem0[a5 + -48:byte] = v143
	CVZN = cond(v143)
	d1 = 0
	CVZN = cond(d1)
	v144 = (byte) d6
	d1 = DPB(d1, v144, 0)
	CVZN = cond(v144)
	d0 = d0 | d1
	ZN = cond(d0)
	C = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	v145 = (byte) d5
	d1 = DPB(d1, v145, 0)
	CVZN = cond(v145)
	d0 = d0 | d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00006CAE
	// succ:  l00006CA6 l00006CAE
l00006CA6:
	v146 = Mem0[a5 + -52:word32] + 0x00000001
	Mem0[a5 + -52:word32] = v146
	CVZNX = cond(v146)
	v147 = Mem0[a5 + -28:word32] + 0x00000001
	Mem0[a5 + -28:word32] = v147
	CVZNX = cond(v147)
	// succ:  l00006CAE
l00006CAE:
	v70 = Mem0[a5 + -20:word32]
	a7 = a7 - 0x00000004
	v71 = v70
	Mem0[a7:word32] = v71
	CVZN = cond(v71)
	v72 = Mem0[a5 + -52:word32]
	a7 = a7 - 0x00000004
	v73 = v72
	Mem0[a7:word32] = v73
	CVZN = cond(v73)
	call fn00007BF4 (retsize: 4;)
	a7 = a7 + 0x0008
	v74 = d0
	Mem0[a5 + -56:word32] = v74
	CVZN = cond(v74)
	// succ:  l00006CC0
l00006CC0:
	d0 = Mem0[a5 + -14:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00006CCE
	// succ:  l00006CC8 l00006CCE
l00006CC8:
	d1 = 1
	CVZN = cond(d1)
	v76 = d1
	Mem0[a5 + -14:word32] = v76
	CVZN = cond(v76)
	// succ:  l00006CCE
l00006CCE:
	d0 = Mem0[a5 + -56:word32]
	CVZN = cond(d0)
	d1 = Mem0[a5 + -14:word32]
	CVZN = cond(d1)
	d1 = d1 - d0
	CVZNX = cond(d1)
	v83 = a5 + -60
	a6 = Mem0[v83:word32]
	v83 = v83 + 0x00000004
	branch Test(LE,VZN) l00006D14
	// succ:  l00006CE0 l00006D14
l00006CE0:
	a0 = Mem0[a5 + -52:word32]
	a0 = a0 + d1
	a7 = a7 - 0x00000004
	v85 = d0
	Mem0[a7:word32] = v85
	CVZN = cond(v85)
	a7 = a7 - 0x00000004
	v86 = a0
	Mem0[a7:word32] = v86
	CVZN = cond(v86)
	v87 = Mem0[a5 + -52:word32]
	a7 = a7 - 0x00000004
	v88 = v87
	Mem0[a7:word32] = v88
	CVZN = cond(v88)
	call fn000082E4 (retsize: 4;)
	a7 = a7 + 12
	d0 = 0
	CVZN = cond(d0)
	v89 = Mem0[a5 + -5:byte]
	d0 = DPB(d0, v89, 0)
	CVZN = cond(v89)
	d1 = Mem0[a5 + -60:word32]
	CVZN = cond(d1)
	a0 = Mem0[a5 + -52:word32]
	goto l00006D08
	// succ:  l00006D08
l00006D06:
	v105 = (byte) d0
	Mem0[a0:byte] = v105
	a0 = a0 + 0x00000001
	CVZN = cond(v105)
	// succ:  l00006D08
l00006D08:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	branch Test(UGE,C) l00006D06
	// succ:  l00006D0C l00006D06
l00006D0C:
	d0 = Mem0[a5 + -14:word32]
	CVZN = cond(d0)
	v94 = d0
	Mem0[a5 + -56:word32] = v94
	CVZN = cond(v94)
	// succ:  l00006D14
l00006D14:
	v99 = Mem0[a5 + -28:word32] + d0
	Mem0[a5 + -28:word32] = v99
	CVZNX = cond(v99)
	a0 = a5 + -48
	v100 = a0
	Mem0[a5 + -52:word32] = v100
	CVZN = cond(v100)
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006E54
	// succ:  l00006D26 l00006E54
l00006D26:
	v101 = 0x20
	Mem0[a5 + -5:byte] = v101
	CVZN = cond(v101)
	goto l00006E54
	// succ:  l00006E54
l00006D30:
	ZN = cond(Mem0[a5 + -15:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006D3E
	// succ:  l00006D36 l00006D3E
l00006D36:
	a0 = Mem0[a2:word32]
	v63 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v63
	CVZNX = cond(v63)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	goto l00006D44
	// succ:  l00006D44
l00006D3E:
	a0 = Mem0[a2:word32]
	v65 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v65
	CVZNX = cond(v65)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	// succ:  l00006D44
l00006D44:
	v64 = d0
	Mem0[a5 + -20:word32] = v64
	CVZN = cond(v64)
	goto l00006CAE
	// succ:  l00006CAE
l00006D4C:
	ZN = cond(Mem0[a5 + -15:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006D5A
	// succ:  l00006D52 l00006D5A
l00006D52:
	a0 = Mem0[a2:word32]
	v77 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v77
	CVZNX = cond(v77)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	goto l00006D60
	// succ:  l00006D60
l00006D5A:
	a0 = Mem0[a2:word32]
	v124 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v124
	CVZNX = cond(v124)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	// succ:  l00006D60
l00006D60:
	v90 = d0
	Mem0[a5 + -20:word32] = v90
	CVZN = cond(v90)
	ZN = cond(Mem0[a5 + -4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006D7C
	// succ:  l00006D6A l00006D7C
l00006D6A:
	a0 = Mem0[a5 + -52:word32]
	v91 = 0x30
	Mem0[a0:byte] = v91
	a0 = a0 + 0x00000001
	CVZN = cond(v91)
	d1 = 1
	CVZN = cond(d1)
	v92 = d1
	Mem0[a5 + -28:word32] = v92
	CVZN = cond(v92)
	v93 = a0
	Mem0[a5 + -52:word32] = v93
	CVZN = cond(v93)
	// succ:  l00006D7C
l00006D7C:
	a7 = a7 - 0x00000004
	v95 = d0
	Mem0[a7:word32] = v95
	CVZN = cond(v95)
	v96 = Mem0[a5 + -52:word32]
	a7 = a7 - 0x00000004
	v97 = v96
	Mem0[a7:word32] = v97
	CVZN = cond(v97)
	call fn00007C8C (retsize: 4;)
	a7 = a7 + 0x0008
	v98 = d0
	Mem0[a5 + -56:word32] = v98
	CVZN = cond(v98)
	goto l00006CC0
	// succ:  l00006CC0
l00006D90:
	d0 = Mem0[a5 + -14:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00006D9E
	// succ:  l00006D98 l00006D9E
l00006D98:
	d0 = 8
	CVZN = cond(d0)
	v142 = d0
	Mem0[a5 + -14:word32] = v142
	CVZN = cond(v142)
	// succ:  l00006D9E
l00006D9E:
	v153 = 0x01
	Mem0[a5 + -15:byte] = v153
	CVZN = cond(v153)
	// succ:  l00006DA4
l00006DA4:
	ZN = cond(Mem0[a5 + -15:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006DB2
	// succ:  l00006DAA l00006DB2
l00006DAA:
	a0 = Mem0[a2:word32]
	v141 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v141
	CVZNX = cond(v141)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	goto l00006DB8
	// succ:  l00006DB8
l00006DB2:
	a0 = Mem0[a2:word32]
	v158 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v158
	CVZNX = cond(v158)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	// succ:  l00006DB8
l00006DB8:
	v148 = d0
	Mem0[a5 + -20:word32] = v148
	CVZN = cond(v148)
	ZN = cond(Mem0[a5 + -4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006DD8
	// succ:  l00006DC2 l00006DD8
l00006DC2:
	a0 = Mem0[a5 + -52:word32]
	v149 = 0x30
	Mem0[a0:byte] = v149
	a0 = a0 + 0x00000001
	CVZN = cond(v149)
	v150 = 0x78
	Mem0[a0:byte] = v150
	a0 = a0 + 0x00000001
	CVZN = cond(v150)
	d1 = 2
	CVZN = cond(d1)
	v151 = d1
	Mem0[a5 + -28:word32] = v151
	CVZN = cond(v151)
	v152 = a0
	Mem0[a5 + -52:word32] = v152
	CVZN = cond(v152)
	// succ:  l00006DD8
l00006DD8:
	a7 = a7 - 0x00000004
	v154 = d0
	Mem0[a7:word32] = v154
	CVZN = cond(v154)
	v155 = Mem0[a5 + -52:word32]
	a7 = a7 - 0x00000004
	v156 = v155
	Mem0[a7:word32] = v156
	CVZN = cond(v156)
	call fn00007CCC (retsize: 4;)
	a7 = a7 + 0x0008
	v157 = d0
	Mem0[a5 + -56:word32] = v157
	CVZN = cond(v157)
	Z = __btst(Mem0[a5 + -16:byte], 0x0005)
	branch Test(NE,Z) l00006CC0
	// succ:  l00006DF2 l00006CC0
l00006DF2:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -48
	call fn000078D4 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006CC0
	// succ:  l00006CC0
l00006E00:
	a0 = Mem0[a2:word32]
	v66 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v66
	CVZNX = cond(v66)
	a1 = Mem0[a0:word32]
	v68 = a1
	Mem0[a5 + -52:word32] = v68
	CVZN = cond(v68)
	branch Test(NE,Z) l00006E14
	// succ:  l00006E0C l00006E14
l00006E0C:
	a0 = 0x00006F2C
	v69 = a0
	Mem0[a5 + -52:word32] = v69
	CVZN = cond(v69)
	// succ:  l00006E14
l00006E14:
	a0 = Mem0[a5 + -52:word32]
	// succ:  l00006E18
l00006E18:
	v78 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v78 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00006E18
	// succ:  l00006E1C l00006E18
l00006E1C:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a5 + -52:word32]
	CVZNX = cond(a0)
	v79 = a0
	Mem0[a5 + -28:word32] = v79
	CVZN = cond(v79)
	d0 = Mem0[a5 + -14:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00006E54
	// succ:  l00006E2E l00006E54
l00006E2E:
	v80 = a0 - d0
	CVZN = cond(v80)
	branch Test(LE,VZN) l00006E54
	// succ:  l00006E32 l00006E54
l00006E32:
	v82 = d0
	Mem0[a5 + -28:word32] = v82
	CVZN = cond(v82)
	goto l00006E54
	// succ:  l00006E54
l00006E38:
	d0 = 1
	CVZN = cond(d0)
	v133 = d0
	Mem0[a5 + -28:word32] = v133
	CVZN = cond(v133)
	a0 = Mem0[a2:word32]
	v134 = Mem0[a2:word32] + 0x00000004
	Mem0[a2:word32] = v134
	CVZNX = cond(v134)
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	v135 = (byte) d0
	Mem0[a5 + -48:byte] = v135
	CVZN = cond(v135)
	Mem0[a5 + -47:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	goto l00006E54
	// succ:  l00006E54
l00006E4E:
	d0 = 0
	CVZN = cond(d0)
	goto l00006F24
	// succ:  l00006F24
l00006E54:
	d0 = Mem0[a5 + -28:word32]
	CVZN = cond(d0)
	d1 = Mem0[a5 + -10:word32]
	CVZN = cond(d1)
	v102 = d1 - d0
	CVZN = cond(v102)
	branch Test(GE,VN) l00006E68
	// succ:  l00006E60 l00006E68
l00006E60:
	d2 = 0
	CVZN = cond(d2)
	v104 = d2
	Mem0[a5 + -10:word32] = v104
	CVZN = cond(v104)
	goto l00006E6C
	// succ:  l00006E6C
l00006E68:
	v112 = Mem0[a5 + -10:word32] - d0
	Mem0[a5 + -10:word32] = v112
	CVZNX = cond(v112)
	// succ:  l00006E6C
l00006E6C:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006EA8
	// succ:  l00006E70 l00006EA8
l00006E70:
	v106 = Mem0[a5 + -28:word32] - 0x00000001
	Mem0[a5 + -28:word32] = v106
	CVZNX = cond(v106)
	branch Test(LT,CZ) l00006E8E
	// succ:  l00006E76 l00006E8E
l00006E76:
	d0 = 0
	CVZN = cond(d0)
	a0 = Mem0[a5 + -52:word32]
	v108 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v108, 0)
	CVZN = cond(v108)
	a7 = a7 - 0x00000004
	v109 = d0
	Mem0[a7:word32] = v109
	CVZN = cond(v109)
	v110 = a0
	Mem0[a5 + -52:word32] = v110
	CVZN = cond(v110)
	a0 = Mem0[a5 + 16:word32]
	call a0 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006E70
	// succ:  l00006E70
l00006E8E:
	v113 = Mem0[a5 + -10:word32] - 0x00000001
	Mem0[a5 + -10:word32] = v113
	CVZNX = cond(v113)
	branch Test(LT,CZ) l00006F22
	// succ:  l00006E96 l00006F22
l00006E96:
	d0 = 0
	CVZN = cond(d0)
	v114 = Mem0[a5 + -5:byte]
	d0 = DPB(d0, v114, 0)
	CVZN = cond(v114)
	a7 = a7 - 0x00000004
	v115 = d0
	Mem0[a7:word32] = v115
	CVZN = cond(v115)
	a0 = Mem0[a5 + 16:word32]
	call a0 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006E8E
	// succ:  l00006E8E
l00006EA8:
	ZN = cond(Mem0[a5 + -24:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00006EB6
	// succ:  l00006EAE l00006EB6
l00006EAE:
	ZN = cond((byte) d5 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00006EB6
	// succ:  l00006EB2 l00006EB6
l00006EB2:
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006EEC
	// succ:  l00006EB6 l00006EEC
l00006EB6:
	a0 = Mem0[a5 + -52:word32]
	v116 = Mem0[a0:byte]
	d0 = DPB(d0, v116, 0)
	CVZN = cond(v116)
	d1 = 32
	CVZN = cond(d1)
	v117 = (byte) d0 - (byte) d1
	CVZN = cond(v117)
	branch Test(EQ,Z) l00006ECE
	// succ:  l00006EC2 l00006ECE
l00006EC2:
	d1 = 43
	CVZN = cond(d1)
	v118 = (byte) d0 - (byte) d1
	CVZN = cond(v118)
	branch Test(EQ,Z) l00006ECE
	// succ:  l00006EC8 l00006ECE
l00006EC8:
	d1 = 45
	CVZN = cond(d1)
	v119 = (byte) d0 - (byte) d1
	CVZN = cond(v119)
	branch Test(NE,Z) l00006EEC
	// succ:  l00006ECE l00006EEC
l00006ECE:
	d0 = Mem0[a5 + -28:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00006EEC
	// succ:  l00006ED6 l00006EEC
l00006ED6:
	d0 = 0
	CVZN = cond(d0)
	v120 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v120, 0)
	CVZN = cond(v120)
	a7 = a7 - 0x00000004
	v121 = d0
	Mem0[a7:word32] = v121
	CVZN = cond(v121)
	v122 = a0
	Mem0[a5 + -52:word32] = v122
	CVZN = cond(v122)
	a0 = Mem0[a5 + 16:word32]
	call a0 (retsize: 4;)
	a7 = a7 + 0x0004
	v123 = Mem0[a5 + -28:word32] - 0x00000001
	Mem0[a5 + -28:word32] = v123
	CVZNX = cond(v123)
	// succ:  l00006EEC
l00006EEC:
	v125 = Mem0[a5 + -10:word32] - 0x00000001
	Mem0[a5 + -10:word32] = v125
	CVZNX = cond(v125)
	branch Test(LT,CZ) l00006F04
	// succ:  l00006EF2 l00006F04
l00006EF2:
	d0 = 0
	CVZN = cond(d0)
	v126 = Mem0[a5 + -5:byte]
	d0 = DPB(d0, v126, 0)
	CVZN = cond(v126)
	a7 = a7 - 0x00000004
	v127 = d0
	Mem0[a7:word32] = v127
	CVZN = cond(v127)
	a0 = Mem0[a5 + 16:word32]
	call a0 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006EEC
	// succ:  l00006EEC
l00006F04:
	v129 = Mem0[a5 + -28:word32] - 0x00000001
	Mem0[a5 + -28:word32] = v129
	CVZNX = cond(v129)
	branch Test(LT,CZ) l00006F22
	// succ:  l00006F0A l00006F22
l00006F0A:
	d0 = 0
	CVZN = cond(d0)
	a0 = Mem0[a5 + -52:word32]
	v130 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v130, 0)
	CVZN = cond(v130)
	a7 = a7 - 0x00000004
	v131 = d0
	Mem0[a7:word32] = v131
	CVZN = cond(v131)
	v132 = a0
	Mem0[a5 + -52:word32] = v132
	CVZN = cond(v132)
	a0 = Mem0[a5 + 16:word32]
	call a0 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006F04
	// succ:  l00006F04
l00006F22:
	d0 = a3
	CVZN = cond(d0)
	// succ:  l00006F24
l00006F24:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006B30_exit
fn00006B30_exit:


// fn00006F2E
// Return size: 4
void fn00006F2E()
fn00006F2E_entry:
	// succ:  l00006F2E
l00006F2E:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000000C
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	v7 = Mem0[a5 + 16:word32]
	Mem0[a5 + -10:word32] = v7
	CVZN = cond(v7)
	// succ:  l00006F44
l00006F44:
	v9 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v9, 0)
	CVZN = cond(v9)
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00006F7E
	// succ:  l00006F4A l00006F7E
l00006F4A:
	d0 = 37
	CVZN = cond(d0)
	v15 = (byte) d7 - (byte) d0
	CVZN = cond(v15)
	branch Test(NE,Z) l00006F72
	// succ:  l00006F50 l00006F72
l00006F50:
	v16 = (byte) d0 - Mem0[a2:byte]
	CVZN = cond(v16)
	branch Test(NE,Z) l00006F58
	// succ:  l00006F54 l00006F58
l00006F54:
	a2 = a2 + 0x00000001
	goto l00006F72
	// succ:  l00006F72
l00006F58:
	a7 = a7 - 0x00000004
	v17 = a3
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -10
	a7 = a7 - 0x00000004
	v18 = a2
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn00006B30 (retsize: 4;)
	a7 = a7 + 12
	v19 = d0
	Mem0[a5 + -6:word32] = v19
	CVZN = cond(v19)
	branch Test(EQ,Z) l00006F72
	// succ:  l00006F6E l00006F72
l00006F6E:
	a2 = d0
	goto l00006F44
	// succ:  l00006F44
l00006F72:
	d0 = 0
	CVZN = cond(d0)
	v20 = (byte) d7
	d0 = DPB(d0, v20, 0)
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = d0
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	call a3 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00006F44
	// succ:  l00006F44
l00006F7E:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006F2E_exit
fn00006F2E_exit:


// fn00006F88
// Return size: 4
void fn00006F88()
fn00006F88_entry:
	// succ:  l00006F88
l00006F88:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a3 = Mem0[a7 + 12:word32]
	d1 = a3
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	InitCode(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00006FB0
	// succ:  l00006F9E l00006FB0
l00006F9E:
	Forbid()
	v13 = d0
	Mem0[a4 + 8240:word32] = v13
	CVZN = cond(v13)
	d0 = 2
	CVZN = cond(d0)
	v14 = d0
	Mem0[a4 + 18336:word32] = v14
	CVZN = cond(v14)
	d0 = -1
	CVZN = cond(d0)
	goto l00006FB2
	// succ:  l00006FB2
l00006FB0:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00006FB2
l00006FB2:
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006F88_exit
fn00006F88_exit:


// fn00006FB8
// Return size: 4
void fn00006FB8()
fn00006FB8_entry:
	// succ:  l00006FB8
l00006FB8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000014
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	// succ:  l00006FC4
l00006FC4:
	v10 = Mem0[a4 + 18142:word32] - 0x00000020
	CVZN = cond(v10)
	branch Test(GE,VN) l000070B4
	// succ:  l00006FD0 l000070B4
l00006FD0:
	v14 = Mem0[a3:byte]
	d0 = DPB(d0, v14, 0)
	CVZN = cond(v14)
	d1 = 32
	CVZN = cond(d1)
	v16 = (byte) d0 - (byte) d1
	CVZN = cond(v16)
	branch Test(EQ,Z) l00006FE4
	// succ:  l00006FD8 l00006FE4
l00006FD8:
	d1 = 9
	CVZN = cond(d1)
	v18 = (byte) d0 - (byte) d1
	CVZN = cond(v18)
	branch Test(EQ,Z) l00006FE4
	// succ:  l00006FDE l00006FE4
l00006FDE:
	d1 = 10
	CVZN = cond(d1)
	v19 = (byte) d0 - (byte) d1
	CVZN = cond(v19)
	branch Test(NE,Z) l00006FE8
	// succ:  l00006FE4 l00006FE8
l00006FE4:
	a3 = a3 + 0x00000001
	goto l00006FD0
	// succ:  l00006FD0
l00006FE8:
	v21 = Mem0[a3:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	branch Test(EQ,Z) l000070B4
	// succ:  l00006FEE l000070B4
l00006FEE:
	d1 = Mem0[a4 + 18142:word32]
	CVZN = cond(d1)
	d1 = d1 << 0x00000002
	CVZNX = cond(d1)
	v23 = Mem0[a4 + 18142:word32] + 0x00000001
	Mem0[a4 + 18142:word32] = v23
	CVZNX = cond(v23)
	a0 = a4 + 18150
	a0 = a0 + d1
	a2 = a0
	d1 = 34
	CVZN = cond(d1)
	v24 = (byte) d0 - (byte) d1
	CVZN = cond(v24)
	branch Test(NE,Z) l0000708C
	// succ:  l00007008 l0000708C
l00007008:
	a3 = a3 + 0x00000001
	a0 = a3
	v25 = a0
	Mem0[a2:word32] = v25
	CVZN = cond(v25)
	v26 = a0
	Mem0[a5 + -20:word32] = v26
	CVZN = cond(v26)
	// succ:  l00007012
l00007012:
	v27 = Mem0[a3:byte]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d1 = 34
	CVZN = cond(d1)
	v28 = (byte) d0 - (byte) d1
	CVZN = cond(v28)
	branch Test(EQ,Z) l0000707C
	// succ:  l0000701A l0000707C
l0000701A:
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000707C
	// succ:  l0000701E l0000707C
l0000701E:
	d1 = 42
	CVZN = cond(d1)
	v32 = (byte) d0 - (byte) d1
	CVZN = cond(v32)
	branch Test(NE,Z) l00007070
	// succ:  l00007024 l00007070
l00007024:
	a3 = a3 + 0x00000001
	d0 = 0
	CVZN = cond(d0)
	v33 = Mem0[a3:byte]
	d0 = DPB(d0, v33, 0)
	CVZN = cond(v33)
	v34 = (word16) d0 - 0x0030
	d0 = DPB(d0, v34, 0)
	CVZNX = cond(v34)
	branch Test(EQ,Z) l0000703E
	// succ:  l00007030 l0000703E
l00007030:
	v35 = (word16) d0 - 0x0015
	d0 = DPB(d0, v35, 0)
	CVZNX = cond(v35)
	branch Test(EQ,Z) l00007046
	// succ:  l00007036 l00007046
l00007036:
	v36 = (word16) d0 - 0x0009
	d0 = DPB(d0, v36, 0)
	CVZNX = cond(v36)
	branch Test(EQ,Z) l00007054
	// succ:  l0000703C l00007054
l0000703C:
	goto l00007062
	// succ:  l00007062
l0000703E:
	a0 = Mem0[a5 + -20:word32]
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	goto l000070B4
	// succ:  l000070B4
l00007046:
	a0 = Mem0[a5 + -20:word32]
	v58 = 0x17
	Mem0[a0:byte] = v58
	a0 = a0 + 0x00000001
	CVZN = cond(v58)
	v59 = a0
	Mem0[a5 + -20:word32] = v59
	CVZN = cond(v59)
	goto l0000706C
	// succ:  l0000706C
l00007054:
	a0 = Mem0[a5 + -20:word32]
	v71 = 0x0A
	Mem0[a0:byte] = v71
	a0 = a0 + 0x00000001
	CVZN = cond(v71)
	v72 = a0
	Mem0[a5 + -20:word32] = v72
	CVZN = cond(v72)
	goto l0000706C
	// succ:  l0000706C
l00007062:
	a0 = Mem0[a5 + -20:word32]
	v60 = Mem0[a3:byte]
	Mem0[a0:byte] = v60
	a0 = a0 + 0x00000001
	CVZN = cond(v60)
	v61 = a0
	Mem0[a5 + -20:word32] = v61
	CVZN = cond(v61)
	// succ:  l0000706C
l0000706C:
	a3 = a3 + 0x00000001
	goto l00007012
	// succ:  l00007012
l00007070:
	a0 = Mem0[a5 + -20:word32]
	v91 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	v92 = v91
	Mem0[a0:byte] = v92
	a0 = a0 + 0x00000001
	CVZN = cond(v92)
	v93 = a0
	Mem0[a5 + -20:word32] = v93
	CVZN = cond(v93)
	goto l00007012
	// succ:  l00007012
l0000707C:
	a3 = a3 + 0x00000001
	a0 = Mem0[a5 + -20:word32]
	Mem0[a0:byte] = 0x00
	a0 = a0 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	v94 = a0
	Mem0[a5 + -20:word32] = v94
	CVZN = cond(v94)
	goto l00006FC4
	// succ:  l00006FC4
l0000708C:
	v95 = a3
	Mem0[a2:word32] = v95
	CVZN = cond(v95)
	// succ:  l0000708E
l0000708E:
	v96 = Mem0[a3:byte]
	d0 = DPB(d0, v96, 0)
	CVZN = cond(v96)
	branch Test(EQ,Z) l000070A8
	// succ:  l00007092 l000070A8
l00007092:
	d1 = 32
	CVZN = cond(d1)
	v97 = (byte) d0 - (byte) d1
	CVZN = cond(v97)
	branch Test(EQ,Z) l000070A8
	// succ:  l00007098 l000070A8
l00007098:
	d1 = 9
	CVZN = cond(d1)
	v98 = (byte) d0 - (byte) d1
	CVZN = cond(v98)
	branch Test(EQ,Z) l000070A8
	// succ:  l0000709E l000070A8
l0000709E:
	d1 = 10
	CVZN = cond(d1)
	v99 = (byte) d0 - (byte) d1
	CVZN = cond(v99)
	branch Test(EQ,Z) l000070A8
	// succ:  l000070A4 l000070A8
l000070A4:
	a3 = a3 + 0x00000001
	goto l0000708E
	// succ:  l0000708E
l000070A8:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000070AE
	// succ:  l000070AC l000070AE
l000070AC:
	goto l000070B4
	// succ:  l000070B4
l000070AE:
	Mem0[a3:byte] = 0x00
	a3 = a3 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	goto l00006FC4
	// succ:  l00006FC4
l000070B4:
	d0 = Mem0[a4 + 18142:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l000070C0
	// succ:  l000070BA l000070C0
l000070BA:
	a0 = Mem0[a4 + 8276:word32]
	goto l000070C4
	// succ:  l000070C4
l000070C0:
	a0 = a4 + 18150
	// succ:  l000070C4
l000070C4:
	v37 = a0
	Mem0[a4 + 18146:word32] = v37
	CVZN = cond(v37)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007148
	// succ:  l000070CC l00007148
l000070CC:
	a0 = 0x00007204
	a1 = a4 + 18084
	v39 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v40 = v39
	Mem0[a1:word32] = v40
	a1 = a1 + 0x00000004
	CVZN = cond(v40)
	v41 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v42 = v41
	Mem0[a1:word32] = v42
	a1 = a1 + 0x00000004
	CVZN = cond(v42)
	v43 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v44 = v43
	Mem0[a1:word32] = v44
	a1 = a1 + 0x00000004
	CVZN = cond(v44)
	v45 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v46 = v45
	Mem0[a1:word32] = v46
	a1 = a1 + 0x00000004
	CVZN = cond(v46)
	v47 = Mem0[a0:word16]
	Mem0[a1:word16] = v47
	CVZN = cond(v47)
	a1 = Mem0[a4 + 8276:word32]
	a0 = Mem0[a1 + 36:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000028
	v48 = Mem0[a0 + 4:word32]
	a7 = a7 - 0x00000004
	v49 = v48
	Mem0[a7:word32] = v49
	CVZN = cond(v49)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 18084
	call fn00007AD8 (retsize: 4;)
	a7 = a7 + 12
	a0 = a4 + 18084
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003EE
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	Supervisor(a5)
	v50 = d0
	Mem0[a4 + 17764:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + 17772:word32] = v51
	CVZN = cond(v51)
	d1 = 16
	CVZN = cond(d1)
	v52 = d1
	Mem0[a4 + 17768:word32] = v52
	CVZN = cond(v52)
	v53 = d0
	Mem0[a4 + 17780:word32] = v53
	CVZN = cond(v53)
	v54 = d1
	Mem0[a4 + 17776:word32] = v54
	CVZN = cond(v54)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	v55 = d0
	Mem0[a5 + -16:word32] = v55
	CVZN = cond(v55)
	a1 = a1 - a1
	CVZNX = cond(a1)
	a6 = Mem0[a4 + 8272:word32]
	d0 = FindTask(a1)
	a0 = Mem0[a5 + -16:word32]
	a1 = d0
	v56 = Mem0[a0 + 8:word32]
	Mem0[a1 + 164:word32] = v56
	CVZN = cond(v56)
	d7 = 0
	CVZN = cond(d7)
	v57 = d0
	Mem0[a5 + -12:word32] = v57
	CVZN = cond(v57)
	goto l00007184
	// succ:  l00007184
l00007148:
	a6 = Mem0[a4 + 18340:word32]
	execPrivate4()
	v67 = d0
	Mem0[a4 + 17764:word32] = v67
	CVZN = cond(v67)
	execPrivate5()
	v68 = d0
	Mem0[a4 + 17772:word32] = v68
	CVZN = cond(v68)
	a0 = 0x00007216
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v69 = d0
	Mem0[a4 + 17780:word32] = v69
	CVZN = cond(v69)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007182
	// succ:  l00007174 l00007182
l00007174:
	a0 = 0x00007218
	d1 = a0
	CVZN = cond(d1)
	Supervisor(a5)
	v70 = d0
	Mem0[a4 + 17780:word32] = v70
	CVZN = cond(v70)
	// succ:  l00007182
l00007182:
	d7 = 16
	CVZN = cond(d7)
	// succ:  l00007184
l00007184:
	d0 = d7
	CVZN = cond(d0)
	v62 = (word16) d0 | 0x8001
	d0 = DPB(d0, v62, 0)
	ZN = cond(v62)
	C = false
	V = false
	v63 = Mem0[a4 + 17760:word32] | d0
	Mem0[a4 + 17760:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	d0 = d7
	CVZN = cond(d0)
	v64 = (word16) d0 | 0x8002
	d0 = DPB(d0, v64, 0)
	ZN = cond(v64)
	C = false
	V = false
	v65 = Mem0[a4 + 17768:word32] | d0
	Mem0[a4 + 17768:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	v66 = Mem0[a4 + 17776:word32] | 0x00008003
	Mem0[a4 + 17776:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	ZN = cond(Mem0[a4 + 7772:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000071AA
	// succ:  l000071A6 l000071AA
l000071A6:
	d0 = 0
	CVZN = cond(d0)
	goto l000071B0
	// succ:  l000071B0
l000071AA:
	d0 = 0x00008000
	CVZN = cond(d0)
	// succ:  l000071B0
l000071B0:
	d7 = d0
	CVZN = cond(d7)
	Mem0[a4 + 7696:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = d7
	CVZN = cond(d0)
	v75 = (word16) d0 | 0x0001
	d0 = DPB(d0, v75, 0)
	ZN = cond(v75)
	C = false
	V = false
	v76 = d0
	Mem0[a4 + 7692:word32] = v76
	CVZN = cond(v76)
	d0 = 1
	CVZN = cond(d0)
	v77 = d0
	Mem0[a4 + 7730:word32] = v77
	CVZN = cond(v77)
	d0 = d7
	CVZN = cond(d0)
	v78 = (word16) d0 | 0x0002
	d0 = DPB(d0, v78, 0)
	ZN = cond(v78)
	C = false
	V = false
	v79 = d0
	Mem0[a4 + 7726:word32] = v79
	CVZN = cond(v79)
	d0 = 2
	CVZN = cond(d0)
	v80 = d0
	Mem0[a4 + 7764:word32] = v80
	CVZN = cond(v80)
	d0 = d7
	CVZN = cond(d0)
	v81 = (word16) d0 | 0x0080
	d0 = DPB(d0, v81, 0)
	ZN = cond(v81)
	C = false
	V = false
	v82 = d0
	Mem0[a4 + 7760:word32] = v82
	CVZN = cond(v82)
	a0 = 0x00009238
	v83 = a0
	Mem0[a4 + 8264:word32] = v83
	CVZN = cond(v83)
	v84 = Mem0[a4 + 18146:word32]
	a7 = a7 - 0x00000004
	v85 = v84
	Mem0[a7:word32] = v85
	CVZN = cond(v85)
	v86 = Mem0[a4 + 18142:word32]
	a7 = a7 - 0x00000004
	v87 = v86
	Mem0[a7:word32] = v87
	CVZN = cond(v87)
	call fn000011F8 (retsize: 4;)
	Mem0[a7:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn00008A58 (retsize: 4;)
	v89 = a5 + -40
	d2 = Mem0[v89:word32]
	v89 = v89 + 0x00000004
	d7 = Mem0[v89:word32]
	v89 = v89 + 0x00000004
	a2 = Mem0[v89:word32]
	v89 = v89 + 0x00000004
	a3 = Mem0[v89:word32]
	v89 = v89 + 0x00000004
	a6 = Mem0[v89:word32]
	v89 = v89 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00006FB8_exit
fn00006FB8_exit:


// fn00007234
// Return size: 4
void fn00007234()
fn00007234_entry:
	// succ:  l00007234
l00007234:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = a3
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	a3 = Mem0[a7 + 8:word32]
	ZN = cond(Mem0[a3 + 20:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000724C
	// succ:  l00007240 l0000724C
l00007240:
	Z = __btst(Mem0[a3 + 27:byte], 0x0003)
	branch Test(NE,Z) l0000724C
	// succ:  l00007248 l0000724C
l00007248:
	d0 = 0
	CVZN = cond(d0)
	goto l00007280
	// succ:  l00007280
l0000724C:
	v12 = Mem0[a4 + 8212:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0004
	v14 = d0
	Mem0[a3 + 4:word32] = v14
	CVZN = cond(v14)
	v15 = d0
	Mem0[a3 + 16:word32] = v15
	CVZN = cond(v15)
	branch Test(NE,Z) l0000726A
	// succ:  l00007260 l0000726A
l00007260:
	d0 = 12
	CVZN = cond(d0)
	v16 = d0
	Mem0[a4 + 18336:word32] = v16
	CVZN = cond(v16)
	d0 = -1
	CVZN = cond(d0)
	goto l00007280
	// succ:  l00007280
l0000726A:
	v18 = Mem0[a4 + 8212:word32]
	Mem0[a3 + 20:word32] = v18
	CVZN = cond(v18)
	d0 = -13
	CVZN = cond(d0)
	v19 = Mem0[a3 + 24:word32] & d0
	Mem0[a3 + 24:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	v20 = d0
	Mem0[a3 + 12:word32] = v20
	CVZN = cond(v20)
	v21 = d0
	Mem0[a3 + 8:word32] = v21
	CVZN = cond(v21)
	// succ:  l00007280
l00007280:
	v17 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v17
	return
	// succ:  fn00007234_exit
fn00007234_exit:


// fn0000728C
// Return size: 4
void fn0000728C()
fn0000728C_entry:
	// succ:  l0000728C
l0000728C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000014
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d7 = Mem0[a5 + 8:word32]
	CVZN = cond(d7)
	a3 = Mem0[a5 + 12:word32]
	d4 = d7
	CVZN = cond(d4)
	d0 = 49
	CVZN = cond(d0)
	d0 = d0 & Mem0[a3 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000072AC
	// succ:  l000072A6 l000072AC
l000072A6:
	d0 = -1
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l000072AC:
	Z = __btst(Mem0[a3 + 26:byte], 0x0007)
	d0 = DPB(d0, Z, 0)
	v17 = -(byte) d0
	d0 = DPB(d0, v17, 0)
	CVZNX = cond(v17)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(Mem0[a3 + 20:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007342
	// succ:  l000072C4 l00007342
l000072C4:
	Z = __btst(Mem0[a3 + 27:byte], 0x0002)
	branch Test(NE,Z) l00007342
	// succ:  l000072CC l00007342
l000072CC:
	d0 = 0
	CVZN = cond(d0)
	v19 = d0
	Mem0[a3 + 12:word32] = v19
	CVZN = cond(v19)
	d1 = -1
	CVZN = cond(d1)
	v21 = d7 - d1
	CVZN = cond(v21)
	branch Test(EQ,Z) l0000750E
	// succ:  l000072DA l0000750E
l000072DA:
	a7 = a7 - 0x00000004
	v22 = a3
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	call fn00007234 (retsize: 4;)
	a7 = a7 + 0x0004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000072F2
	// succ:  l000072E6 l000072F2
l000072E6:
	Z = __bset(Mem0[a3 + 27:byte], 0x0005, out Mem0[a3 + 27:byte])
	d0 = -1
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l000072F2:
	Z = __bset(Mem0[a3 + 27:byte], 0x0001, out Mem0[a3 + 27:byte])
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000730A
	// succ:  l000072FC l0000730A
l000072FC:
	d0 = Mem0[a3 + 20:word32]
	CVZN = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	d1 = -d1
	CVZNX = cond(d1)
	v23 = d1
	Mem0[a3 + 12:word32] = v23
	CVZN = cond(v23)
	goto l00007312
	// succ:  l00007312
l0000730A:
	d0 = Mem0[a3 + 20:word32]
	CVZN = cond(d0)
	v24 = d0
	Mem0[a3 + 12:word32] = v24
	CVZN = cond(v24)
	// succ:  l00007312
l00007312:
	v25 = Mem0[a3 + 12:word32] - 0x00000001
	Mem0[a3 + 12:word32] = v25
	CVZNX = cond(v25)
	branch Test(LT,CZ) l0000732A
	// succ:  l00007318 l0000732A
l00007318:
	a0 = Mem0[a3 + 4:word32]
	v28 = Mem0[a3 + 4:word32] + 0x00000001
	Mem0[a3 + 4:word32] = v28
	CVZNX = cond(v28)
	d0 = d7
	CVZN = cond(d0)
	v29 = (byte) d0
	Mem0[a0:byte] = v29
	CVZN = cond(v29)
	d1 = 0
	CVZN = cond(d1)
	v30 = (byte) d0
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	goto l0000733C
	// succ:  l0000733C
l0000732A:
	d0 = d7
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v87 = (byte) d0
	d1 = DPB(d1, v87, 0)
	CVZN = cond(v87)
	a7 = a7 - 0x00000004
	v88 = a3
	Mem0[a7:word32] = v88
	CVZN = cond(v88)
	a7 = a7 - 0x00000004
	v89 = d1
	Mem0[a7:word32] = v89
	CVZN = cond(v89)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = d0
	CVZN = cond(d1)
	// succ:  l0000733C
l0000733C:
	d0 = d1
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l00007342:
	Z = __btst(Mem0[a3 + 27:byte], 0x0002)
	branch Test(EQ,Z) l000073A2
	// succ:  l0000734A l000073A2
l0000734A:
	d0 = -1
	CVZN = cond(d0)
	v31 = d7 - d0
	CVZN = cond(v31)
	branch Test(NE,Z) l00007356
	// succ:  l00007350 l00007356
l00007350:
	d0 = 0
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l00007356:
	d0 = d7
	CVZN = cond(d0)
	v40 = (byte) d0
	Mem0[a5 + -1:byte] = v40
	CVZN = cond(v40)
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007382
	// succ:  l00007360 l00007382
l00007360:
	d0 = 10
	CVZN = cond(d0)
	v41 = d7 - d0
	CVZN = cond(v41)
	branch Test(NE,Z) l00007382
	// succ:  l00007366 l00007382
l00007366:
	d0 = 2
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v42 = d0
	Mem0[a7:word32] = v42
	CVZN = cond(v42)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00007516
	v43 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v44 = v43
	Mem0[a7:word32] = v44
	CVZN = cond(v44)
	v45 = d0
	Mem0[a5 + -16:word32] = v45
	CVZN = cond(v45)
	call fn000060B0 (retsize: 4;)
	a7 = a7 + 12
	d5 = d0
	CVZN = cond(d5)
	goto l0000739C
	// succ:  l0000739C
l00007382:
	d0 = 1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -1
	v51 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v52 = v51
	Mem0[a7:word32] = v52
	CVZN = cond(v52)
	v53 = d0
	Mem0[a5 + -16:word32] = v53
	CVZN = cond(v53)
	call fn000060B0 (retsize: 4;)
	a7 = a7 + 12
	d5 = d0
	CVZN = cond(d5)
	// succ:  l0000739C
l0000739C:
	d7 = -1
	CVZN = cond(d7)
	goto l0000747C
	// succ:  l0000747C
l000073A2:
	Z = __bset(Mem0[a3 + 27:byte], 0x0001, out Mem0[a3 + 27:byte])
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000073FA
	// succ:  l000073AC l000073FA
l000073AC:
	d0 = -1
	CVZN = cond(d0)
	v32 = d7 - d0
	CVZN = cond(v32)
	branch Test(EQ,Z) l000073FA
	// succ:  l000073B2 l000073FA
l000073B2:
	v33 = Mem0[a3 + 12:word32] + 0x00000002
	Mem0[a3 + 12:word32] = v33
	CVZNX = cond(v33)
	d1 = 10
	CVZN = cond(d1)
	v34 = d7 - d1
	CVZN = cond(v34)
	branch Test(NE,Z) l000073DE
	// succ:  l000073BC l000073DE
l000073BC:
	a0 = Mem0[a3 + 4:word32]
	v35 = Mem0[a3 + 4:word32] + 0x00000001
	Mem0[a3 + 4:word32] = v35
	CVZNX = cond(v35)
	v36 = 0x0D
	Mem0[a0:byte] = v36
	CVZN = cond(v36)
	d1 = Mem0[a3 + 12:word32]
	CVZN = cond(d1)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000073DA
	// succ:  l000073D0 l000073DA
l000073D0:
	a7 = a7 - 0x00000004
	v38 = a3
	Mem0[a7:word32] = v38
	CVZN = cond(v38)
	a7 = a7 - 0x00000004
	v39 = d0
	Mem0[a7:word32] = v39
	CVZN = cond(v39)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l000073DA
l000073DA:
	v48 = Mem0[a3 + 12:word32] + 0x00000001
	Mem0[a3 + 12:word32] = v48
	CVZNX = cond(v48)
	// succ:  l000073DE
l000073DE:
	a0 = Mem0[a3 + 4:word32]
	v46 = Mem0[a3 + 4:word32] + 0x00000001
	Mem0[a3 + 4:word32] = v46
	CVZNX = cond(v46)
	d0 = d7
	CVZN = cond(d0)
	v47 = (byte) d0
	Mem0[a0:byte] = v47
	CVZN = cond(v47)
	d0 = Mem0[a3 + 12:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l000073F8
	// succ:  l000073F2 l000073F8
l000073F2:
	d0 = d7
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l000073F8:
	d7 = -1
	CVZN = cond(d7)
	// succ:  l000073FA
l000073FA:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a3 + 16:word32]
	CVZNX = cond(d0)
	v56 = d0
	Mem0[a5 + -16:word32] = v56
	CVZN = cond(v56)
	branch Test(EQ,Z) l0000747A
	// succ:  l00007408 l0000747A
l00007408:
	Z = __btst(Mem0[a3 + 26:byte], 0x0006)
	branch Test(EQ,Z) l00007462
	// succ:  l00007410 l00007462
l00007410:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000002
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v57 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v58 = v57
	Mem0[a7:word32] = v58
	CVZN = cond(v58)
	call fn00008388 (retsize: 4;)
	a7 = a7 + 12
	v59 = d0
	Mem0[a5 + -20:word32] = v59
	CVZN = cond(v59)
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007462
	// succ:  l0000742A l00007462
l0000742A:
	v60 = Mem0[a5 + -20:word32] - 0x00000001
	Mem0[a5 + -20:word32] = v60
	CVZNX = cond(v60)
	branch Test(LT,CZ) l00007462
	// succ:  l00007430 l00007462
l00007430:
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v61 = Mem0[a5 + -20:word32]
	a7 = a7 - 0x00000004
	v62 = v61
	Mem0[a7:word32] = v62
	CVZN = cond(v62)
	v63 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v64 = v63
	Mem0[a7:word32] = v64
	CVZN = cond(v64)
	call fn00008388 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000001
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -3
	v65 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v66 = v65
	Mem0[a7:word32] = v66
	CVZN = cond(v66)
	call fn00007FB0 (retsize: 4;)
	a7 = a7 + 24
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007462
	// succ:  l00007458 l00007462
l00007458:
	v68 = Mem0[a5 + -3:byte]
	d0 = DPB(d0, v68, 0)
	CVZN = cond(v68)
	d1 = 26
	CVZN = cond(d1)
	v69 = (byte) d0 - (byte) d1
	CVZN = cond(v69)
	branch Test(EQ,Z) l0000742A
	// succ:  l00007462 l0000742A
l00007462:
	v70 = Mem0[a5 + -16:word32]
	a7 = a7 - 0x00000004
	v71 = v70
	Mem0[a7:word32] = v71
	CVZN = cond(v71)
	v72 = Mem0[a3 + 16:word32]
	a7 = a7 - 0x00000004
	v73 = v72
	Mem0[a7:word32] = v73
	CVZN = cond(v73)
	v74 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v75 = v74
	Mem0[a7:word32] = v75
	CVZN = cond(v75)
	call fn000060B0 (retsize: 4;)
	a7 = a7 + 12
	d5 = d0
	CVZN = cond(d5)
	goto l0000747C
	// succ:  l0000747C
l0000747A:
	d5 = 0
	CVZN = cond(d5)
	// succ:  l0000747C
l0000747C:
	d0 = -1
	CVZN = cond(d0)
	v49 = d5 - d0
	CVZN = cond(v49)
	branch Test(NE,Z) l0000748A
	// succ:  l00007482 l0000748A
l00007482:
	Z = __bset(Mem0[a3 + 27:byte], 0x0005, out Mem0[a3 + 27:byte])
	goto l00007496
	// succ:  l00007496
l0000748A:
	v55 = d5 - Mem0[a5 + -16:word32]
	CVZN = cond(v55)
	branch Test(EQ,Z) l00007496
	// succ:  l00007490 l00007496
l00007490:
	Z = __bset(Mem0[a3 + 27:byte], 0x0004, out Mem0[a3 + 27:byte])
	// succ:  l00007496
l00007496:
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000074A8
	// succ:  l0000749A l000074A8
l0000749A:
	d1 = Mem0[a3 + 20:word32]
	CVZN = cond(d1)
	d2 = d1
	CVZN = cond(d2)
	d2 = -d2
	CVZNX = cond(d2)
	v54 = d2
	Mem0[a3 + 12:word32] = v54
	CVZN = cond(v54)
	goto l000074C0
	// succ:  l000074C0
l000074A8:
	Z = __btst(Mem0[a3 + 27:byte], 0x0002)
	branch Test(EQ,Z) l000074B8
	// succ:  l000074B0 l000074B8
l000074B0:
	d1 = 0
	CVZN = cond(d1)
	v86 = d1
	Mem0[a3 + 12:word32] = v86
	CVZN = cond(v86)
	goto l000074C0
	// succ:  l000074C0
l000074B8:
	d1 = Mem0[a3 + 20:word32]
	CVZN = cond(d1)
	v90 = d1
	Mem0[a3 + 12:word32] = v90
	CVZN = cond(v90)
	// succ:  l000074C0
l000074C0:
	a0 = Mem0[a3 + 16:word32]
	v76 = a0
	Mem0[a3 + 4:word32] = v76
	CVZN = cond(v76)
	v77 = d7 - d0
	CVZN = cond(v77)
	branch Test(EQ,Z) l000074F6
	// succ:  l000074CC l000074F6
l000074CC:
	v78 = Mem0[a3 + 12:word32] - 0x00000001
	Mem0[a3 + 12:word32] = v78
	CVZNX = cond(v78)
	branch Test(LT,CZ) l000074E4
	// succ:  l000074D2 l000074E4
l000074D2:
	a0 = Mem0[a3 + 4:word32]
	v79 = Mem0[a3 + 4:word32] + 0x00000001
	Mem0[a3 + 4:word32] = v79
	CVZNX = cond(v79)
	d0 = d7
	CVZN = cond(d0)
	v80 = (byte) d0
	Mem0[a0:byte] = v80
	CVZN = cond(v80)
	d1 = 0
	CVZN = cond(d1)
	v81 = (byte) d0
	d1 = DPB(d1, v81, 0)
	CVZN = cond(v81)
	goto l000074F6
	// succ:  l000074F6
l000074E4:
	d0 = d7
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v82 = (byte) d0
	d1 = DPB(d1, v82, 0)
	CVZN = cond(v82)
	a7 = a7 - 0x00000004
	v83 = a3
	Mem0[a7:word32] = v83
	CVZN = cond(v83)
	a7 = a7 - 0x00000004
	v84 = d1
	Mem0[a7:word32] = v84
	CVZN = cond(v84)
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = d0
	CVZN = cond(d1)
	// succ:  l000074F6
l000074F6:
	d0 = 48
	CVZN = cond(d0)
	d0 = d0 & Mem0[a3 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00007502
	// succ:  l000074FE l00007502
l000074FE:
	d0 = -1
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l00007502:
	d0 = -1
	CVZN = cond(d0)
	v85 = d4 - d0
	CVZN = cond(v85)
	branch Test(NE,Z) l0000750C
	// succ:  l00007508 l0000750C
l00007508:
	d0 = 0
	CVZN = cond(d0)
	goto l0000750E
	// succ:  l0000750E
l0000750C:
	d0 = d4
	CVZN = cond(d0)
	// succ:  l0000750E
l0000750E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000728C_exit
fn0000728C_exit:


// fn00007698
// Return size: 4
void fn00007698()
fn00007698_entry:
	// succ:  l00007698
l00007698:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	d7 = Mem0[a7 + 16:word32]
	CVZN = cond(d7)
	d0 = Mem0[a4 + 7640:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	d6 = d0
	CVZN = cond(d6)
	// succ:  l000076A8
l000076A8:
	ZN = cond((word16) d6 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l000076DC
	// succ:  l000076AC l000076DC
l000076AC:
	d0 = d6
	CVZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	d5 = Mem0[a0 + d0:word32]
	CVZN = cond(d5)
	ZN = cond((byte) d5 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000076D8
	// succ:  l000076BE l000076D8
l000076BE:
	Z = __btst((byte) d5, 0x0004)
	branch Test(NE,Z) l000076D8
	// succ:  l000076C4 l000076D8
l000076C4:
	d0 = d6
	CVZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	v16 = Mem0[a0 + 4 + d0:word32]
	a7 = a7 - 0x00000004
	v17 = v16
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn00009084 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000076D8
l000076D8:
	v19 = (word16) d6 - 0x0001
	d6 = DPB(d6, v19, 0)
	CVZNX = cond(v19)
	goto l000076A8
	// succ:  l000076A8
l000076DC:
	a7 = a7 - 0x00000004
	v18 = d7
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn0000117C (retsize: 4;)
	a7 = a7 + 0x0004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007698_exit
fn00007698_exit:


// fn000076EC
// Return size: 4
void fn000076EC()
fn000076EC_entry:
	// succ:  l000076EC
l000076EC:
	a7 = fp
	a7 = Mem0[a4 + 8280:word32]
	call fn000090A8 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn00008A58 (retsize: 4;)
	v5 = (byte) d0 | 0x00
	d0 = DPB(d0, v5, 0)
	ZN = cond(v5)
	C = false
	V = false
	v9 = (byte) d0 | 0x00
	d0 = DPB(d0, v9, 0)
	ZN = cond(v9)
	C = false
	V = false
	d0 = 97
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	v13 = a3
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	a3 = Mem0[a4 + 18080:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l0000771A
	goto l00007714_thunk_fn00007716
	// succ:  l00007714_thunk_fn00007716 l00007714_thunk_fn0000771A
l000076EC:
l00007714_thunk_fn00007716:
	call fn00007716 (retsize: 0;)
	return
	// succ:  fn000076EC_exit
l00007714_thunk_fn0000771A:
	call fn0000771A (retsize: 0;)
	return
	// succ:  fn000076EC_exit
fn000076EC_exit:


// fn00007708
// Return size: 0
void fn00007708()
fn00007708_entry:
	// succ:  l00007708
l00007708:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	v5 = a3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a3 = Mem0[a4 + 18080:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00007714_thunk_fn0000771A
	// succ:  l00007714_thunk_fn00007716 l00007714_thunk_fn0000771A
l00007714_thunk_fn00007716:
	call fn00007716 (retsize: 0;)
	return
	// succ:  fn00007708_exit l00007714_thunk_fn00007716
l00007714_thunk_fn00007716:
	call fn00007716 (retsize: 0;)
	return
	// succ:  fn00007708_exit
l00007714_thunk_fn0000771A:
	call fn0000771A (retsize: 0;)
	return
	// succ:  fn00007708_exit
fn00007708_exit:


// fn00007716
// Return size: 0
void fn00007716()
fn00007716_entry:
	// succ:  l00007716
l00007716:
	a7 = v3
	a3 = 0x00007794
	// succ:  l00007716_thunk_fn0000771A
l00007716_thunk_fn0000771A:
	call fn0000771A (retsize: 0;)
	return
	// succ:  fn00007716_exit
fn00007716_exit:


// fn0000771A
// Return size: 0
void fn0000771A()
fn0000771A_entry:
	// succ:  l0000771A
l0000771A:
	a7 = v3
	v5 = Mem0[a3:byte]
	Mem0[a4 + 18296:byte] = v5
	CVZN = cond(v5)
	v8 = Mem0[a3 + 1:byte]
	Mem0[a4 + 18297:byte] = v8
	CVZN = cond(v8)
	v9 = Mem0[a3 + 2:byte]
	Mem0[a4 + 18298:byte] = v9
	CVZN = cond(v9)
	Mem0[a4 + 18299:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a0 = a4 + 18296
	v15 = a0
	Mem0[a4 + 18288:word32] = v15
	CVZN = cond(v15)
	a0 = a3 + 3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -8
	a7 = a7 - 0x00000004
	v17 = a0
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn00007D98 (retsize: 4;)
	a7 = a7 + 0x0008
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	a3 = a3 + d0
	d0 = Mem0[a5 + -8:word32]
	CVZN = cond(d0)
	d1 = 0x00000E10
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	v21 = d0
	Mem0[a4 + 18284:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a3:byte]
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	branch Test(EQ,Z) l0000777E
	// succ:  l00007760 l0000777E
l00007760:
	v23 = (byte) d0
	Mem0[a4 + 18300:byte] = v23
	CVZN = cond(v23)
	v24 = Mem0[a3 + 1:byte]
	Mem0[a4 + 18301:byte] = v24
	CVZN = cond(v24)
	v25 = Mem0[a3 + 2:byte]
	Mem0[a4 + 18302:byte] = v25
	CVZN = cond(v25)
	d0 = 0
	CVZN = cond(d0)
	v26 = (byte) d0
	Mem0[a4 + 18303:byte] = v26
	CVZN = cond(v26)
	d1 = 1
	CVZN = cond(d1)
	v27 = d1
	Mem0[a4 + 18280:word32] = v27
	CVZN = cond(v27)
	goto l00007786
	// succ:  l00007786
l0000777E:
	Mem0[a4 + 18300:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a4 + 18280:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00007786
l00007786:
	a0 = a4 + 18300
	v28 = a0
	Mem0[a4 + 18292:word32] = v28
	CVZN = cond(v28)
	v29 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v29
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000771A_exit
fn0000771A_exit:


// fn000077BC
// Return size: 4
void fn000077BC()
fn000077BC_entry:
	// succ:  l000077BC
l000077BC:
	a7 = fp
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v5 = (byte) d0 - 0x61
	CVZN = cond(v5)
	branch Test(LT,CZ) l000077D0
	// succ:  l000077C6 l000077D0
l000077C6:
	v7 = (byte) d0 - 0x7A
	CVZN = cond(v7)
	branch Test(GT,VZN) l000077D0
	// succ:  l000077CC l000077D0
l000077CC:
	v9 = (byte) d0 - 0x20
	d0 = DPB(d0, v9, 0)
	CVZNX = cond(v9)
	// succ:  l000077D0
l000077D0:
	return
	// succ:  fn000077BC_exit
fn000077BC_exit:


// fn000077D4
// Return size: 4
void fn000077D4()
fn000077D4_entry:
	// succ:  l000077D4
l000077D4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000010
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a3 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -8
	call fn00008518 (retsize: 4;)
	a7 = a7 + 0x0004
	d5 = 0
	CVZN = cond(d5)
	v10 = Mem0[a5 + -7:byte]
	d0 = DPB(d0, v10, 0)
	CVZN = cond(v10)
	d6 = d0
	CVZN = cond(d6)
	v11 = (byte) d6 + 0x0A
	d6 = DPB(d6, v11, 0)
	CVZNX = cond(v11)
	d7 = 0
	CVZN = cond(d7)
	// succ:  l000077F8
l000077F8:
	v13 = (byte) d7 - (byte) d6
	CVZN = cond(v13)
	branch Test(UGE,C) l0000781E
	// succ:  l000077FC l0000781E
l000077FC:
	d0 = 0
	CVZN = cond(d0)
	v15 = (byte) d7
	d0 = DPB(d0, v15, 0)
	CVZN = cond(v15)
	d0 = d0 + 0x00000002
	CVZNX = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007814
	// succ:  l0000780C l00007814
l0000780C:
	d5 = d5 + 0x0000016E
	CVZNX = cond(d5)
	goto l0000781A
	// succ:  l0000781A
l00007814:
	d5 = d5 + 0x0000016D
	CVZNX = cond(d5)
	// succ:  l0000781A
l0000781A:
	v27 = (byte) d7 + 0x01
	d7 = DPB(d7, v27, 0)
	CVZNX = cond(v27)
	goto l000077F8
	// succ:  l000077F8
l0000781E:
	d7 = 1
	CVZN = cond(d7)
	// succ:  l00007820
l00007820:
	v20 = Mem0[a5 + -6:byte]
	d0 = DPB(d0, v20, 0)
	CVZN = cond(v20)
	v21 = (byte) d7 - (byte) d0
	CVZN = cond(v21)
	branch Test(UGE,C) l0000783C
	// succ:  l00007828 l0000783C
l00007828:
	d0 = 0
	CVZN = cond(d0)
	v22 = (byte) d7
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	d1 = 0
	CVZN = cond(d1)
	a0 = a4 + 7775
	v25 = Mem0[a0 + d0:byte]
	d1 = DPB(d1, v25, 0)
	CVZN = cond(v25)
	d5 = d5 + d1
	CVZNX = cond(d5)
	v26 = (byte) d7 + 0x01
	d7 = DPB(d7, v26, 0)
	CVZNX = cond(v26)
	goto l00007820
	// succ:  l00007820
l0000783C:
	d0 = 0
	CVZN = cond(d0)
	v28 = (byte) d6
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	d0 = d0 + 0x00000002
	CVZNX = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007858
	// succ:  l0000784C l00007858
l0000784C:
	v29 = Mem0[a5 + -6:byte]
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d1 = 2
	CVZN = cond(d1)
	v30 = (byte) d0 - (byte) d1
	CVZN = cond(v30)
	branch Test(ULE,VZ) l00007858
	// succ:  l00007856 l00007858
l00007856:
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	// succ:  l00007858
l00007858:
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a5 + -5:byte]
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	d5 = d5 + d0
	CVZNX = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d1 = 24
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	d5 = d0
	CVZN = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v33 = Mem0[a5 + -4:byte]
	d0 = DPB(d0, v33, 0)
	CVZN = cond(v33)
	d5 = d5 + d0
	CVZNX = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	d5 = d0
	CVZN = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v34 = Mem0[a5 + -3:byte]
	d0 = DPB(d0, v34, 0)
	CVZN = cond(v34)
	d5 = d5 + d0
	CVZNX = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	d5 = d0
	CVZN = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v35 = Mem0[a5 + -2:byte]
	d0 = DPB(d0, v35, 0)
	CVZN = cond(v35)
	d5 = d5 + d0
	CVZNX = cond(d5)
	call fn00007708 (retsize: 4;)
	d5 = d5 + Mem0[a4 + 18284:word32]
	CVZNX = cond(d5)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000078A6
	// succ:  l000078A4 l000078A6
l000078A4:
	v36 = d5
	Mem0[a3:word32] = v36
	CVZN = cond(v36)
	// succ:  l000078A6
l000078A6:
	d0 = d5
	CVZN = cond(d0)
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000077D4_exit
fn000077D4_exit:


// fn000078D4
// Return size: 4
void fn000078D4()
fn000078D4_entry:
	// succ:  l000078D4
l000078D4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 16:word32]
	a2 = a3
	// succ:  l000078DE
l000078DE:
	v7 = Mem0[a2:byte]
	d0 = DPB(d0, v7, 0)
	CVZN = cond(v7)
	branch Test(EQ,Z) l00007906
	// succ:  l000078E2 l00007906
l000078E2:
	d1 = 0
	CVZN = cond(d1)
	v11 = (byte) d0
	d1 = DPB(d1, v11, 0)
	CVZN = cond(v11)
	a0 = a4 + 7953
	Z = __btst(Mem0[a0 + d1:byte], 0x0001)
	branch Test(EQ,Z) l000078FC
	// succ:  l000078F2 l000078FC
l000078F2:
	d1 = 0
	CVZN = cond(d1)
	v14 = (byte) d0
	d1 = DPB(d1, v14, 0)
	CVZN = cond(v14)
	d2 = 32
	CVZN = cond(d2)
	d1 = d1 - d2
	CVZNX = cond(d1)
	goto l00007900
	// succ:  l00007900
l000078FC:
	d1 = 0
	CVZN = cond(d1)
	v17 = (byte) d0
	d1 = DPB(d1, v17, 0)
	CVZN = cond(v17)
	// succ:  l00007900
l00007900:
	v16 = (byte) d1
	Mem0[a2:byte] = v16
	CVZN = cond(v16)
	a2 = a2 + 0x00000001
	goto l000078DE
	// succ:  l000078DE
l00007906:
	d0 = a3
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000078D4_exit
fn000078D4_exit:


// fn00007910
// Return size: 4
void fn00007910()
fn00007910_entry:
	// succ:  l00007910
l00007910:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000048
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000003F
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -72
	call fn00007A64 (retsize: 4;)
	a7 = a7 + 12
	Mem0[a5 + -9:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a0 = a5 + -72
	a1 = a0
	// succ:  l0000793C
l0000793C:
	v17 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	ZN = cond(v17 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000793C
	// succ:  l00007940 l0000793C
l00007940:
	a1 = a1 - 0x00000001
	a1 = a1 - a0
	CVZNX = cond(a1)
	d7 = a1
	CVZN = cond(d7)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000794E
	// succ:  l0000794A l0000794E
l0000794A:
	d0 = 0
	CVZN = cond(d0)
	v21 = (byte) d0
	Mem0[a2:byte] = v21
	CVZN = cond(v21)
	// succ:  l0000794E
l0000794E:
	ZN = cond(Mem0[a5 + 16:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000795C
	// succ:  l00007954 l0000795C
l00007954:
	d0 = 0
	CVZN = cond(d0)
	a0 = Mem0[a5 + 16:word32]
	v22 = (byte) d0
	Mem0[a0:byte] = v22
	CVZN = cond(v22)
	// succ:  l0000795C
l0000795C:
	ZN = cond(Mem0[a5 + 20:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000796A
	// succ:  l00007962 l0000796A
l00007962:
	d0 = 0
	CVZN = cond(d0)
	a0 = Mem0[a5 + 20:word32]
	v23 = (byte) d0
	Mem0[a0:byte] = v23
	CVZN = cond(v23)
	// succ:  l0000796A
l0000796A:
	ZN = cond(Mem0[a5 + 24:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00007976
	// succ:  l00007970 l00007976
l00007970:
	a0 = Mem0[a5 + 24:word32]
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00007976
l00007976:
	d6 = d7
	CVZN = cond(d6)
	// succ:  l00007978
l00007978:
	d0 = d6
	CVZN = cond(d0)
	d6 = d6 - 0x00000001
	CVZNX = cond(d6)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l000079B2
	// succ:  l00007980 l000079B2
l00007980:
	d0 = 0
	CVZN = cond(d0)
	v26 = Mem0[a5 + -72 + d6:byte]
	d0 = DPB(d0, v26, 0)
	CVZN = cond(v26)
	v27 = (word16) d0 - 0x002E
	d0 = DPB(d0, v27, 0)
	CVZNX = cond(v27)
	branch Test(EQ,Z) l00007998
	// succ:  l0000798C l00007998
l0000798C:
	v28 = (word16) d0 - 0x0001
	d0 = DPB(d0, v28, 0)
	CVZNX = cond(v28)
	branch Test(EQ,Z) l000079B0
	// succ:  l00007990 l000079B0
l00007990:
	v29 = (word16) d0 - 0x000B
	d0 = DPB(d0, v29, 0)
	CVZNX = cond(v29)
	branch Test(EQ,Z) l000079B0
	// succ:  l00007996 l000079B0
l00007996:
	goto l00007978
	// succ:  l00007978
l00007998:
	d0 = Mem0[a5 + 24:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000079AA
	// succ:  l0000799E l000079AA
l0000799E:
	a0 = a5 + -71
	a0 = a0 + d6
	a1 = d0
	// succ:  l000079A6
l000079A6:
	v35 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v36 = v35
	Mem0[a1:byte] = v36
	a1 = a1 + 0x00000001
	CVZN = cond(v36)
	branch Test(NE,Z) l000079A6
	// succ:  l000079AA l000079A6
l000079AA:
	Mem0[a5 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	goto l000079B2
	// succ:  l000079B2
l000079B0:
	d6 = d7
	CVZN = cond(d6)
	// succ:  l000079B2
l000079B2:
	d0 = d6
	CVZN = cond(d0)
	d6 = d6 - 0x00000001
	CVZNX = cond(d6)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l000079FC
	// succ:  l000079BA l000079FC
l000079BA:
	d0 = 0
	CVZN = cond(d0)
	v30 = Mem0[a5 + -72 + d6:byte]
	d0 = DPB(d0, v30, 0)
	CVZN = cond(v30)
	v31 = (word16) d0 - 0x002F
	d0 = DPB(d0, v31, 0)
	CVZNX = cond(v31)
	branch Test(EQ,Z) l000079E6
	// succ:  l000079C6 l000079E6
l000079C6:
	v32 = (word16) d0 - 0x000B
	d0 = DPB(d0, v32, 0)
	CVZNX = cond(v32)
	branch Test(NE,Z) l000079B2
	// succ:  l000079CC l000079B2
l000079CC:
	d0 = Mem0[a5 + 20:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000079DE
	// succ:  l000079D2 l000079DE
l000079D2:
	a0 = a5 + -71
	a0 = a0 + d6
	a1 = d0
	// succ:  l000079DA
l000079DA:
	v33 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v34 = v33
	Mem0[a1:byte] = v34
	a1 = a1 + 0x00000001
	CVZN = cond(v34)
	branch Test(NE,Z) l000079DA
	// succ:  l000079DE l000079DA
l000079DE:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	Mem0[a5 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	goto l000079FC
	// succ:  l000079FC
l000079E6:
	d0 = Mem0[a5 + 20:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000079F8
	// succ:  l000079EC l000079F8
l000079EC:
	a0 = a5 + -71
	a0 = a0 + d6
	a1 = d0
	// succ:  l000079F4
l000079F4:
	v47 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v48 = v47
	Mem0[a1:byte] = v48
	a1 = a1 + 0x00000001
	CVZN = cond(v48)
	branch Test(NE,Z) l000079F4
	// succ:  l000079F8 l000079F4
l000079F8:
	Mem0[a5 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000079FC
l000079FC:
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00007A12
	// succ:  l00007A00 l00007A12
l00007A00:
	d0 = Mem0[a5 + 20:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007A5C
	// succ:  l00007A06 l00007A5C
l00007A06:
	a0 = a5 + -72
	a1 = d0
	// succ:  l00007A0C
l00007A0C:
	v37 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v38 = v37
	Mem0[a1:byte] = v38
	a1 = a1 + 0x00000001
	CVZN = cond(v38)
	branch Test(NE,Z) l00007A0C
	// succ:  l00007A10 l00007A0C
l00007A10:
	goto l00007A5C
	// succ:  l00007A5C
l00007A12:
	d0 = d6
	CVZN = cond(d0)
	d6 = d6 - 0x00000001
	CVZNX = cond(d6)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l00007A4C
	// succ:  l00007A1A l00007A4C
l00007A1A:
	d0 = 0
	CVZN = cond(d0)
	v39 = Mem0[a5 + -72 + d6:byte]
	d0 = DPB(d0, v39, 0)
	CVZN = cond(v39)
	v40 = (word16) d0 - 0x003A
	d0 = DPB(d0, v40, 0)
	CVZNX = cond(v40)
	branch Test(NE,Z) l00007A12
	// succ:  l00007A26 l00007A12
l00007A26:
	d0 = Mem0[a5 + 16:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007A38
	// succ:  l00007A2C l00007A38
l00007A2C:
	a0 = a5 + -71
	a0 = a0 + d6
	a1 = d0
	// succ:  l00007A34
l00007A34:
	v41 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v42 = v41
	Mem0[a1:byte] = v42
	a1 = a1 + 0x00000001
	CVZN = cond(v42)
	branch Test(NE,Z) l00007A34
	// succ:  l00007A38 l00007A34
l00007A38:
	Mem0[a5 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007A5C
	// succ:  l00007A40 l00007A5C
l00007A40:
	a0 = a5 + -72
	a1 = a2
	// succ:  l00007A46
l00007A46:
	v43 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v44 = v43
	Mem0[a1:byte] = v44
	a1 = a1 + 0x00000001
	CVZN = cond(v44)
	branch Test(NE,Z) l00007A46
	// succ:  l00007A4A l00007A46
l00007A4A:
	goto l00007A5C
	// succ:  l00007A5C
l00007A4C:
	d0 = Mem0[a5 + 16:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007A5C
	// succ:  l00007A52 l00007A5C
l00007A52:
	a0 = a5 + -72
	a1 = d0
	// succ:  l00007A58
l00007A58:
	v45 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v46 = v45
	Mem0[a1:byte] = v46
	a1 = a1 + 0x00000001
	CVZN = cond(v46)
	branch Test(NE,Z) l00007A58
	// succ:  l00007A5C l00007A58
l00007A5C:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007910_exit fn00007910_exit
fn00007910_exit:


// fn00007A64
// Return size: 4
void fn00007A64()
fn00007A64_entry:
	// succ:  l00007A64
l00007A64:
	a7 = fp
	a1 = Mem0[a7 + 8:word32]
	a0 = Mem0[a7 + 4:word32]
	d0 = Mem0[a7 + 12:word32]
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	goto l00007A78
	// succ:  l00007A78
l00007A74:
	v10 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	v11 = v10
	Mem0[a0:byte] = v11
	a0 = a0 + 0x00000001
	CVZN = cond(v11)
	branch Test(EQ,Z) l00007A80
	// succ:  l00007A78 l00007A80
l00007A78:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l00007A74
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l00007A74
	// succ:  l00007A7C l00007A74
l00007A7C:
	goto l00007A84
	// succ:  l00007A84
l00007A7E:
	Mem0[a0:byte] = 0x00
	a0 = a0 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00007A80
l00007A80:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l00007A7E
	// succ:  l00007A84 l00007A7E
l00007A84:
	d0 = d1
	CVZN = cond(d0)
	return
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn00007A64_exit fn00007A64_exit
fn00007A64_exit:


// fn00007A88
// Return size: 4
void fn00007A88()
fn00007A88_entry:
	// succ:  l00007A88
l00007A88:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a7 + 20:word32]
	a2 = Mem0[a7 + 24:word32]
	d7 = Mem0[a7 + 28:word32]
	CVZN = cond(d7)
	// succ:  l00007A98
l00007A98:
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00007ABC
	// succ:  l00007A9C l00007ABC
l00007A9C:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007ABC
	// succ:  l00007AA0 l00007ABC
l00007AA0:
	ZN = cond(Mem0[a2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007ABC
	// succ:  l00007AA4 l00007ABC
l00007AA4:
	d0 = 0
	CVZN = cond(d0)
	v13 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v13, 0)
	CVZN = cond(v13)
	d1 = 0
	CVZN = cond(d1)
	v15 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v15, 0)
	CVZN = cond(v15)
	d0 = d0 - d1
	CVZNX = cond(d0)
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00007AB8
	// succ:  l00007AB4 l00007AB8
l00007AB4:
	d0 = d6
	CVZN = cond(d0)
	goto l00007AD2
	// succ:  l00007AD2
l00007AB8:
	d7 = d7 - 0x00000001
	CVZNX = cond(d7)
	goto l00007A98
	// succ:  l00007A98
l00007ABC:
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00007AD0
	// succ:  l00007AC0 l00007AD0
l00007AC0:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007AC8
	// succ:  l00007AC4 l00007AC8
l00007AC4:
	d0 = 1
	CVZN = cond(d0)
	goto l00007AD2
	// succ:  l00007AD2
l00007AC8:
	ZN = cond(Mem0[a2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007AD0
	// succ:  l00007ACC l00007AD0
l00007ACC:
	d0 = -1
	CVZN = cond(d0)
	goto l00007AD2
	// succ:  l00007AD2
l00007AD0:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00007AD2
l00007AD2:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007A88_exit
fn00007A88_exit:


// fn00007AD8
// Return size: 4
void fn00007AD8()
fn00007AD8_entry:
	// succ:  l00007AD8
l00007AD8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	d7 = Mem0[a5 + 16:word32]
	CVZN = cond(d7)
	a0 = a2
	// succ:  l00007AEE
l00007AEE:
	v10 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v10 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00007AEE
	// succ:  l00007AF2 l00007AEE
l00007AF2:
	a0 = a0 - 0x00000001
	a0 = a0 - a2
	CVZNX = cond(a0)
	d6 = a0
	CVZN = cond(d6)
	a0 = a3
	// succ:  l00007AFA
l00007AFA:
	v16 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v16 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00007AFA
	// succ:  l00007AFE l00007AFA
l00007AFE:
	a0 = a0 - 0x00000001
	a0 = a0 - a3
	CVZNX = cond(a0)
	d0 = a0
	CVZN = cond(d0)
	a1 = a3
	a1 = a1 + d0
	v19 = a1
	Mem0[a5 + -8:word32] = v19
	CVZN = cond(v19)
	v20 = d6 - d7
	CVZN = cond(v20)
	branch Test(ULE,VZ) l00007B12
	// succ:  l00007B10 l00007B12
l00007B10:
	d6 = d7
	CVZN = cond(d6)
	// succ:  l00007B12
l00007B12:
	d0 = d6
	CVZN = cond(d0)
	a0 = a2
	goto l00007B1A
	// succ:  l00007B1A
l00007B18:
	v23 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v24 = v23
	Mem0[a1:byte] = v24
	a1 = a1 + 0x00000001
	CVZN = cond(v24)
	// succ:  l00007B1A
l00007B1A:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l00007B18
	// succ:  l00007B1E l00007B18
l00007B1E:
	a0 = Mem0[a5 + -8:word32]
	Mem0[a0 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = a3
	CVZN = cond(d0)
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007AD8_exit
fn00007AD8_exit:


// fn00007B30
// Return size: 4
void fn00007B30()
fn00007B30_entry:
	// succ:  l00007B30
l00007B30:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 16:word32]
	a2 = a3
	// succ:  l00007B3A
l00007B3A:
	v7 = Mem0[a2:byte]
	d0 = DPB(d0, v7, 0)
	CVZN = cond(v7)
	branch Test(EQ,Z) l00007B62
	// succ:  l00007B3E l00007B62
l00007B3E:
	d1 = 0
	CVZN = cond(d1)
	v11 = (byte) d0
	d1 = DPB(d1, v11, 0)
	CVZN = cond(v11)
	a0 = a4 + 7953
	Z = __btst(Mem0[a0 + d1:byte], 0x0000)
	branch Test(EQ,Z) l00007B58
	// succ:  l00007B4E l00007B58
l00007B4E:
	d1 = 0
	CVZN = cond(d1)
	v14 = (byte) d0
	d1 = DPB(d1, v14, 0)
	CVZN = cond(v14)
	d2 = 32
	CVZN = cond(d2)
	d1 = d1 + d2
	CVZNX = cond(d1)
	goto l00007B5C
	// succ:  l00007B5C
l00007B58:
	d1 = 0
	CVZN = cond(d1)
	v17 = (byte) d0
	d1 = DPB(d1, v17, 0)
	CVZN = cond(v17)
	// succ:  l00007B5C
l00007B5C:
	v16 = (byte) d1
	Mem0[a2:byte] = v16
	CVZN = cond(v16)
	a2 = a2 + 0x00000001
	goto l00007B3A
	// succ:  l00007B3A
l00007B62:
	d0 = a3
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007B30_exit
fn00007B30_exit:


// fn00007B74
// Return size: 4
void fn00007B74()
fn00007B74_entry:
	// succ:  l00007B74
l00007B74:
	a7 = fp
	a1 = Mem0[a7 + 8:word32]
	a0 = Mem0[a7 + 4:word32]
	d0 = a0
	CVZN = cond(d0)
	// succ:  l00007B7E
l00007B7E:
	v7 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00007B7E
	// succ:  l00007B82 l00007B7E
l00007B82:
	a0 = a0 - 0x00000001
	// succ:  l00007B84
l00007B84:
	v12 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	v13 = v12
	Mem0[a0:byte] = v13
	a0 = a0 + 0x00000001
	CVZN = cond(v13)
	branch Test(NE,Z) l00007B84
	// succ:  l00007B88 l00007B84
l00007B88:
	return
	// succ:  fn00007B74_exit
fn00007B74_exit:


// fn00007BCC
// Return size: 4
void fn00007BCC()
fn00007BCC_entry:
	// succ:  l00007BCC
l00007BCC:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a7 + 16:word32]
	d7 = Mem0[a7 + 20:word32]
	CVZN = cond(d7)
	a2 = a2 - a2
	CVZNX = cond(a2)
	// succ:  l00007BDA
l00007BDA:
	v9 = Mem0[a3:byte]
	d0 = DPB(d0, v9, 0)
	CVZN = cond(v9)
	branch Test(EQ,Z) l00007BEC
	// succ:  l00007BDE l00007BEC
l00007BDE:
	d1 = 0
	CVZN = cond(d1)
	v12 = (byte) d0
	d1 = DPB(d1, v12, 0)
	CVZN = cond(v12)
	v13 = d1 - d7
	CVZN = cond(v13)
	branch Test(NE,Z) l00007BE8
	// succ:  l00007BE6 l00007BE8
l00007BE6:
	a2 = a3
	// succ:  l00007BE8
l00007BE8:
	a3 = a3 + 0x00000001
	goto l00007BDA
	// succ:  l00007BDA
l00007BEC:
	d0 = a2
	CVZN = cond(d0)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007BCC_exit
fn00007BCC_exit:


// fn00007BF4
// Return size: 4
void fn00007BF4()
fn00007BF4_entry:
	// succ:  l00007BF4
l00007BF4:
	a7 = fp
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	a0 = Mem0[a7 + 4:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000000C
	a1 = a7
	// succ:  l00007C02
l00007C02:
	d1 = 10
	CVZN = cond(d1)
	call fn000091A6 (retsize: 4;)
	v9 = (word16) d1 + 0x0030
	d1 = DPB(d1, v9, 0)
	CVZNX = cond(v9)
	v11 = (byte) d1
	Mem0[a1:byte] = v11
	a1 = a1 + 0x00000001
	CVZN = cond(v11)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007C02
	// succ:  l00007C12 l00007C02
l00007C12:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l00007C14
l00007C14:
	a1 = a1 - 0x00000001
	v16 = Mem0[a1:byte]
	Mem0[a0:byte] = v16
	a0 = a0 + 0x00000001
	CVZN = cond(v16)
	v17 = a7 - a1
	CVZN = cond(v17)
	branch Test(NE,Z) l00007C14
	// succ:  l00007C1A l00007C14
l00007C1A:
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - a7
	CVZNX = cond(d0)
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007BF4_exit
fn00007BF4_exit:


// fn00007C24
// Return size: 4
void fn00007C24()
fn00007C24_entry:
	// succ:  l00007C24
l00007C24:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	v7 = a3
	Mem0[a5 + -4:word32] = v7
	CVZN = cond(v7)
	// succ:  l00007C38
l00007C38:
	v9 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v9, 0)
	CVZN = cond(v9)
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007C76
	// succ:  l00007C3E l00007C76
l00007C3E:
	d0 = 0
	CVZN = cond(d0)
	v15 = (byte) d7
	d0 = DPB(d0, v15, 0)
	CVZN = cond(v15)
	v16 = (word16) d0 - 0x002A
	d0 = DPB(d0, v16, 0)
	CVZNX = cond(v16)
	branch Test(EQ,Z) l00007C58
	// succ:  l00007C48 l00007C58
l00007C48:
	v18 = (word16) d0 - 0x0015
	d0 = DPB(d0, v18, 0)
	CVZNX = cond(v18)
	branch Test(NE,Z) l00007C6C
	// succ:  l00007C4E l00007C6C
l00007C4E:
	v19 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v19, 0)
	CVZN = cond(v19)
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00007C38
	// succ:  l00007C54 l00007C38
l00007C54:
	d0 = 0
	CVZN = cond(d0)
	goto l00007C84
	// succ:  l00007C84
l00007C58:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007C38
	// succ:  l00007C5C l00007C38
l00007C5C:
	a7 = a7 - 0x00000004
	v22 = a2
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	a7 = a7 - 0x00000004
	v23 = a3
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	call fn00007C24 (retsize: 4;)
	a7 = a7 + 0x0008
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007C38
	// succ:  l00007C68 l00007C38
l00007C68:
	a3 = a3 + 0x00000001
	goto l00007C58
	// succ:  l00007C58
l00007C6C:
	v20 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v20, 0)
	CVZN = cond(v20)
	v21 = (byte) d7 - (byte) d0
	CVZN = cond(v21)
	branch Test(EQ,Z) l00007C38
	// succ:  l00007C72 l00007C38
l00007C72:
	d0 = 0
	CVZN = cond(d0)
	goto l00007C84
	// succ:  l00007C84
l00007C76:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00007C7E
	// succ:  l00007C7A l00007C7E
l00007C7A:
	d0 = 0
	CVZN = cond(d0)
	goto l00007C84
	// succ:  l00007C84
l00007C7E:
	d0 = a3
	CVZN = cond(d0)
	d0 = d0 - Mem0[a5 + -4:word32]
	CVZNX = cond(d0)
	// succ:  l00007C84
l00007C84:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007C24_exit
fn00007C24_exit:


// fn00007C8C
// Return size: 4
void fn00007C8C()
fn00007C8C_entry:
	// succ:  l00007C8C
l00007C8C:
	a7 = fp
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	a0 = Mem0[a7 + 4:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000000C
	a1 = a7
	// succ:  l00007C9A
l00007C9A:
	d1 = d0
	CVZN = cond(d1)
	v9 = (word16) d1 & 0x0007
	d1 = DPB(d1, v9, 0)
	ZN = cond(v9)
	C = false
	V = false
	v13 = (word16) d1 + 0x0030
	d1 = DPB(d1, v13, 0)
	CVZNX = cond(v13)
	v15 = (byte) d1
	Mem0[a1:byte] = v15
	a1 = a1 + 0x00000001
	CVZN = cond(v15)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	branch Test(NE,Z) l00007C9A
	// succ:  l00007CAA l00007C9A
l00007CAA:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l00007CAC
l00007CAC:
	a1 = a1 - 0x00000001
	v17 = Mem0[a1:byte]
	Mem0[a0:byte] = v17
	a0 = a0 + 0x00000001
	CVZN = cond(v17)
	v18 = a7 - a1
	CVZN = cond(v18)
	branch Test(NE,Z) l00007CAC
	// succ:  l00007CB2 l00007CAC
l00007CB2:
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - a7
	CVZNX = cond(d0)
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007C8C_exit
fn00007C8C_exit:


// fn00007CCC
// Return size: 4
void fn00007CCC()
fn00007CCC_entry:
	// succ:  l00007CCC
l00007CCC:
	a7 = fp
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	a0 = Mem0[a7 + 4:word32]
	a1 = a7 + 4
	// succ:  l00007CD8
l00007CD8:
	v8 = (word16) d0
	d1 = DPB(d1, v8, 0)
	CVZN = cond(v8)
	v9 = (word16) d1 & 0x000F
	d1 = DPB(d1, v9, 0)
	ZN = cond(v9)
	C = false
	V = false
	v13 = Mem0[0x00007CBC + (int32) ((int16) d1):byte]
	Mem0[a1:byte] = v13
	a1 = a1 + 0x00000001
	CVZN = cond(v13)
	d0 = d0 >>u 0x00000004
	CVZNX = cond(d0)
	branch Test(NE,Z) l00007CD8
	// succ:  l00007CE6 l00007CD8
l00007CE6:
	d0 = a1
	CVZN = cond(d0)
	d1 = a7
	CVZN = cond(d1)
	d1 = d1 + 0x00000004
	CVZNX = cond(d1)
	// succ:  l00007CEC
l00007CEC:
	a1 = a1 - 0x00000001
	v16 = Mem0[a1:byte]
	Mem0[a0:byte] = v16
	a0 = a0 + 0x00000001
	CVZN = cond(v16)
	v17 = d1 - a1
	CVZN = cond(v17)
	branch Test(NE,Z) l00007CEC
	// succ:  l00007CF2 l00007CEC
l00007CF2:
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	return
	// succ:  fn00007CCC_exit
fn00007CCC_exit:


// fn00007CF8
// Return size: 4
void fn00007CF8()
fn00007CF8_entry:
	// succ:  l00007CF8
l00007CF8:
	a7 = fp
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	a0 = Mem0[a7 + 4:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000000C
	a1 = a7
	branch Test(GE,VN) l00007D0E
	// succ:  l00007D08 l00007D0E
l00007D08:
	v9 = 0x2D
	Mem0[a0:byte] = v9
	a0 = a0 + 0x00000001
	CVZN = cond(v9)
	d0 = -d0
	CVZNX = cond(d0)
	// succ:  l00007D0E
l00007D0E:
	d1 = 10
	CVZN = cond(d1)
	call fn000091A6 (retsize: 4;)
	v12 = (word16) d1 + 0x0030
	d1 = DPB(d1, v12, 0)
	CVZNX = cond(v12)
	v13 = (byte) d1
	Mem0[a1:byte] = v13
	a1 = a1 + 0x00000001
	CVZN = cond(v13)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007D0E
	// succ:  l00007D1E l00007D0E
l00007D1E:
	a1 = a1 - 0x00000001
	v18 = Mem0[a1:byte]
	Mem0[a0:byte] = v18
	a0 = a0 + 0x00000001
	CVZN = cond(v18)
	v19 = a7 - a1
	CVZN = cond(v19)
	branch Test(NE,Z) l00007D1E
	// succ:  l00007D24 l00007D1E
l00007D24:
	Mem0[a0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = a0
	CVZN = cond(d0)
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = d0 - Mem0[a7 + 4:word32]
	CVZNX = cond(d0)
	return
	// succ:  fn00007CF8_exit
fn00007CF8_exit:


// fn00007D30
// Return size: 4
void fn00007D30()
fn00007D30_entry:
	// succ:  l00007D30
l00007D30:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a5 + 8:word32]
	a0 = Mem0[a5 + 12:word32]
	// succ:  l00007D40
l00007D40:
	v8 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v8 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00007D40
	// succ:  l00007D44 l00007D40
l00007D44:
	a0 = a0 - 0x00000001
	a0 = a0 - Mem0[a5 + 12:word32]
	CVZNX = cond(a0)
	d7 = a0
	CVZN = cond(d7)
	a0 = Mem0[a5 + 12:word32]
	a0 = a0 + d7
	a2 = a0
	// succ:  l00007D54
l00007D54:
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l00007D8A
	// succ:  l00007D58 l00007D8A
l00007D58:
	a2 = a2 - 0x00000001
	d0 = 0
	CVZN = cond(d0)
	v17 = Mem0[a2:byte]
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	v18 = (word16) d0 - 0x002F
	d0 = DPB(d0, v18, 0)
	CVZNX = cond(v18)
	branch Test(EQ,Z) l00007D6C
	// succ:  l00007D64 l00007D6C
l00007D64:
	v19 = (word16) d0 - 0x000B
	d0 = DPB(d0, v19, 0)
	CVZNX = cond(v19)
	branch Test(EQ,Z) l00007D6E
	// succ:  l00007D6A l00007D6E
l00007D6A:
	goto l00007D86
	// succ:  l00007D86
l00007D6C:
	d7 = d7 - 0x00000001
	CVZNX = cond(d7)
	// succ:  l00007D6E
l00007D6E:
	d0 = d7
	CVZN = cond(d0)
	a0 = Mem0[a5 + 12:word32]
	a1 = a3
	goto l00007D7A
	// succ:  l00007D7A
l00007D78:
	v23 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v24 = v23
	Mem0[a1:byte] = v24
	a1 = a1 + 0x00000001
	CVZN = cond(v24)
	// succ:  l00007D7A
l00007D7A:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l00007D78
	// succ:  l00007D7E l00007D78
l00007D7E:
	Mem0[a3 + d7:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = d7
	CVZN = cond(d0)
	goto l00007D8E
	// succ:  l00007D8E
l00007D86:
	d7 = d7 - 0x00000001
	CVZNX = cond(d7)
	goto l00007D54
	// succ:  l00007D54
l00007D8A:
	Mem0[a3:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00007D8E
l00007D8E:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007D30_exit
fn00007D30_exit:


// fn00007D98
// Return size: 4
void fn00007D98()
fn00007D98_entry:
	// succ:  l00007D98
l00007D98:
	a7 = fp
	a0 = Mem0[a7 + 4:word32]
	a1 = a0
	d1 = 0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v9 = d2
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	v10 = Mem0[a0:byte] - 0x2B
	CVZN = cond(v10)
	branch Test(EQ,Z) l00007DB0
	// succ:  l00007DAA l00007DB0
l00007DAA:
	v12 = Mem0[a0:byte] - 0x2D
	CVZN = cond(v12)
	branch Test(NE,Z) l00007DB2
	// succ:  l00007DB0 l00007DB2
l00007DB0:
	a0 = a0 + 0x0001
	// succ:  l00007DB2
l00007DB2:
	v13 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v13, 0)
	CVZN = cond(v13)
	v14 = (byte) d0 - 0x30
	d0 = DPB(d0, v14, 0)
	CVZNX = cond(v14)
	branch Test(LT,CZ) l00007DCC
	// succ:  l00007DBA l00007DCC
l00007DBA:
	v17 = (byte) d0 - 0x09
	CVZN = cond(v17)
	branch Test(GT,VZN) l00007DCC
	// succ:  l00007DC0 l00007DCC
l00007DC0:
	d2 = d1
	CVZN = cond(d2)
	d1 = d1 << 0x00000002
	CVZNX = cond(d1)
	d1 = d1 + d2
	CVZNX = cond(d1)
	d1 = d1 + d1
	CVZNX = cond(d1)
	d1 = d1 + d0
	CVZNX = cond(d1)
	goto l00007DB2
	// succ:  l00007DB2
l00007DCC:
	v19 = Mem0[a1:byte] - 0x2D
	CVZN = cond(v19)
	branch Test(NE,Z) l00007DD4
	// succ:  l00007DD2 l00007DD4
l00007DD2:
	d1 = -d1
	CVZNX = cond(d1)
	// succ:  l00007DD4
l00007DD4:
	v20 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v20
	CVZN = cond(d2)
	d0 = a0
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	a0 = Mem0[a7 + 8:word32]
	v21 = d1
	Mem0[a0:word32] = v21
	CVZN = cond(v21)
	d0 = d0 - a1
	CVZNX = cond(d0)
	return
	// succ:  fn00007D98_exit
fn00007D98_exit:


// fn00007E4C
// Return size: 4
void fn00007E4C()
fn00007E4C_entry:
	// succ:  l00007E4C
l00007E4C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000018
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a5 + 12:word32]
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(GT,VZN) l00007E62
	// succ:  l00007E5C l00007E62
l00007E5C:
	d0 = -1
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007E62:
	d0 = 8
	CVZN = cond(d0)
	v14 = d7 - d0
	CVZN = cond(v14)
	branch Test(UGE,C) l00007E6A
	// succ:  l00007E68 l00007E6A
l00007E68:
	d7 = d0
	CVZN = cond(d7)
	// succ:  l00007E6A
l00007E6A:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d7 = d0
	CVZN = cond(d7)
	v16 = (word16) d7 & 0xFFFC
	d7 = DPB(d7, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	a2 = Mem0[a5 + 8:word32]
	d0 = Mem0[a5 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	v18 = Mem0[a4 + 7660:word32] + d7
	Mem0[a4 + 7660:word32] = v18
	CVZNX = cond(v18)
	a0 = a4 + 7656
	a3 = Mem0[a0:word32]
	v20 = d0
	Mem0[a5 + -16:word32] = v20
	CVZN = cond(v20)
	v21 = a0
	Mem0[a5 + -12:word32] = v21
	CVZN = cond(v21)
	// succ:  l00007E90
l00007E90:
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007F24
	// succ:  l00007E96 l00007F24
l00007E96:
	a0 = a3
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	a0 = a0 + d0
	v23 = a5 + -20
	d7 = Mem0[v23:word32]
	v23 = v23 + 0x00000004
	a1 = Mem0[a5 + -16:word32]
	v25 = a3 - a1
	CVZN = cond(v25)
	branch Test(ULE,VZ) l00007EBC
	// succ:  l00007EAC l00007EBC
l00007EAC:
	v27 = a3
	Mem0[a2:word32] = v27
	CVZN = cond(v27)
	v28 = d7
	Mem0[a2 + 4:word32] = v28
	CVZN = cond(v28)
	a6 = Mem0[a5 + -12:word32]
	v29 = a2
	Mem0[a6:word32] = v29
	CVZN = cond(v29)
	d0 = 0
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007EBC:
	v34 = a3 - a1
	CVZN = cond(v34)
	branch Test(NE,Z) l00007EDA
	// succ:  l00007EC0 l00007EDA
l00007EC0:
	a6 = Mem0[a3:word32]
	v35 = a6
	Mem0[a2:word32] = v35
	CVZN = cond(v35)
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	d1 = d1 + d7
	CVZNX = cond(d1)
	v37 = d1
	Mem0[a2 + 4:word32] = v37
	CVZN = cond(v37)
	a6 = Mem0[a5 + -12:word32]
	v38 = a2
	Mem0[a6:word32] = v38
	CVZN = cond(v38)
	d0 = 0
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007EDA:
	v39 = a2 - a0
	CVZN = cond(v39)
	branch Test(UGE,C) l00007EE6
	// succ:  l00007EDE l00007EE6
l00007EDE:
	v40 = Mem0[a4 + 7660:word32] - d7
	Mem0[a4 + 7660:word32] = v40
	CVZNX = cond(v40)
	d0 = -1
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007EE6:
	v41 = a2 - a0
	CVZN = cond(v41)
	branch Test(NE,Z) l00007F14
	// succ:  l00007EEA l00007F14
l00007EEA:
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007EFA
	// succ:  l00007EEE l00007EFA
l00007EEE:
	v42 = a1 - d0
	CVZN = cond(v42)
	branch Test(ULE,VZ) l00007EFA
	// succ:  l00007EF2 l00007EFA
l00007EF2:
	v43 = Mem0[a4 + 7660:word32] - d7
	Mem0[a4 + 7660:word32] = v43
	CVZNX = cond(v43)
	d0 = -1
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007EFA:
	v46 = Mem0[a3 + 4:word32] + d7
	Mem0[a3 + 4:word32] = v46
	CVZNX = cond(v46)
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00007F10
	// succ:  l00007F02 l00007F10
l00007F02:
	v47 = a1 - d0
	CVZN = cond(v47)
	branch Test(NE,Z) l00007F10
	// succ:  l00007F06 l00007F10
l00007F06:
	d0 = Mem0[a1 + 4:word32]
	CVZN = cond(d0)
	v48 = Mem0[a3 + 4:word32] + d0
	Mem0[a3 + 4:word32] = v48
	CVZNX = cond(v48)
	v49 = Mem0[a1:word32]
	Mem0[a3:word32] = v49
	CVZN = cond(v49)
	// succ:  l00007F10
l00007F10:
	d0 = 0
	CVZN = cond(d0)
	goto l00007F32
	// succ:  l00007F32
l00007F14:
	v44 = a3
	Mem0[a5 + -12:word32] = v44
	CVZN = cond(v44)
	v45 = Mem0[a5 + -20:word32]
	Mem0[a5 + -24:word32] = v45
	CVZN = cond(v45)
	a3 = Mem0[a3:word32]
	goto l00007E90
	// succ:  l00007E90
l00007F24:
	a0 = Mem0[a5 + -12:word32]
	v30 = a2
	Mem0[a0:word32] = v30
	CVZN = cond(v30)
	Mem0[a2:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v33 = d7
	Mem0[a2 + 4:word32] = v33
	CVZN = cond(v33)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00007F32
l00007F32:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007E4C_exit
fn00007E4C_exit:


// fn00007F3C
// Return size: 4
void fn00007F3C()
fn00007F3C_entry:
	// succ:  l00007F3C
l00007F3C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 20:word32]
	a2 = Mem0[a7 + 24:word32]
	d1 = a3
	CVZN = cond(d1)
	d2 = a2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	InitStruct(a1, a2, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007F6A
	// succ:  l00007F58 l00007F6A
l00007F58:
	Forbid()
	v16 = d0
	Mem0[a4 + 8240:word32] = v16
	CVZN = cond(v16)
	d0 = 5
	CVZN = cond(d0)
	v17 = d0
	Mem0[a4 + 18336:word32] = v17
	CVZN = cond(v17)
	d0 = -1
	CVZN = cond(d0)
	goto l00007F6C
	// succ:  l00007F6C
l00007F6A:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00007F6C
l00007F6C:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007F3C_exit
fn00007F3C_exit:


// fn00007F80
// Return size: 4
void fn00007F80()
fn00007F80_entry:
	// succ:  l00007F80
l00007F80:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a3 = Mem0[a7 + 12:word32]
	d1 = a3
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	InitCode(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00007FA8
	// succ:  l00007F96 l00007FA8
l00007F96:
	Forbid()
	v13 = d0
	Mem0[a4 + 8240:word32] = v13
	CVZN = cond(v13)
	d0 = 2
	CVZN = cond(d0)
	v14 = d0
	Mem0[a4 + 18336:word32] = v14
	CVZN = cond(v14)
	d0 = -1
	CVZN = cond(d0)
	goto l00007FAA
	// succ:  l00007FAA
l00007FA8:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00007FAA
l00007FAA:
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007F80_exit
fn00007F80_exit:


// fn00007FB0
// Return size: 4
void fn00007FB0()
fn00007FB0_entry:
	// succ:  l00007FB0
l00007FB0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	d7 = Mem0[a7 + 24:word32]
	CVZN = cond(d7)
	a3 = Mem0[a7 + 28:word32]
	d6 = Mem0[a7 + 32:word32]
	CVZN = cond(d6)
	a7 = a7 - 0x00000004
	v9 = d7
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000093F4 (retsize: 4;)
	a7 = a7 + 0x0004
	a2 = d0
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00007FD2
	// succ:  l00007FCE l00007FD2
l00007FCE:
	d0 = -1
	CVZN = cond(d0)
	goto l00007FF0
	// succ:  l00007FF0
l00007FD2:
	a7 = a7 - 0x00000004
	v12 = d6
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 0x00000004
	v13 = a3
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a2 + 4:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00008B74 (retsize: 4;)
	a7 = a7 + 12
	d5 = d0
	CVZN = cond(d5)
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00007FEE
	// succ:  l00007FEA l00007FEE
l00007FEA:
	d0 = -1
	CVZN = cond(d0)
	goto l00007FF0
	// succ:  l00007FF0
l00007FEE:
	d0 = d5
	CVZN = cond(d0)
	// succ:  l00007FF0
l00007FF0:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00007FB0_exit
fn00007FB0_exit:


// fn0000812A
// Return size: 4
void fn0000812A()
fn0000812A_entry:
	// succ:  l0000812A
l0000812A:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 0x00000004
	v5 = a3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a3 = Mem0[a5 + 8:word32]
	Mem0[a4 + 18312:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 12
	a7 = a7 - 0x00000004
	v13 = a3
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000080F0
	call fn00006F2E (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7702
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	d0 = Mem0[a4 + 18312:word32]
	CVZN = cond(d0)
	a3 = Mem0[a5 + -4:word32]
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000812A_exit
fn0000812A_exit:


// fn00008160
// Return size: 4
void fn00008160()
fn00008160_entry:
	// succ:  l00008160
l00008160:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000001C
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a3 = Mem0[a5 + 8:word32]
	d7 = Mem0[a5 + 12:word32]
	CVZN = cond(d7)
	Mem0[a5 + -1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v18 = Mem0[a4 + 18336:word32]
	Mem0[a5 + -14:word32] = v18
	CVZN = cond(v18)
	d5 = 3
	CVZN = cond(d5)
	// succ:  l00008180
l00008180:
	v19 = d5 - Mem0[a4 + 7640:word32]
	CVZN = cond(v19)
	branch Test(GE,VN) l00008198
	// succ:  l00008186 l00008198
l00008186:
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	ZN = cond(Mem0[a0 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008198
	// succ:  l00008194 l00008198
l00008194:
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	goto l00008180
	// succ:  l00008180
l00008198:
	d0 = Mem0[a4 + 7640:word32]
	CVZN = cond(d0)
	v25 = d0 - d5
	CVZN = cond(v25)
	branch Test(NE,Z) l000081AC
	// succ:  l000081A0 l000081AC
l000081A0:
	d0 = 24
	CVZN = cond(d0)
	v26 = d0
	Mem0[a4 + 18336:word32] = v26
	CVZN = cond(v26)
	d0 = -1
	CVZN = cond(d0)
	goto l000082D0
	// succ:  l000082D0
l000081AC:
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	a0 = a0 + d0
	a2 = a0
	d0 = Mem0[a5 + 16:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000081C4
	// succ:  l000081BE l000081C4
l000081BE:
	Z = __btst((byte) d0, 0x0002)
	branch Test(EQ,Z) l000081CE
	// succ:  l000081C4 l000081CE
l000081C4:
	v27 = 0x000003EC
	Mem0[a5 + -18:word32] = v27
	CVZN = cond(v27)
	goto l000081D6
	// succ:  l000081D6
l000081CE:
	v30 = 0x000003EE
	Mem0[a5 + -18:word32] = v30
	CVZN = cond(v30)
	// succ:  l000081D6
l000081D6:
	d0 = 0x00008000
	CVZN = cond(d0)
	d0 = d0 & Mem0[a4 + 7664:word32]
	ZN = cond(d0)
	C = false
	V = false
	d7 = d7 ^ d0
	ZN = cond(d7)
	C = false
	V = false
	Z = __btst((byte) d7, 0x0003)
	branch Test(EQ,Z) l000081F4
	// succ:  l000081E8 l000081F4
l000081E8:
	d0 = d7
	CVZN = cond(d0)
	v28 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v28, 0)
	ZN = cond(v28)
	C = false
	V = false
	d7 = d0
	CVZN = cond(d7)
	v29 = (word16) d7 | 0x0002
	d7 = DPB(d7, v29, 0)
	ZN = cond(v29)
	C = false
	V = false
	// succ:  l000081F4
l000081F4:
	d0 = d7
	CVZN = cond(d0)
	d1 = 3
	CVZN = cond(d1)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008206
	// succ:  l000081FE l00008206
l000081FE:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l00008206
	// succ:  l00008202 l00008206
l00008202:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l0000820C
	// succ:  l00008206 l0000820C
l00008206:
	d6 = d7
	CVZN = cond(d6)
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	goto l00008218
	// succ:  l00008218
l0000820C:
	d0 = 22
	CVZN = cond(d0)
	v36 = d0
	Mem0[a4 + 18336:word32] = v36
	CVZN = cond(v36)
	d0 = -1
	CVZN = cond(d0)
	goto l000082D0
	// succ:  l000082D0
l00008218:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 & 0x00000300
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000082AA
	// succ:  l00008224 l000082AA
l00008224:
	Z = __btst((byte) d7, 0x000A)
	branch Test(EQ,Z) l00008240
	// succ:  l0000822A l00008240
l0000822A:
	v32 = 0x01
	Mem0[a5 + -1:byte] = v32
	CVZN = cond(v32)
	v33 = Mem0[a5 + -18:word32]
	a7 = a7 - 0x00000004
	v34 = v33
	Mem0[a7:word32] = v34
	CVZN = cond(v34)
	a7 = a7 - 0x00000004
	v35 = a3
	Mem0[a7:word32] = v35
	CVZN = cond(v35)
	call fn00008FB8 (retsize: 4;)
	a7 = a7 + 0x0008
	d4 = d0
	CVZN = cond(d4)
	goto l0000827C
	// succ:  l0000827C
l00008240:
	Z = __btst((byte) d7, 0x0009)
	branch Test(NE,Z) l0000825C
	// succ:  l00008246 l0000825C
l00008246:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000003ED
	a7 = a7 - 0x00000004
	v41 = a3
	Mem0[a7:word32] = v41
	CVZN = cond(v41)
	call fn00008BC0 (retsize: 4;)
	a7 = a7 + 0x0008
	d4 = d0
	CVZN = cond(d4)
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000825C
	// succ:  l00008258 l0000825C
l00008258:
	Z = __bset(d7, 0x0009, out d7)
	// succ:  l0000825C
l0000825C:
	Z = __btst((byte) d7, 0x0009)
	branch Test(EQ,Z) l0000827C
	// succ:  l00008262 l0000827C
l00008262:
	v44 = 0x01
	Mem0[a5 + -1:byte] = v44
	CVZN = cond(v44)
	v45 = Mem0[a5 + -14:word32]
	Mem0[a4 + 18336:word32] = v45
	CVZN = cond(v45)
	v46 = Mem0[a5 + -18:word32]
	a7 = a7 - 0x00000004
	v47 = v46
	Mem0[a7:word32] = v47
	CVZN = cond(v47)
	a7 = a7 - 0x00000004
	v48 = a3
	Mem0[a7:word32] = v48
	CVZN = cond(v48)
	call fn0000901C (retsize: 4;)
	a7 = a7 + 0x0008
	d4 = d0
	CVZN = cond(d4)
	// succ:  l0000827C
l0000827C:
	ZN = cond(Mem0[a5 + -1:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000082B8
	// succ:  l00008282 l000082B8
l00008282:
	d0 = d7
	CVZN = cond(d0)
	d1 = 120
	CVZN = cond(d1)
	d1 = d1 + d1
	CVZNX = cond(d1)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000082B8
	// succ:  l0000828E l000082B8
l0000828E:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000082B8
	// succ:  l00008292 l000082B8
l00008292:
	a7 = a7 - 0x00000004
	v39 = d4
	Mem0[a7:word32] = v39
	CVZN = cond(v39)
	call fn00009084 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000003ED
	a7 = a7 - 0x00000004
	v40 = a3
	Mem0[a7:word32] = v40
	CVZN = cond(v40)
	call fn00008BC0 (retsize: 4;)
	a7 = a7 + 12
	d4 = d0
	CVZN = cond(d4)
	goto l000082B8
	// succ:  l000082B8
l000082AA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000003ED
	a7 = a7 - 0x00000004
	v37 = a3
	Mem0[a7:word32] = v37
	CVZN = cond(v37)
	call fn00008BC0 (retsize: 4;)
	a7 = a7 + 0x0008
	d4 = d0
	CVZN = cond(d4)
	// succ:  l000082B8
l000082B8:
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000082C4
	// succ:  l000082BE l000082C4
l000082BE:
	d0 = -1
	CVZN = cond(d0)
	v38 = d4 - d0
	CVZN = cond(v38)
	branch Test(NE,Z) l000082C8
	// succ:  l000082C4 l000082C8
l000082C4:
	d0 = -1
	CVZN = cond(d0)
	goto l000082D0
	// succ:  l000082D0
l000082C8:
	v42 = d6
	Mem0[a2:word32] = v42
	CVZN = cond(v42)
	v43 = d4
	Mem0[a2 + 4:word32] = v43
	CVZN = cond(v43)
	d0 = d5
	CVZN = cond(d0)
	// succ:  l000082D0
l000082D0:
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008160_exit
fn00008160_exit:


// fn000082E4
// Return size: 4
void fn000082E4()
fn000082E4_entry:
	// succ:  l000082E4
l000082E4:
	a7 = fp
	a0 = Mem0[a7 + 4:word32]
	a1 = Mem0[a7 + 8:word32]
	d0 = Mem0[a7 + 12:word32]
	CVZN = cond(d0)
	branch Test(LE,VZN) l00008308
	// succ:  l000082F2 l00008308
l000082F2:
	v8 = a1 - a0
	CVZN = cond(v8)
	branch Test(ULT,C) l00008302
	// succ:  l000082F6 l00008302
l000082F6:
	a0 = a0 + d0
	a1 = a1 + d0
	// succ:  l000082FA
l000082FA:
	a0 = a0 - 0x00000001
	v10 = Mem0[a0:byte]
	a1 = a1 - 0x00000001
	v11 = v10
	Mem0[a1:byte] = v11
	CVZN = cond(v11)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l000082FA
	// succ:  l00008300 l000082FA
l00008300:
	return
	// succ:  fn000082E4_exit
l00008302:
	v14 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v15 = v14
	Mem0[a1:byte] = v15
	a1 = a1 + 0x00000001
	CVZN = cond(v15)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00008302
	// succ:  l00008308 l00008302
l00008308:
	return
	return
	// succ:  fn000082E4_exit fn000082E4_exit
fn000082E4_exit:


// fn0000830C
// Return size: 4
void fn0000830C()
fn0000830C_entry:
	// succ:  l0000830C
l0000830C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = Mem0[a4 + 18320:word32]
	// succ:  l00008314
l00008314:
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000832C
	// succ:  l00008318 l0000832C
l00008318:
	a2 = Mem0[a3:word32]
	a1 = a3
	d0 = Mem0[a1 + 8:word32]
	CVZN = cond(d0)
	a6 = Mem0[0x00000004:word32]
	FreeMem(a1, d0)
	a3 = a2
	goto l00008314
	// succ:  l00008314
l0000832C:
	a0 = a0 - a0
	CVZNX = cond(a0)
	v13 = a0
	Mem0[a4 + 18324:word32] = v13
	CVZN = cond(v13)
	v14 = a0
	Mem0[a4 + 18320:word32] = v14
	CVZN = cond(v14)
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000830C_exit
fn0000830C_exit:


// fn0000833C
// Return size: 4
void fn0000833C()
fn0000833C_entry:
	// succ:  l0000833C
l0000833C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a7 + 16:word32]
	CVZN = cond(d7)
	d0 = Mem0[a4 + 18332:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000835C
	// succ:  l0000834A l0000835C
l0000834A:
	a2 = d0
	v10 = Mem0[a2:word32]
	a7 = a7 - 0x00000004
	v11 = v10
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 0x00000004
	v12 = d0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	call fn00007E4C (retsize: 4;)
	a7 = a7 + 0x0008
	a0 = a0 - a0
	CVZNX = cond(a0)
	v15 = a0
	Mem0[a4 + 18332:word32] = v15
	CVZN = cond(v15)
	// succ:  l0000835C
l0000835C:
	d0 = d7
	CVZN = cond(d0)
	branch Test(NE,Z) l00008364
	// succ:  l00008360 l00008364
l00008360:
	d0 = 0
	CVZN = cond(d0)
	goto l00008382
	// succ:  l00008382
l00008364:
	d7 = d7 + 0x00000004
	CVZNX = cond(d7)
	a7 = a7 - 0x00000004
	v16 = d7
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008378
	// succ:  l00008374 l00008378
l00008374:
	d0 = 0
	CVZN = cond(d0)
	goto l00008382
	// succ:  l00008382
l00008378:
	a2 = a3
	v20 = d7
	Mem0[a2:word32] = v20
	CVZN = cond(v20)
	a0 = a3 + 4
	d0 = a0
	CVZN = cond(d0)
	// succ:  l00008382
l00008382:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000833C_exit
fn0000833C_exit:


// fn00008388
// Return size: 4
void fn00008388()
fn00008388_entry:
	// succ:  l00008388
l00008388:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	d7 = Mem0[a7 + 24:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 28:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 32:word32]
	CVZN = cond(d5)
	a7 = a7 - 0x00000004
	v9 = d7
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000093F4 (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000083AA
	// succ:  l000083A6 l000083AA
l000083A6:
	d0 = -1
	CVZN = cond(d0)
	goto l000083C8
	// succ:  l000083C8
l000083AA:
	a7 = a7 - 0x00000004
	v12 = d5
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 0x00000004
	v13 = d6
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a3 + 4:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00008AF8 (retsize: 4;)
	a7 = a7 + 12
	d4 = d0
	CVZN = cond(d4)
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000083C6
	// succ:  l000083C2 l000083C6
l000083C2:
	d0 = -1
	CVZN = cond(d0)
	goto l000083C8
	// succ:  l000083C8
l000083C6:
	d0 = d4
	CVZN = cond(d0)
	// succ:  l000083C8
l000083C8:
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008388_exit
fn00008388_exit:


// fn000083D0
// Return size: 4
void fn000083D0()
fn000083D0_entry:
	// succ:  l000083D0
l000083D0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a7 + 20:word32]
	CVZN = cond(d7)
	d0 = 12
	CVZN = cond(d0)
	d7 = d7 + d0
	CVZNX = cond(d7)
	d0 = d7
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	a6 = Mem0[0x00000004:word32]
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000083F2
	// succ:  l000083EE l000083F2
l000083EE:
	d0 = 0
	CVZN = cond(d0)
	goto l0000842A
	// succ:  l0000842A
l000083F2:
	v12 = d7
	Mem0[a3 + 8:word32] = v12
	CVZN = cond(v12)
	a2 = a4 + 18320
	a0 = Mem0[a2 + 4:word32]
	v15 = a0
	Mem0[a3 + 4:word32] = v15
	CVZN = cond(v15)
	a0 = a0 - a0
	CVZNX = cond(a0)
	v16 = a0
	Mem0[a3:word32] = v16
	CVZN = cond(v16)
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000840C
	// succ:  l0000840A l0000840C
l0000840A:
	v20 = a3
	Mem0[a2:word32] = v20
	CVZN = cond(v20)
	// succ:  l0000840C
l0000840C:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00008416
	// succ:  l00008412 l00008416
l00008412:
	a1 = d0
	v22 = a3
	Mem0[a1:word32] = v22
	CVZN = cond(v22)
	// succ:  l00008416
l00008416:
	v23 = a3
	Mem0[a2 + 4:word32] = v23
	CVZN = cond(v23)
	ZN = cond(Mem0[a4 + 7644:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008424
	// succ:  l00008420 l00008424
l00008420:
	v24 = a3
	Mem0[a4 + 7644:word32] = v24
	CVZN = cond(v24)
	// succ:  l00008424
l00008424:
	a0 = a3 + 12
	d0 = a0
	CVZN = cond(d0)
	// succ:  l0000842A
l0000842A:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000083D0_exit
fn000083D0_exit:


// fn0000843C
// Return size: 4
void fn0000843C()
fn0000843C_entry:
	// succ:  l0000843C
l0000843C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	d7 = Mem0[a7 + 20:word32]
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(GT,VZN) l0000844E
	// succ:  l00008448 l0000844E
l00008448:
	d0 = 0
	CVZN = cond(d0)
	goto l000084F0
	// succ:  l000084F0
l0000844E:
	d0 = 8
	CVZN = cond(d0)
	v13 = d7 - d0
	CVZN = cond(v13)
	branch Test(UGE,C) l00008456
	// succ:  l00008454 l00008456
l00008454:
	d7 = d0
	CVZN = cond(d7)
	// succ:  l00008456
l00008456:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d7 = d0
	CVZN = cond(d7)
	v15 = (word16) d7 & 0xFFFC
	d7 = DPB(d7, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	a2 = a4 + 7656
	a3 = Mem0[a2:word32]
	// succ:  l00008466
l00008466:
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000084AA
	// succ:  l0000846A l000084AA
l0000846A:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	v18 = d0 - d7
	CVZN = cond(v18)
	branch Test(LT,CZ) l000084A4
	// succ:  l00008472 l000084A4
l00008472:
	v20 = d0 - d7
	CVZN = cond(v20)
	branch Test(NE,Z) l00008482
	// succ:  l00008476 l00008482
l00008476:
	a0 = Mem0[a3:word32]
	v22 = a0
	Mem0[a2:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a4 + 7660:word32] - d7
	Mem0[a4 + 7660:word32] = v23
	CVZNX = cond(v23)
	d0 = a3
	CVZN = cond(d0)
	goto l000084F0
	// succ:  l000084F0
l00008482:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	d0 = d0 - d7
	CVZNX = cond(d0)
	d1 = 8
	CVZN = cond(d1)
	v30 = d0 - d1
	CVZN = cond(v30)
	branch Test(ULT,C) l000084A4
	// succ:  l0000848E l000084A4
l0000848E:
	a0 = a3
	a0 = a0 + d7
	v31 = a0
	Mem0[a2:word32] = v31
	CVZN = cond(v31)
	a2 = a0
	v32 = Mem0[a3:word32]
	Mem0[a2:word32] = v32
	CVZN = cond(v32)
	v33 = d0
	Mem0[a2 + 4:word32] = v33
	CVZN = cond(v33)
	v34 = Mem0[a4 + 7660:word32] - d7
	Mem0[a4 + 7660:word32] = v34
	CVZNX = cond(v34)
	d0 = a3
	CVZN = cond(d0)
	goto l000084F0
	// succ:  l000084F0
l000084A4:
	a2 = a3
	a3 = Mem0[a3:word32]
	goto l00008466
	// succ:  l00008466
l000084AA:
	d0 = d7
	CVZN = cond(d0)
	d1 = Mem0[a4 + 7788:word32]
	CVZN = cond(d1)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	call fn00009174 (retsize: 4;)
	d1 = Mem0[a4 + 7788:word32]
	CVZN = cond(d1)
	call fn00009154 (retsize: 4;)
	d6 = d0
	CVZN = cond(d6)
	d6 = d6 + 0x00000008
	CVZNX = cond(d6)
	d0 = d6
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d6 = d0
	CVZN = cond(d6)
	v25 = (word16) d6 & 0xFFFC
	d6 = DPB(d6, v25, 0)
	ZN = cond(v25)
	C = false
	V = false
	a7 = a7 - 0x00000004
	v26 = d6
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	call fn000083D0 (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000084EE
	// succ:  l000084DC l000084EE
l000084DC:
	a7 = a7 - 0x00000004
	v27 = d6
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	a7 = a7 - 0x00000004
	v28 = a3
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00007E4C (retsize: 4;)
	v29 = d7
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0008
	goto l000084F0
	// succ:  l000084F0
l000084EE:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l000084F0
l000084F0:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000843C_exit
fn0000843C_exit:


// fn00008504
// Return size: 4
void fn00008504()
fn00008504_entry:
	// succ:  l00008504
l00008504:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = d7
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d7 = Mem0[a7 + 8:word32]
	CVZN = cond(d7)
	a7 = a7 - 0x00000004
	v6 = d7
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0004
	v7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = v7
	CVZN = cond(d7)
	return
	// succ:  fn00008504_exit
fn00008504_exit:


// fn00008518
// Return size: 4
void fn00008518()
fn00008518_entry:
	// succ:  l00008518
l00008518:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000020
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	a0 = a5 + -12
	d1 = a0
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	Deallocate(a0, a1, d0)
	d0 = Mem0[a5 + -12:word32]
	CVZN = cond(d0)
	d7 = 0x000007BA
	CVZN = cond(d7)
	d6 = d0
	CVZN = cond(d6)
	v17 = d0
	Mem0[a5 + -16:word32] = v17
	CVZN = cond(v17)
	// succ:  l00008542
l00008542:
	v18 = d6 - 0x0000016D
	CVZN = cond(v18)
	branch Test(LE,VZN) l00008568
	// succ:  l0000854A l00008568
l0000854A:
	d0 = d7
	CVZN = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000855E
	// succ:  l00008556 l0000855E
l00008556:
	d6 = d6 - 0x0000016E
	CVZNX = cond(d6)
	goto l00008564
	// succ:  l00008564
l0000855E:
	d6 = d6 - 0x0000016D
	CVZNX = cond(d6)
	// succ:  l00008564
l00008564:
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	goto l00008542
	// succ:  l00008542
l00008568:
	v25 = d6 - 0x0000016D
	CVZN = cond(v25)
	branch Test(NE,Z) l00008580
	// succ:  l00008570 l00008580
l00008570:
	d0 = d7
	CVZN = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008580
	// succ:  l0000857C l00008580
l0000857C:
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	d6 = 0
	CVZN = cond(d6)
	// succ:  l00008580
l00008580:
	d0 = d6
	CVZN = cond(d0)
	d1 = d7
	CVZN = cond(d1)
	d1 = d1 - 0x000007BC
	CVZNX = cond(d1)
	v26 = (byte) d1
	Mem0[a3 + 1:byte] = v26
	CVZN = cond(v26)
	d2 = 0
	CVZN = cond(d2)
	v27 = (byte) d1
	d2 = DPB(d2, v27, 0)
	CVZN = cond(v27)
	v28 = d0
	Mem0[a5 + -16:word32] = v28
	CVZN = cond(v28)
	d0 = d2
	CVZN = cond(d0)
	d1 = 4
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000085A6
	// succ:  l000085A2 l000085A6
l000085A2:
	d0 = 29
	CVZN = cond(d0)
	goto l000085A8
	// succ:  l000085A8
l000085A6:
	d0 = 28
	CVZN = cond(d0)
	// succ:  l000085A8
l000085A8:
	v29 = (byte) d0
	Mem0[a4 + 7793:byte] = v29
	CVZN = cond(v29)
	d4 = 0
	CVZN = cond(d4)
	d5 = Mem0[a5 + -16:word32]
	CVZN = cond(d5)
	// succ:  l000085B2
l000085B2:
	d0 = 12
	CVZN = cond(d0)
	v30 = d4 - d0
	CVZN = cond(v30)
	branch Test(GE,VN) l000085D6
	// succ:  l000085B8 l000085D6
l000085B8:
	d0 = 0
	CVZN = cond(d0)
	a0 = a4 + 7792
	v32 = Mem0[a0 + d4:byte]
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	v33 = d0 - d5
	CVZN = cond(v33)
	branch Test(GT,VZN) l000085D6
	// succ:  l000085C6 l000085D6
l000085C6:
	d0 = 0
	CVZN = cond(d0)
	a0 = a4 + 7792
	v34 = Mem0[a0 + d4:byte]
	d0 = DPB(d0, v34, 0)
	CVZN = cond(v34)
	d5 = d5 - d0
	CVZNX = cond(d5)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	goto l000085B2
	// succ:  l000085B2
l000085D6:
	d0 = d5
	CVZN = cond(d0)
	d1 = d4
	CVZN = cond(d1)
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v35 = (byte) d1
	Mem0[a3 + 2:byte] = v35
	CVZN = cond(v35)
	v36 = d0
	Mem0[a5 + -16:word32] = v36
	CVZN = cond(v36)
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	v37 = (byte) d0
	Mem0[a3 + 3:byte] = v37
	CVZN = cond(v37)
	d0 = Mem0[a5 + -12:word32]
	CVZN = cond(d0)
	d1 = 7
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v38 = (byte) d1
	Mem0[a3:byte] = v38
	CVZN = cond(v38)
	d0 = Mem0[a5 + -8:word32]
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v39 = (byte) d0
	Mem0[a3 + 4:byte] = v39
	CVZN = cond(v39)
	d0 = Mem0[a5 + -8:word32]
	CVZN = cond(d0)
	d1 = 60
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v40 = (byte) d1
	Mem0[a3 + 5:byte] = v40
	CVZN = cond(v40)
	d0 = Mem0[a5 + -4:word32]
	CVZN = cond(d0)
	d1 = 50
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	v41 = (byte) d0
	Mem0[a3 + 6:byte] = v41
	CVZN = cond(v41)
	d0 = Mem0[a5 + -4:word32]
	CVZN = cond(d0)
	d1 = 50
	CVZN = cond(d1)
	call fn00009174 (retsize: 4;)
	d1 = d1 + d1
	CVZNX = cond(d1)
	v42 = (byte) d1
	Mem0[a3 + 7:byte] = v42
	CVZN = cond(v42)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008518_exit
fn00008518_exit:


// fn000086A4
// Return size: 4
void fn000086A4()
fn000086A4_entry:
	// succ:  l000086A4
l000086A4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a3 = Mem0[a7 + 12:word32]
	Z = __btst(Mem0[a3 + 27:byte], 0x0001)
	branch Test(EQ,Z) l000086C6
	// succ:  l000086B4 l000086C6
l000086B4:
	d0 = Mem0[a3 + 20:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00008716
	// succ:  l000086BA l00008716
l000086BA:
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l000086C6
l000086C6:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000001
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v12 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn00008388 (retsize: 4;)
	a7 = a7 + 12
	d7 = d0
	CVZN = cond(d7)
	d0 = -1
	CVZN = cond(d0)
	v14 = d7 - d0
	CVZN = cond(v14)
	branch Test(EQ,Z) l000086E6
	// succ:  l000086E0 l000086E6
l000086E0:
	ZN = cond(Mem0[a3 + 20:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000086EA
	// succ:  l000086E6 l000086EA
l000086E6:
	d0 = d7
	CVZN = cond(d0)
	goto l00008716
	// succ:  l00008716
l000086EA:
	Z = __btst(Mem0[a3 + 27:byte], 0x0001)
	branch Test(EQ,Z) l000086FE
	// succ:  l000086F2 l000086FE
l000086F2:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a3 + 16:word32]
	CVZNX = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	goto l00008716
	// succ:  l00008716
l000086FE:
	Z = __btst(Mem0[a3 + 26:byte], 0x0007)
	branch Test(EQ,Z) l00008710
	// succ:  l00008706 l00008710
l00008706:
	d0 = d7
	CVZN = cond(d0)
	d1 = Mem0[a3 + 8:word32]
	CVZN = cond(d1)
	d0 = d0 + d1
	CVZNX = cond(d0)
	goto l00008716
	// succ:  l00008716
l00008710:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 - Mem0[a3 + 8:word32]
	CVZNX = cond(d0)
	// succ:  l00008716
l00008716:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000086A4_exit
fn000086A4_exit:


// fn0000871C
// Return size: 4
void fn0000871C()
fn0000871C_entry:
	// succ:  l0000871C
l0000871C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a7 + 16:word32]
	d7 = Mem0[a7 + 20:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 24:word32]
	CVZN = cond(d6)
	Z = __btst(Mem0[a3 + 27:byte], 0x0001)
	branch Test(EQ,Z) l00008742
	// succ:  l00008734 l00008742
l00008734:
	a7 = a7 - 0x00000004
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	goto l0000875C
	// succ:  l0000875C
l00008742:
	d0 = 1
	CVZN = cond(d0)
	v10 = d6 - d0
	CVZN = cond(v10)
	branch Test(NE,Z) l0000875C
	// succ:  l00008748 l0000875C
l00008748:
	Z = __btst(Mem0[a3 + 26:byte], 0x0007)
	branch Test(EQ,Z) l00008758
	// succ:  l00008750 l00008758
l00008750:
	d0 = Mem0[a3 + 8:word32]
	CVZN = cond(d0)
	d7 = d7 + d0
	CVZNX = cond(d7)
	goto l0000875C
	// succ:  l0000875C
l00008758:
	d7 = d7 - Mem0[a3 + 8:word32]
	CVZNX = cond(d7)
	// succ:  l0000875C
l0000875C:
	v12 = Mem0[a3 + 16:word32]
	Mem0[a3 + 4:word32] = v12
	CVZN = cond(v12)
	d0 = 0
	CVZN = cond(d0)
	v13 = d0
	Mem0[a3 + 12:word32] = v13
	CVZN = cond(v13)
	v14 = d0
	Mem0[a3 + 8:word32] = v14
	CVZN = cond(v14)
	Z = __btst(Mem0[a3 + 27:byte], 0x0007)
	branch Test(EQ,Z) l0000877A
	// succ:  l00008774 l0000877A
l00008774:
	d0 = -4
	CVZN = cond(d0)
	v15 = Mem0[a3 + 24:word32] & d0
	Mem0[a3 + 24:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	// succ:  l0000877A
l0000877A:
	a7 = a7 - 0x00000004
	v19 = d6
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	a7 = a7 - 0x00000004
	v20 = d7
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	v21 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v22 = v21
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	call fn00008388 (retsize: 4;)
	a7 = a7 + 12
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00008792
	// succ:  l0000878E l00008792
l0000878E:
	d0 = -1
	CVZN = cond(d0)
	goto l0000879A
	// succ:  l0000879A
l00008792:
	d0 = -49
	CVZN = cond(d0)
	v23 = Mem0[a3 + 24:word32] & d0
	Mem0[a3 + 24:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000879A
l0000879A:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000871C_exit
fn0000871C_exit:


// fn000087A0
// Return size: 4
void fn000087A0()
fn000087A0_entry:
	// succ:  l000087A0
l000087A0:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = a3
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	a3 = Mem0[a7 + 8:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000087BA
	// succ:  l000087AA l000087BA
l000087AA:
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn0000833C (retsize: 4;)
	a7 = a7 + 0x0004
	a0 = a3
	a0 = a0 - 0x00000004
	v13 = a0
	Mem0[a4 + 18332:word32] = v13
	CVZN = cond(v13)
	// succ:  l000087BA
l000087BA:
	v14 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = v14
	return
	// succ:  fn000087A0_exit
fn000087A0_exit:


// fn00008830
// Return size: 4
void fn00008830()
fn00008830_entry:
	// succ:  l00008830
l00008830:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000008
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = a4 + 7668
	// succ:  l0000883C
l0000883C:
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000884C
	// succ:  l00008840 l0000884C
l00008840:
	ZN = cond(Mem0[a3 + 24:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000884C
	// succ:  l00008846 l0000884C
l00008846:
	a2 = a3
	a3 = Mem0[a3:word32]
	goto l0000883C
	// succ:  l0000883C
l0000884C:
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00008872
	// succ:  l00008850 l00008872
l00008850:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000022
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008864
	// succ:  l00008860 l00008864
l00008860:
	d0 = 0
	CVZN = cond(d0)
	goto l00008880
	// succ:  l00008880
l00008864:
	v19 = a3
	Mem0[a2:word32] = v19
	CVZN = cond(v19)
	d0 = 33
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	a0 = a3
	// succ:  l0000886C
l0000886C:
	v22 = (byte) d1
	Mem0[a0:byte] = v22
	a0 = a0 + 0x00000001
	CVZN = cond(v22)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l0000886C
	// succ:  l00008872 l0000886C
l00008872:
	a7 = a7 - 0x00000004
	v13 = a3
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a5 + 12:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	v16 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	v17 = v16
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn0000888C (retsize: 4;)
	a7 = a7 - 0x00000004
	v23 = a3
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	v24 = Mem0[a5 + 12:word32]
	a7 = a7 - 0x00000004
	v25 = v24
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	v26 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	v27 = v26
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn0000888C (retsize: 4;)
	// succ:  l00008880
l00008880:
	v18 = a5 + -16
	a2 = Mem0[v18:word32]
	v18 = v18 + 0x00000004
	a3 = Mem0[v18:word32]
	v18 = v18 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008830_exit
fn00008830_exit:


// fn0000888C
// Return size: 4
void fn0000888C()
fn0000888C_entry:
	// succ:  l0000888C
l0000888C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000010
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a3 = Mem0[a5 + 12:word32]
	a2 = Mem0[a5 + 16:word32]
	ZN = cond(Mem0[a2 + 24:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000088AA
	// succ:  l000088A2 l000088AA
l000088A2:
	a7 = a7 - 0x00000004
	v14 = a2
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn000089F8 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000088AA
l000088AA:
	d5 = Mem0[a4 + 7772:word32]
	CVZN = cond(d5)
	d7 = 1
	CVZN = cond(d7)
	d0 = 0
	CVZN = cond(d0)
	v18 = Mem0[a3 + d7:byte]
	d0 = DPB(d0, v18, 0)
	CVZN = cond(v18)
	v19 = (word16) d0 - 0x0061
	d0 = DPB(d0, v19, 0)
	CVZNX = cond(v19)
	branch Test(EQ,Z) l000088C2
	// succ:  l000088BC l000088C2
l000088BC:
	v21 = (word16) d0 - 0x0001
	d0 = DPB(d0, v21, 0)
	CVZNX = cond(v21)
	branch Test(EQ,Z) l000088C6
	// succ:  l000088C0 l000088C6
l000088C0:
	goto l000088CE
	// succ:  l000088CE
l000088C2:
	d5 = 0
	CVZN = cond(d5)
	goto l000088CC
	// succ:  l000088CC
l000088C6:
	d5 = 0x00008000
	CVZN = cond(d5)
	// succ:  l000088CC
l000088CC:
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	// succ:  l000088CE
l000088CE:
	d1 = 43
	CVZN = cond(d1)
	v23 = (byte) d1 - Mem0[a3 + d7:byte]
	CVZN = cond(v23)
	d0 = DPB(d0, Z, 0)
	v25 = -(byte) d0
	d0 = DPB(d0, v25, 0)
	CVZNX = cond(v25)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	d4 = d0
	CVZN = cond(d4)
	d0 = 0
	CVZN = cond(d0)
	v26 = Mem0[a3:byte]
	d0 = DPB(d0, v26, 0)
	CVZN = cond(v26)
	v27 = (word16) d0 - 0x0061
	d0 = DPB(d0, v27, 0)
	CVZNX = cond(v27)
	branch Test(EQ,Z) l000088F6
	// succ:  l000088E8 l000088F6
l000088E8:
	v28 = (word16) d0 - 0x0011
	d0 = DPB(d0, v28, 0)
	CVZNX = cond(v28)
	branch Test(EQ,Z) l00008930
	// succ:  l000088EE l00008930
l000088EE:
	v29 = (word16) d0 - 0x0005
	d0 = DPB(d0, v29, 0)
	CVZNX = cond(v29)
	branch Test(EQ,Z) l0000896E
	// succ:  l000088F2 l0000896E
l000088F2:
	goto l000089B2
	// succ:  l000089B2
l000088F6:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000000C
	a7 = a7 - 0x00000004
	v30 = 0x00008102
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	v31 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	v32 = v31
	Mem0[a7:word32] = v32
	CVZN = cond(v32)
	call fn00008160 (retsize: 4;)
	a7 = a7 + 12
	d6 = d0
	CVZN = cond(d6)
	d0 = -1
	CVZN = cond(d0)
	v33 = d6 - d0
	CVZN = cond(v33)
	branch Test(NE,Z) l0000891A
	// succ:  l00008914 l0000891A
l00008914:
	d0 = 0
	CVZN = cond(d0)
	goto l000089E8
	// succ:  l000089E8
l0000891A:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008924
	// succ:  l0000891E l00008924
l0000891E:
	d0 = 64
	CVZN = cond(d0)
	d0 = d0 + d0
	CVZNX = cond(d0)
	goto l00008926
	// succ:  l00008926
l00008924:
	d0 = 2
	CVZN = cond(d0)
	// succ:  l00008926
l00008926:
	d7 = d0
	CVZN = cond(d7)
	v41 = (word16) d7 | 0x4000
	d7 = DPB(d7, v41, 0)
	ZN = cond(v41)
	C = false
	V = false
	goto l000089B6
	// succ:  l000089B6
l00008930:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008938
	// succ:  l00008934 l00008938
l00008934:
	d0 = 2
	CVZN = cond(d0)
	goto l0000893A
	// succ:  l0000893A
l00008938:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000893A
l0000893A:
	v50 = (word16) d0 | 0x8000
	d0 = DPB(d0, v50, 0)
	ZN = cond(v50)
	C = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000000C
	a7 = a7 - 0x00000004
	v51 = d0
	Mem0[a7:word32] = v51
	CVZN = cond(v51)
	v52 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	v53 = v52
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	call fn00008160 (retsize: 4;)
	a7 = a7 + 12
	d6 = d0
	CVZN = cond(d6)
	d0 = -1
	CVZN = cond(d0)
	v54 = d6 - d0
	CVZN = cond(v54)
	branch Test(NE,Z) l0000895E
	// succ:  l00008958 l0000895E
l00008958:
	d0 = 0
	CVZN = cond(d0)
	goto l000089E8
	// succ:  l000089E8
l0000895E:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008968
	// succ:  l00008962 l00008968
l00008962:
	d0 = 64
	CVZN = cond(d0)
	d0 = d0 + d0
	CVZNX = cond(d0)
	goto l0000896A
	// succ:  l0000896A
l00008968:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l0000896A
l0000896A:
	d7 = d0
	CVZN = cond(d7)
	goto l000089B6
	// succ:  l000089B6
l0000896E:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008976
	// succ:  l00008972 l00008976
l00008972:
	d0 = 2
	CVZN = cond(d0)
	goto l00008978
	// succ:  l00008978
l00008976:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l00008978
l00008978:
	v34 = (word16) d0 | 0x8000
	d0 = DPB(d0, v34, 0)
	ZN = cond(v34)
	C = false
	V = false
	v35 = (word16) d0 | 0x0100
	d0 = DPB(d0, v35, 0)
	ZN = cond(v35)
	C = false
	V = false
	v36 = (word16) d0 | 0x0200
	d0 = DPB(d0, v36, 0)
	ZN = cond(v36)
	C = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000000C
	a7 = a7 - 0x00000004
	v37 = d0
	Mem0[a7:word32] = v37
	CVZN = cond(v37)
	v38 = Mem0[a5 + 8:word32]
	a7 = a7 - 0x00000004
	v39 = v38
	Mem0[a7:word32] = v39
	CVZN = cond(v39)
	call fn00008160 (retsize: 4;)
	a7 = a7 + 12
	d6 = d0
	CVZN = cond(d6)
	d0 = -1
	CVZN = cond(d0)
	v40 = d6 - d0
	CVZN = cond(v40)
	branch Test(NE,Z) l000089A2
	// succ:  l0000899E l000089A2
l0000899E:
	d0 = 0
	CVZN = cond(d0)
	goto l000089E8
	// succ:  l000089E8
l000089A2:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000089AC
	// succ:  l000089A6 l000089AC
l000089A6:
	d0 = 64
	CVZN = cond(d0)
	d0 = d0 + d0
	CVZNX = cond(d0)
	goto l000089AE
	// succ:  l000089AE
l000089AC:
	d0 = 2
	CVZN = cond(d0)
	// succ:  l000089AE
l000089AE:
	d7 = d0
	CVZN = cond(d7)
	goto l000089B6
	// succ:  l000089B6
l000089B2:
	d0 = 0
	CVZN = cond(d0)
	goto l000089E8
	// succ:  l000089E8
l000089B6:
	a0 = a0 - a0
	CVZNX = cond(a0)
	v43 = a0
	Mem0[a2 + 16:word32] = v43
	CVZN = cond(v43)
	d0 = 0
	CVZN = cond(d0)
	v44 = d0
	Mem0[a2 + 20:word32] = v44
	CVZN = cond(v44)
	v45 = d6
	Mem0[a2 + 28:word32] = v45
	CVZN = cond(v45)
	v46 = Mem0[a2 + 16:word32]
	Mem0[a2 + 4:word32] = v46
	CVZN = cond(v46)
	v47 = d0
	Mem0[a2 + 12:word32] = v47
	CVZN = cond(v47)
	v48 = d0
	Mem0[a2 + 8:word32] = v48
	CVZN = cond(v48)
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000089DE
	// succ:  l000089D8 l000089DE
l000089D8:
	d0 = 0x00008000
	CVZN = cond(d0)
	// succ:  l000089DE
l000089DE:
	d1 = d7
	CVZN = cond(d1)
	d1 = d1 | d0
	ZN = cond(d1)
	C = false
	V = false
	v49 = d1
	Mem0[a2 + 24:word32] = v49
	CVZN = cond(v49)
	d0 = a2
	CVZN = cond(d0)
	// succ:  l000089E8
l000089E8:
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000888C_exit
fn0000888C_exit:


// fn000089F8
// Return size: 4
void fn000089F8()
fn000089F8_entry:
	// succ:  l000089F8
l000089F8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a3 = Mem0[a7 + 16:word32]
	Z = __btst(Mem0[a3 + 27:byte], 0x0001)
	branch Test(EQ,Z) l00008A18
	// succ:  l00008A08 l00008A18
l00008A08:
	a7 = a7 - 0x00000004
	v7 = a3
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000FFFF
	call fn0000728C (retsize: 4;)
	a7 = a7 + 0x0008
	d7 = d0
	CVZN = cond(d7)
	goto l00008A1A
	// succ:  l00008A1A
l00008A18:
	d7 = 0
	CVZN = cond(d7)
	// succ:  l00008A1A
l00008A1A:
	d0 = 12
	CVZN = cond(d0)
	d0 = d0 & Mem0[a3 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00008A36
	// succ:  l00008A22 l00008A36
l00008A22:
	ZN = cond(Mem0[a3 + 20:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008A36
	// succ:  l00008A28 l00008A36
l00008A28:
	v13 = Mem0[a3 + 20:word32]
	a7 = a7 - 0x00000004
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	v15 = Mem0[a3 + 16:word32]
	a7 = a7 - 0x00000004
	v16 = v15
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn00007E4C (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00008A36
l00008A36:
	Mem0[a3 + 24:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v19 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v20 = v19
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	call fn0000936C (retsize: 4;)
	a7 = a7 + 0x0004
	d6 = d0
	CVZN = cond(d6)
	d0 = -1
	CVZN = cond(d0)
	v21 = d7 - d0
	CVZN = cond(v21)
	branch Test(EQ,Z) l00008A52
	// succ:  l00008A4C l00008A52
l00008A4C:
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008A52
	// succ:  l00008A50 l00008A52
l00008A50:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00008A52
l00008A52:
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000089F8_exit
fn000089F8_exit:


// fn00008A58
// Return size: 4
void fn00008A58()
fn00008A58_entry:
	// succ:  l00008A58
l00008A58:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	d7 = Mem0[a7 + 16:word32]
	CVZN = cond(d7)
	a3 = a4 + 7668
	// succ:  l00008A64
l00008A64:
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00008A9C
	// succ:  l00008A68 l00008A9C
l00008A68:
	Z = __btst(Mem0[a3 + 27:byte], 0x0002)
	branch Test(NE,Z) l00008A98
	// succ:  l00008A70 l00008A98
l00008A70:
	Z = __btst(Mem0[a3 + 27:byte], 0x0001)
	branch Test(EQ,Z) l00008A98
	// succ:  l00008A78 l00008A98
l00008A78:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a3 + 16:word32]
	CVZNX = cond(d0)
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008A98
	// succ:  l00008A86 l00008A98
l00008A86:
	a7 = a7 - 0x00000004
	v14 = d6
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	v15 = Mem0[a3 + 16:word32]
	a7 = a7 - 0x00000004
	v16 = v15
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[a3 + 28:word32]
	a7 = a7 - 0x00000004
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn000060B0 (retsize: 4;)
	a7 = a7 + 12
	// succ:  l00008A98
l00008A98:
	a3 = Mem0[a3:word32]
	goto l00008A64
	// succ:  l00008A64
l00008A9C:
	a7 = a7 - 0x00000004
	v19 = d7
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	call fn00007698 (retsize: 4;)
	a7 = a7 + 0x0004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008A58_exit
fn00008A58_exit:


// fn00008AAC
// Return size: 4
void fn00008AAC()
fn00008AAC_entry:
	// succ:  l00008AAC
l00008AAC:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d7 = Mem0[a7 + 32:word32]
	CVZN = cond(d7)
	a3 = Mem0[a7 + 36:word32]
	d6 = Mem0[a7 + 40:word32]
	CVZN = cond(d6)
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008AC6
	// succ:  l00008AC2 l00008AC6
l00008AC2:
	call fn0000943C (retsize: 4;)
	// succ:  l00008AC6
l00008AC6:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = d7
	CVZN = cond(d1)
	d2 = a3
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	a6 = Mem0[a4 + 18340:word32]
	execPrivate3()
	d5 = d0
	CVZN = cond(d5)
	d0 = -1
	CVZN = cond(d0)
	v20 = d5 - d0
	CVZN = cond(v20)
	branch Test(NE,Z) l00008AEE
	// succ:  l00008AE0 l00008AEE
l00008AE0:
	Forbid()
	v21 = d0
	Mem0[a4 + 8240:word32] = v21
	CVZN = cond(v21)
	d0 = 5
	CVZN = cond(d0)
	v22 = d0
	Mem0[a4 + 18336:word32] = v22
	CVZN = cond(v22)
	// succ:  l00008AEE
l00008AEE:
	d0 = d5
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008AAC_exit
fn00008AAC_exit:


// fn00008AF8
// Return size: 4
void fn00008AF8()
fn00008AF8_entry:
	// succ:  l00008AF8
l00008AF8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d7 = Mem0[a7 + 32:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 36:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 40:word32]
	CVZN = cond(d5)
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008B12
	// succ:  l00008B0E l00008B12
l00008B0E:
	call fn0000943C (retsize: 4;)
	// succ:  l00008B12
l00008B12:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	d1 = d7
	CVZN = cond(d1)
	d2 = d6
	CVZN = cond(d2)
	d3 = d0
	CVZN = cond(d3)
	a6 = Mem0[a4 + 18340:word32]
	execPrivate6()
	d4 = d0
	CVZN = cond(d4)
	d0 = -1
	CVZN = cond(d0)
	v21 = d4 - d0
	CVZN = cond(v21)
	branch Test(NE,Z) l00008B3E
	// succ:  l00008B30 l00008B3E
l00008B30:
	Forbid()
	v22 = d0
	Mem0[a4 + 8240:word32] = v22
	CVZN = cond(v22)
	d0 = 22
	CVZN = cond(d0)
	v23 = d0
	Mem0[a4 + 18336:word32] = v23
	CVZN = cond(v23)
	// succ:  l00008B3E
l00008B3E:
	d0 = d5
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008B4E
	// succ:  l00008B44 l00008B4E
l00008B44:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l00008B52
	// succ:  l00008B48 l00008B52
l00008B48:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l00008B58
	// succ:  l00008B4C l00008B58
l00008B4C:
	goto l00008B66
	// succ:  l00008B66
l00008B4E:
	d0 = d6
	CVZN = cond(d0)
	goto l00008B66
	// succ:  l00008B66
l00008B52:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + d6
	CVZNX = cond(d0)
	goto l00008B66
	// succ:  l00008B66
l00008B58:
	d1 = d7
	CVZN = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	a6 = Mem0[a4 + 18340:word32]
	execPrivate6()
	// succ:  l00008B66
l00008B66:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008AF8_exit
fn00008AF8_exit:


// fn00008B74
// Return size: 4
void fn00008B74()
fn00008B74_entry:
	// succ:  l00008B74
l00008B74:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d7 = Mem0[a7 + 32:word32]
	CVZN = cond(d7)
	a3 = Mem0[a7 + 36:word32]
	d6 = Mem0[a7 + 40:word32]
	CVZN = cond(d6)
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008B8E
	// succ:  l00008B8A l00008B8E
l00008B8A:
	call fn0000943C (retsize: 4;)
	// succ:  l00008B8E
l00008B8E:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = d7
	CVZN = cond(d1)
	d2 = a3
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	a6 = Mem0[a4 + 18340:word32]
	execPrivate2()
	d5 = d0
	CVZN = cond(d5)
	d0 = -1
	CVZN = cond(d0)
	v20 = d5 - d0
	CVZN = cond(v20)
	branch Test(NE,Z) l00008BB6
	// succ:  l00008BA8 l00008BB6
l00008BA8:
	Forbid()
	v21 = d0
	Mem0[a4 + 8240:word32] = v21
	CVZN = cond(v21)
	d0 = 5
	CVZN = cond(d0)
	v22 = d0
	Mem0[a4 + 18336:word32] = v22
	CVZN = cond(v22)
	// succ:  l00008BB6
l00008BB6:
	d0 = d5
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008B74_exit
fn00008B74_exit:


// fn00008BC0
// Return size: 4
void fn00008BC0()
fn00008BC0_entry:
	// succ:  l00008BC0
l00008BC0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 24:word32]
	d7 = Mem0[a7 + 28:word32]
	CVZN = cond(d7)
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008BD6
	// succ:  l00008BD2 l00008BD6
l00008BD2:
	call fn0000943C (retsize: 4;)
	// succ:  l00008BD6
l00008BD6:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = a3
	CVZN = cond(d1)
	d2 = d7
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	Supervisor(a5)
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008BFE
	// succ:  l00008BEC l00008BFE
l00008BEC:
	Forbid()
	v19 = d0
	Mem0[a4 + 8240:word32] = v19
	CVZN = cond(v19)
	d0 = 2
	CVZN = cond(d0)
	v20 = d0
	Mem0[a4 + 18336:word32] = v20
	CVZN = cond(v20)
	d0 = -1
	CVZN = cond(d0)
	goto l00008C00
	// succ:  l00008C00
l00008BFE:
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00008C00
l00008C00:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008BC0_exit
fn00008BC0_exit:


// fn00008C08
// Return size: 4
void fn00008C08()
fn00008C08_entry:
	// succ:  l00008C08
l00008C08:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000128
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	d7 = Mem0[a5 + 16:word32]
	CVZN = cond(d7)
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v17 = d7
	Mem0[a4 + 18344:word32] = v17
	CVZN = cond(v17)
	ZN = cond(Mem0[a4 + 7804:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008C38
	// succ:  l00008C2A l00008C38
l00008C2A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000006C
	call fn0000833C (retsize: 4;)
	a7 = a7 + 0x0004
	v20 = d0
	Mem0[a4 + 7804:word32] = v20
	CVZN = cond(v20)
	// succ:  l00008C38
l00008C38:
	ZN = cond(Mem0[a4 + 7808:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008C4C
	// succ:  l00008C3E l00008C4C
l00008C3E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000006C
	call fn0000833C (retsize: 4;)
	a7 = a7 + 0x0004
	v21 = d0
	Mem0[a4 + 7808:word32] = v21
	CVZN = cond(v21)
	// succ:  l00008C4C
l00008C4C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -296
	v22 = Mem0[a4 + 7808:word32]
	a7 = a7 - 0x00000004
	v23 = v22
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -264
	v24 = Mem0[a4 + 7804:word32]
	a7 = a7 - 0x00000004
	v25 = v24
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	a7 = a7 - 0x00000004
	v26 = a2
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	call fn00007910 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -264
	v27 = Mem0[a4 + 7804:word32]
	a7 = a7 - 0x00000004
	v28 = v27
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 28
	v29 = Mem0[a5 + -296:byte]
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00008C96
	// succ:  l00008C7A l00008C96
l00008C7A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00008DE6
	v30 = Mem0[a4 + 7808:word32]
	a7 = a7 - 0x00000004
	v31 = v30
	Mem0[a7:word32] = v31
	CVZN = cond(v31)
	call fn00007B74 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -296
	v32 = Mem0[a4 + 7808:word32]
	a7 = a7 - 0x00000004
	v33 = v32
	Mem0[a7:word32] = v33
	CVZN = cond(v33)
	call fn00007B74 (retsize: 4;)
	a7 = a7 + 16
	// succ:  l00008C96
l00008C96:
	a0 = Mem0[a4 + 7808:word32]
	a1 = a2
	// succ:  l00008C9C
l00008C9C:
	v36 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v36, 0)
	CVZN = cond(v36)
	v37 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	v38 = (byte) d0 - v37
	CVZN = cond(v38)
	branch Test(NE,Z) l00008CAE
	// succ:  l00008CA2 l00008CAE
l00008CA2:
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00008C9C
	// succ:  l00008CA6 l00008C9C
l00008CA6:
	branch Test(NE,Z) l00008CAE
	// succ:  l00008CA8 l00008CAE
l00008CA8:
	ZN = cond(Mem0[a4 + 8268:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008CD8
	// succ:  l00008CAE l00008CD8
l00008CAE:
	d1 = Mem0[a4 + 7804:word32]
	CVZN = cond(d1)
	d2 = -2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	MakeLibrary(a0, a1, a2, d0, d1)
	v40 = d0
	Mem0[a4 + 18348:word32] = v40
	CVZN = cond(v40)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008CEC
	// succ:  l00008CC4 l00008CEC
l00008CC4:
	d0 = 2
	CVZN = cond(d0)
	v41 = d0
	Mem0[a4 + 18336:word32] = v41
	CVZN = cond(v41)
	v42 = 0x000000CD
	Mem0[a4 + 8240:word32] = v42
	CVZN = cond(v42)
	d0 = -1
	CVZN = cond(d0)
	goto l00008DDC
	// succ:  l00008DDC
l00008CD8:
	v55 = Mem0[a4 + 7804:word32]
	a7 = a7 - 0x00000004
	v56 = v55
	Mem0[a7:word32] = v56
	CVZN = cond(v56)
	call fn000087A0 (retsize: 4;)
	a7 = a7 + 0x0004
	Mem0[a4 + 7804:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v58 = Mem0[a4 + 8268:word32]
	Mem0[a4 + 18348:word32] = v58
	CVZN = cond(v58)
	// succ:  l00008CEC
l00008CEC:
	v43 = Mem0[a4 + 7808:word32]
	a7 = a7 - 0x00000004
	v44 = v43
	Mem0[a7:word32] = v44
	CVZN = cond(v44)
	call fn00007B30 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	v45 = d0
	Mem0[a4 + 7808:word32] = v45
	CVZN = cond(v45)
	call fn0000843C (retsize: 4;)
	a7 = a7 + 0x0008
	d6 = 0
	CVZN = cond(d6)
	v46 = d0
	Mem0[a5 + -8:word32] = v46
	CVZN = cond(v46)
	// succ:  l00008D08
l00008D08:
	a0 = a2
	// succ:  l00008D0A
l00008D0A:
	v47 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v47 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00008D0A
	// succ:  l00008D0E l00008D0A
l00008D0E:
	a0 = a0 - 0x00000001
	a0 = a0 - a2
	CVZNX = cond(a0)
	v49 = d6 - a0
	CVZN = cond(v49)
	branch Test(GE,VN) l00008D2A
	// succ:  l00008D16 l00008D2A
l00008D16:
	v51 = Mem0[a2 + d6:byte]
	d0 = DPB(d0, v51, 0)
	CVZN = cond(v51)
	d1 = 63
	CVZN = cond(d1)
	v52 = (byte) d0 - (byte) d1
	CVZN = cond(v52)
	branch Test(EQ,Z) l00008D2A
	// succ:  l00008D20 l00008D2A
l00008D20:
	d1 = 35
	CVZN = cond(d1)
	v53 = (byte) d0 - (byte) d1
	CVZN = cond(v53)
	branch Test(EQ,Z) l00008D2A
	// succ:  l00008D26 l00008D2A
l00008D26:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	goto l00008D08
	// succ:  l00008D08
l00008D2A:
	a0 = a2
	// succ:  l00008D2C
l00008D2C:
	v59 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v59 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00008D2C
	// succ:  l00008D30 l00008D2C
l00008D30:
	a0 = a0 - 0x00000001
	a0 = a0 - a2
	CVZNX = cond(a0)
	v60 = d6 - a0
	CVZN = cond(v60)
	branch Test(NE,Z) l00008D86
	// succ:  l00008D38 l00008D86
l00008D38:
	ZN = cond(Mem0[a4 + 18316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008D86
	// succ:  l00008D3E l00008D86
l00008D3E:
	v61 = Mem0[a4 + 18344:word32]
	a7 = a7 - 0x00000004
	v62 = v61
	Mem0[a7:word32] = v62
	CVZN = cond(v62)
	a7 = a7 - 0x00000004
	v63 = a2
	Mem0[a7:word32] = v63
	CVZN = cond(v63)
	v64 = Mem0[a5 + -8:word32]
	a7 = a7 - 0x00000004
	v65 = v64
	Mem0[a7:word32] = v65
	CVZN = cond(v65)
	call fn00008F10 (retsize: 4;)
	d6 = d0
	CVZN = cond(d6)
	a0 = Mem0[a5 + -8:word32]
	a1 = a3
	d0 = 64
	CVZN = cond(d0)
	// succ:  l00008D56
l00008D56:
	v66 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v67 = v66
	Mem0[a1:word32] = v67
	a1 = a1 + 0x00000004
	CVZN = cond(v67)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00008D56
	// succ:  l00008D5C l00008D56
l00008D5C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	v68 = Mem0[a5 + -8:word32]
	a7 = a7 - 0x00000004
	v69 = v68
	Mem0[a7:word32] = v69
	CVZN = cond(v69)
	call fn00007E4C (retsize: 4;)
	a7 = a7 + 20
	d0 = Mem0[a4 + 18348:word32]
	CVZN = cond(d0)
	d1 = Mem0[a4 + 8268:word32]
	CVZN = cond(d1)
	v70 = d1 - d0
	CVZN = cond(v70)
	branch Test(EQ,Z) l00008D82
	// succ:  l00008D78 l00008D82
l00008D78:
	d1 = d0
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	MakeFunctions(a0, a1, a2)
	// succ:  l00008D82
l00008D82:
	d0 = d6
	CVZN = cond(d0)
	goto l00008DDC
	// succ:  l00008DDC
l00008D86:
	d1 = Mem0[a4 + 18348:word32]
	CVZN = cond(d1)
	d2 = Mem0[a5 + -8:word32]
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	InitResident(a1, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008DB6
	// succ:  l00008D9A l00008DB6
l00008D9A:
	d0 = 20
	CVZN = cond(d0)
	v71 = d0
	Mem0[a4 + 18336:word32] = v71
	CVZN = cond(v71)
	v72 = 0x000000CC
	Mem0[a4 + 8240:word32] = v72
	CVZN = cond(v72)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	a7 = a7 - 0x00000004
	v73 = d2
	Mem0[a7:word32] = v73
	CVZN = cond(v73)
	call fn00007E4C (retsize: 4;)
	d0 = -1
	CVZN = cond(d0)
	goto l00008DDC
	// succ:  l00008DDC
l00008DB6:
	v74 = Mem0[a5 + -8:word32]
	a7 = a7 - 0x00000004
	v75 = v74
	Mem0[a7:word32] = v75
	CVZN = cond(v75)
	call fn00008E70 (retsize: 4;)
	d6 = d0
	CVZN = cond(d6)
	a0 = Mem0[a5 + -8:word32]
	a1 = a3
	d0 = 64
	CVZN = cond(d0)
	// succ:  l00008DC8
l00008DC8:
	v76 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v77 = v76
	Mem0[a1:word32] = v77
	a1 = a1 + 0x00000004
	CVZN = cond(v77)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00008DC8
	// succ:  l00008DCE l00008DC8
l00008DCE:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	v78 = Mem0[a5 + -8:word32]
	a7 = a7 - 0x00000004
	v79 = v78
	Mem0[a7:word32] = v79
	CVZN = cond(v79)
	call fn00007E4C (retsize: 4;)
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00008DDC
l00008DDC:
	v54 = a5 + -320
	d2 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	d6 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	d7 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	a2 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	a3 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	a6 = Mem0[v54:word32]
	v54 = v54 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008C08_exit
fn00008C08_exit:


// fn00008DE8
// Return size: 4
void fn00008DE8()
fn00008DE8_entry:
	// succ:  l00008DE8
l00008DE8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 24:word32]
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond(Mem0[a4 + 7808:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008DFE
	// succ:  l00008DFA l00008DFE
l00008DFA:
	d0 = -1
	CVZN = cond(d0)
	goto l00008E6A
	// succ:  l00008E6A
l00008DFE:
	d0 = Mem0[a4 + 7804:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00008E2A
	// succ:  l00008E04 l00008E2A
l00008E04:
	d1 = d0
	CVZN = cond(d1)
	d2 = -2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	MakeLibrary(a0, a1, a2, d0, d1)
	v20 = d0
	Mem0[a4 + 18348:word32] = v20
	CVZN = cond(v20)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008E30
	// succ:  l00008E18 l00008E30
l00008E18:
	d0 = 2
	CVZN = cond(d0)
	v21 = d0
	Mem0[a4 + 18336:word32] = v21
	CVZN = cond(v21)
	v22 = 0x000000CD
	Mem0[a4 + 8240:word32] = v22
	CVZN = cond(v22)
	d0 = -1
	CVZN = cond(d0)
	goto l00008E6A
	// succ:  l00008E6A
l00008E2A:
	v29 = Mem0[a4 + 8268:word32]
	Mem0[a4 + 18348:word32] = v29
	CVZN = cond(v29)
	// succ:  l00008E30
l00008E30:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	call fn0000843C (retsize: 4;)
	a2 = d0
	a0 = a3
	a1 = a2
	d0 = 64
	CVZN = cond(d0)
	// succ:  l00008E40
l00008E40:
	v23 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v24 = v23
	Mem0[a1:word32] = v24
	a1 = a1 + 0x00000004
	CVZN = cond(v24)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00008E40
	// succ:  l00008E46 l00008E40
l00008E46:
	v25 = a2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00008E70 (retsize: 4;)
	d7 = d0
	CVZN = cond(d7)
	a0 = a2
	a1 = a3
	d0 = 64
	CVZN = cond(d0)
	// succ:  l00008E54
l00008E54:
	v26 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v27 = v26
	Mem0[a1:word32] = v27
	a1 = a1 + 0x00000004
	CVZN = cond(v27)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00008E54
	// succ:  l00008E5A l00008E54
l00008E5A:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	a7 = a7 - 0x00000004
	v28 = a2
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00007E4C (retsize: 4;)
	a7 = a7 + 12
	d0 = d7
	CVZN = cond(d0)
	// succ:  l00008E6A
l00008E6A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008DE8_exit
fn00008DE8_exit:


// fn00008E70
// Return size: 4
void fn00008E70()
fn00008E70_entry:
	// succ:  l00008E70
l00008E70:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 24:word32]
	d7 = 0
	CVZN = cond(d7)
	// succ:  l00008E7A
l00008E7A:
	d0 = 116
	CVZN = cond(d0)
	d0 = d0 + d0
	CVZNX = cond(d0)
	v11 = d7 - d0
	CVZN = cond(v11)
	branch Test(EQ,Z) l00008EE6
	// succ:  l00008E82 l00008EE6
l00008E82:
	d1 = Mem0[a4 + 18348:word32]
	CVZN = cond(d1)
	d2 = a3
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	Alert(d7)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008E9C
	// succ:  l00008E94 l00008E9C
l00008E94:
	Forbid()
	d7 = d0
	CVZN = cond(d7)
	goto l00008E7A
	// succ:  l00008E7A
l00008E9C:
	ZN = cond(Mem0[a4 + 18344:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008EAA
	// succ:  l00008EA2 l00008EAA
l00008EA2:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,VZN) l00008E7A
	// succ:  l00008EAA l00008E7A
l00008EAA:
	ZN = cond(Mem0[a4 + 18316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008ECE
	// succ:  l00008EB0 l00008ECE
l00008EB0:
	a0 = a3 + 8
	a7 = a7 - 0x00000004
	v24 = a0
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call fn00007B30 (retsize: 4;)
	v25 = Mem0[a4 + 7808:word32]
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	a7 = a7 - 0x00000004
	v26 = d0
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	call fn00007C24 (retsize: 4;)
	a7 = a7 + 0x0008
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008EE6
	// succ:  l00008ECC l00008EE6
l00008ECC:
	goto l00008E7A
	// succ:  l00008E7A
l00008ECE:
	a0 = a3 + 8
	v27 = Mem0[a4 + 7808:word32]
	a7 = a7 - 0x00000004
	v28 = v27
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a7 = a7 - 0x00000004
	v29 = a0
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn00009488 (retsize: 4;)
	a7 = a7 + 0x0008
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008EE6
	// succ:  l00008EE4 l00008EE6
l00008EE4:
	goto l00008E7A
	// succ:  l00008E7A
l00008EE6:
	d0 = Mem0[a4 + 18348:word32]
	CVZN = cond(d0)
	d1 = Mem0[a4 + 8268:word32]
	CVZN = cond(d1)
	v18 = d1 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l00008EFC
	// succ:  l00008EF2 l00008EFC
l00008EF2:
	d1 = d0
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	MakeFunctions(a0, a1, a2)
	// succ:  l00008EFC
l00008EFC:
	d0 = 116
	CVZN = cond(d0)
	d0 = d0 + d0
	CVZNX = cond(d0)
	v22 = d7 - d0
	CVZN = cond(v22)
	branch Test(NE,Z) l00008F08
	// succ:  l00008F04 l00008F08
l00008F04:
	d0 = 1
	CVZN = cond(d0)
	goto l00008F0A
	// succ:  l00008F0A
l00008F08:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00008F0A
l00008F0A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008E70_exit
fn00008E70_exit:


// fn00008F10
// Return size: 4
void fn00008F10()
fn00008F10_entry:
	// succ:  l00008F10
l00008F10:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x0000000C
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = a2
	CVZN = cond(d1)
	d2 = -2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	MakeLibrary(a0, a1, a2, d0, d1)
	d6 = d0
	CVZN = cond(d6)
	ZN = cond(d6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008F48
	// succ:  l00008F36 l00008F48
l00008F36:
	d0 = 2
	CVZN = cond(d0)
	v22 = d0
	Mem0[a4 + 18336:word32] = v22
	CVZN = cond(v22)
	v23 = 0x000000CD
	Mem0[a4 + 8240:word32] = v23
	CVZN = cond(v23)
	d0 = -1
	CVZN = cond(d0)
	goto l00008F9A
	// succ:  l00008F9A
l00008F48:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	call fn00008504 (retsize: 4;)
	a7 = a7 + 0x0004
	v24 = d0
	Mem0[a5 + -12:word32] = v24
	CVZN = cond(v24)
	d1 = d6
	CVZN = cond(d1)
	d2 = d0
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	InitResident(a1, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008F78
	// succ:  l00008F66 l00008F78
l00008F66:
	d0 = 2
	CVZN = cond(d0)
	v25 = d0
	Mem0[a4 + 18336:word32] = v25
	CVZN = cond(v25)
	v26 = 0x000000CD
	Mem0[a4 + 8240:word32] = v26
	CVZN = cond(v26)
	d7 = -1
	CVZN = cond(d7)
	goto l00008F80
	// succ:  l00008F80
l00008F78:
	d1 = d6
	CVZN = cond(d1)
	MakeFunctions(a0, a1, a2)
	d7 = 0
	CVZN = cond(d7)
	// succ:  l00008F80
l00008F80:
	a0 = d2
	a1 = a3
	d0 = 64
	CVZN = cond(d0)
	// succ:  l00008F86
l00008F86:
	v28 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	v29 = v28
	Mem0[a1:word32] = v29
	a1 = a1 + 0x00000004
	CVZN = cond(v29)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00008F86
	// succ:  l00008F8C l00008F86
l00008F8C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000104
	v30 = Mem0[a5 + -12:word32]
	a7 = a7 - 0x00000004
	v31 = v30
	Mem0[a7:word32] = v31
	CVZN = cond(v31)
	call fn00007E4C (retsize: 4;)
	d0 = d7
	CVZN = cond(d0)
	// succ:  l00008F9A
l00008F9A:
	v27 = a5 + -36
	d2 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	d6 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	d7 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	a2 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	a3 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	a6 = Mem0[v27:word32]
	v27 = v27 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008F10_exit
fn00008F10_exit:


// fn00008FB8
// Return size: 4
void fn00008FB8()
fn00008FB8_entry:
	// succ:  l00008FB8
l00008FB8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000004
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008FCE
	// succ:  l00008FCA l00008FCE
l00008FCA:
	call fn0000943C (retsize: 4;)
	// succ:  l00008FCE
l00008FCE:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = a3
	CVZN = cond(d1)
	d2 = -2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	MakeLibrary(a0, a1, a2, d0, d1)
	d7 = d0
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00008FEE
	// succ:  l00008FE4 l00008FEE
l00008FE4:
	d1 = d7
	CVZN = cond(d1)
	MakeFunctions(a0, a1, a2)
	d0 = -1
	CVZN = cond(d0)
	goto l00009014
	// succ:  l00009014
l00008FEE:
	d1 = a3
	CVZN = cond(d1)
	d2 = 0x000003EE
	CVZN = cond(d2)
	Supervisor(a5)
	d7 = d0
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009012
	// succ:  l00009000 l00009012
l00009000:
	Forbid()
	v21 = d0
	Mem0[a4 + 8240:word32] = v21
	CVZN = cond(v21)
	d0 = 2
	CVZN = cond(d0)
	v22 = d0
	Mem0[a4 + 18336:word32] = v22
	CVZN = cond(v22)
	d0 = -1
	CVZN = cond(d0)
	goto l00009014
	// succ:  l00009014
l00009012:
	d0 = d7
	CVZN = cond(d0)
	// succ:  l00009014
l00009014:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00008FB8_exit
fn00008FB8_exit:


// fn0000901C
// Return size: 4
void fn0000901C()
fn0000901C_entry:
	// succ:  l0000901C
l0000901C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000004
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a5 + 8:word32]
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00009032
	// succ:  l0000902E l00009032
l0000902E:
	call fn0000943C (retsize: 4;)
	// succ:  l00009032
l00009032:
	Mem0[a4 + 8240:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d1 = a3
	CVZN = cond(d1)
	d2 = -2
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	MakeLibrary(a0, a1, a2, d0, d1)
	d7 = d0
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00009054
	// succ:  l00009048 l00009054
l00009048:
	d1 = d7
	CVZN = cond(d1)
	MakeFunctions(a0, a1, a2)
	d1 = a3
	CVZN = cond(d1)
	InitCode(d0, d1)
	// succ:  l00009054
l00009054:
	d1 = a3
	CVZN = cond(d1)
	d2 = 0x000003EE
	CVZN = cond(d2)
	Supervisor(a5)
	d7 = d0
	CVZN = cond(d7)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009078
	// succ:  l00009066 l00009078
l00009066:
	Forbid()
	v21 = d0
	Mem0[a4 + 8240:word32] = v21
	CVZN = cond(v21)
	d0 = 2
	CVZN = cond(d0)
	v22 = d0
	Mem0[a4 + 18336:word32] = v22
	CVZN = cond(v22)
	d0 = -1
	CVZN = cond(d0)
	goto l0000907A
	// succ:  l0000907A
l00009078:
	d0 = d7
	CVZN = cond(d0)
	// succ:  l0000907A
l0000907A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000901C_exit
fn0000901C_exit:


// fn00009084
// Return size: 4
void fn00009084()
fn00009084_entry:
	// succ:  l00009084
l00009084:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a7 + 12:word32]
	CVZN = cond(d7)
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00009096
	// succ:  l00009092 l00009096
l00009092:
	call fn0000943C (retsize: 4;)
	// succ:  l00009096
l00009096:
	d1 = d7
	CVZN = cond(d1)
	a6 = Mem0[a4 + 18340:word32]
	execPrivate1()
	d0 = 0
	CVZN = cond(d0)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00009084_exit
fn00009084_exit:


// fn000090A8
// Return size: 4
void fn000090A8()
fn000090A8_entry:
	// succ:  l000090A8
l000090A8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000058
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a1 = 0x00009142
	d0 = 0
	CVZN = cond(d0)
	a6 = Mem0[0x00000004:word32]
	d0 = OpenLibrary(a1, d0)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000090CE
	// succ:  l000090C4 l000090CE
l000090C4:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn00007698 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000090CE
l000090CE:
	d7 = 0
	CVZN = cond(d7)
	a0 = Mem0[a4 + 8288:word32]
	v13 = Mem0[a0 + -1:byte]
	d7 = DPB(d7, v13, 0)
	CVZN = cond(v13)
	d0 = d7
	CVZN = cond(d0)
	a1 = a5 + -80
	goto l000090E2
	// succ:  l000090E2
l000090E0:
	v26 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	v27 = v26
	Mem0[a1:byte] = v27
	a1 = a1 + 0x00000001
	CVZN = cond(v27)
	// succ:  l000090E2
l000090E2:
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(UGE,C) l000090E0
	// succ:  l000090E6 l000090E0
l000090E6:
	Mem0[a5 + d7:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a0 = a5 + -80
	v18 = a0
	Mem0[a4 + 7824:word32] = v18
	CVZN = cond(v18)
	a7 = a7 - 0x00000004
	v19 = a3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000028
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000000FA
	d0 = 0
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v20 = d0
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = d0
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7852
	d1 = 0
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v23 = d1
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4 + 7832
	a7 = a7 - 0x00000004
	v24 = d1
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call fn00006078 (retsize: 4;)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn00007698 (retsize: 4;)
	v25 = a5 + -100
	d7 = Mem0[v25:word32]
	v25 = v25 + 0x00000004
	a3 = Mem0[v25:word32]
	v25 = v25 + 0x00000004
	a6 = Mem0[v25:word32]
	v25 = v25 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000090A8_exit
fn000090A8_exit:


// fn00009154
// Return size: 4
void fn00009154()
fn00009154_entry:
	// succ:  l00009154
l00009154:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = d0
	CVZN = cond(d2)
	d3 = d1
	CVZN = cond(d3)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d0 = d0 *u (word16) d1
	VZN = cond(d0)
	C = false
	v12 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v12, 0)
	CVZNX = cond(v12)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00009154_exit
fn00009154_exit:


// fn00009174
// Return size: 4
void fn00009174()
fn00009174_entry:
	// succ:  l00009174
l00009174:
	a7 = fp
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00009196
	// succ:  l0000917A l00009196
l0000917A:
	d0 = -d0
	CVZNX = cond(d0)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000918C
	// succ:  l00009182 l0000918C
l00009182:
	d1 = -d1
	CVZNX = cond(d1)
	call fn000091A6 (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn00009174_exit
l0000918C:
	call fn000091A6 (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn00009174_exit
l00009196:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00009198_thunk_fn000091A6
	goto l0000919C
	// succ:  l0000919C l00009198_thunk_fn000091A6
l00009198_thunk_fn000091A6:
	call fn000091A6 (retsize: 4;)
	return
	// succ:  fn00009174_exit
l0000919C:
	d1 = -d1
	CVZNX = cond(d1)
	call fn000091A6 (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	return
	// succ:  fn00009174_exit
fn00009174_exit:


// fn000091A6
// Return size: 4
void fn000091A6()
fn000091A6_entry:
	// succ:  l000091A6
l000091A6:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = d2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v10 = (word16) d1
	d2 = DPB(d2, v10, 0)
	CVZN = cond(v10)
	branch Test(NE,Z) l000091D0
	// succ:  l000091B0 l000091D0
l000091B0:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v13 = (word16) d0
	d2 = DPB(d2, v13, 0)
	CVZN = cond(v13)
	branch Test(EQ,Z) l000091C0
	// succ:  l000091BC l000091C0
l000091BC:
	v14 = (uint16) (d2 % (uint16) d1)
	v15 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v14, 16)
	d2 = DPB(d2, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) d2
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	// succ:  l000091C0
l000091C0:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v26 = (word16) d0
	d2 = DPB(d2, v26, 0)
	CVZN = cond(v26)
	v27 = (uint16) (d2 % (uint16) d1)
	v28 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v27, 16)
	d2 = DPB(d2, v28, 0)
	VZN = cond(v28)
	C = false
	v29 = (word16) d2
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v30 = (word16) d2
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	v31 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v31
	CVZN = cond(d2)
	return
	// succ:  fn000091A6_exit
l000091D0:
	a7 = a7 - 0x00000004
	v19 = d3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	d3 = 16
	CVZN = cond(d3)
	v20 = (word16) d1 - 0x0080
	CVZN = cond(v20)
	branch Test(UGE,C) l000091E0
	// succ:  l000091DC l000091E0
l000091DC:
	d1 = __rol(d1, 0x00000008)
	CZN = cond(d1)
	V = false
	v22 = (word16) d3 - 0x0008
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	// succ:  l000091E0
l000091E0:
	v24 = (word16) d1 - 0x0800
	CVZN = cond(v24)
	branch Test(UGE,C) l000091EC
	// succ:  l000091E8 l000091EC
l000091E8:
	d1 = __rol(d1, 0x00000004)
	CZN = cond(d1)
	V = false
	v25 = (word16) d3 - 0x0004
	d3 = DPB(d3, v25, 0)
	CVZNX = cond(v25)
	// succ:  l000091EC
l000091EC:
	v32 = (word16) d1 - 0x2000
	CVZN = cond(v32)
	branch Test(UGE,C) l000091F8
	// succ:  l000091F4 l000091F8
l000091F4:
	d1 = __rol(d1, 0x00000002)
	CZN = cond(d1)
	V = false
	v33 = (word16) d3 - 0x0002
	d3 = DPB(d3, v33, 0)
	CVZNX = cond(v33)
	// succ:  l000091F8
l000091F8:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l00009202
	// succ:  l000091FE l00009202
l000091FE:
	d1 = __rol(d1, 0x00000001)
	CZN = cond(d1)
	V = false
	v35 = (word16) d3 - 0x0001
	d3 = DPB(d3, v35, 0)
	CVZNX = cond(v35)
	// succ:  l00009202
l00009202:
	v36 = (word16) d0
	d2 = DPB(d2, v36, 0)
	CVZN = cond(v36)
	d0 = d0 >>u d3
	CVZNX = cond(d0)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 >>u d3
	CVZNX = cond(d2)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v38 = (uint16) (d0 % (uint16) d1)
	v39 = (uint16) (d0 /u (uint16) d1)
	d0 = DPB(d0, v38, 16)
	d0 = DPB(d0, v39, 0)
	VZN = cond(v39)
	C = false
	v40 = (word16) d0
	d3 = DPB(d3, v40, 0)
	CVZN = cond(v40)
	v41 = (word16) d2
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d3
	d2 = DPB(d2, v42, 0)
	CVZN = cond(v42)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d0 = d0 - d2
	CVZNX = cond(d0)
	branch Test(UGE,C) l00009226
	// succ:  l00009220 l00009226
l00009220:
	v43 = (word16) d3 - 0x0001
	d3 = DPB(d3, v43, 0)
	CVZNX = cond(v43)
	d0 = d0 + d1
	CVZNX = cond(d0)
	// succ:  l00009224
l00009224:
	branch Test(UGE,C) l00009224
	// succ:  l00009226 l00009224
l00009226:
	d1 = 0
	CVZN = cond(d1)
	v44 = (word16) d3
	d1 = DPB(d1, v44, 0)
	CVZN = cond(v44)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d0 = __rol(d0, d3)
	CZN = cond(d0)
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v45 = d0
	d0 = d1
	d1 = v45
	ZN = cond(d1)
	C = false
	V = false
	v46 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v46
	CVZN = cond(d3)
	v47 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v47
	CVZN = cond(d2)
	return
	// succ:  fn000091A6_exit
fn000091A6_exit:


// fn0000936C
// Return size: 4
void fn0000936C()
fn0000936C_entry:
	// succ:  l0000936C
l0000936C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = Mem0[a7 + 12:word32]
	CVZN = cond(d7)
	a7 = a7 - 0x00000004
	v6 = d7
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	call fn000093F4 (retsize: 4;)
	a7 = a7 + 0x0004
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00009386
	// succ:  l00009382 l00009386
l00009382:
	d0 = -1
	CVZN = cond(d0)
	goto l000093AE
	// succ:  l000093AE
l00009386:
	Z = __btst(Mem0[a3 + 3:byte], 0x0004)
	branch Test(EQ,Z) l00009394
	// succ:  l0000938E l00009394
l0000938E:
	d0 = 0
	CVZN = cond(d0)
	v9 = d0
	Mem0[a3:word32] = v9
	CVZN = cond(v9)
	goto l000093AE
	// succ:  l000093AE
l00009394:
	v10 = Mem0[a3 + 4:word32]
	a7 = a7 - 0x00000004
	v11 = v10
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00009084 (retsize: 4;)
	a7 = a7 + 0x0004
	d0 = 0
	CVZN = cond(d0)
	v12 = d0
	Mem0[a3:word32] = v12
	CVZN = cond(v12)
	ZN = cond(Mem0[a4 + 8240:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000093AC
	// succ:  l000093A8 l000093AC
l000093A8:
	d0 = -1
	CVZN = cond(d0)
	goto l000093AE
	// succ:  l000093AE
l000093AC:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l000093AE
l000093AE:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000936C_exit
fn0000936C_exit:


// fn000093B4
// Return size: 4
void fn000093B4()
fn000093B4_entry:
	// succ:  l000093B4
l000093B4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = Mem0[a7 + 24:word32]
	d7 = Mem0[a7 + 28:word32]
	CVZN = cond(d7)
	d6 = d7
	CVZN = cond(d6)
	d6 = ~d6
	ZN = cond(d6)
	C = false
	V = false
	d0 = -16
	CVZN = cond(d0)
	d6 = d6 ^ d0
	ZN = cond(d6)
	C = false
	V = false
	d1 = a3
	CVZN = cond(d1)
	d2 = d6
	CVZN = cond(d2)
	a6 = Mem0[a4 + 18340:word32]
	d0 = Allocate(a0, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000093EA
	// succ:  l000093D8 l000093EA
l000093D8:
	d0 = 2
	CVZN = cond(d0)
	v17 = d0
	Mem0[a4 + 18336:word32] = v17
	CVZN = cond(v17)
	v18 = 0x000000CD
	Mem0[a4 + 8240:word32] = v18
	CVZN = cond(v18)
	d0 = -1
	CVZN = cond(d0)
	goto l000093EC
	// succ:  l000093EC
l000093EA:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l000093EC
l000093EC:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000093B4_exit
fn000093B4_exit:


// fn000093F4
// Return size: 4
void fn000093F4()
fn000093F4_entry:
	// succ:  l000093F4
l000093F4:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = d7
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d7 = Mem0[a7 + 8:word32]
	CVZN = cond(d7)
	d0 = 0
	CVZN = cond(d0)
	v8 = d0
	Mem0[a4 + 8240:word32] = v8
	CVZN = cond(v8)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00009426
	// succ:  l00009404 l00009426
l00009404:
	v13 = d7 - Mem0[a4 + 7640:word32]
	CVZN = cond(v13)
	branch Test(GE,VN) l00009426
	// succ:  l0000940A l00009426
l0000940A:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	ZN = cond(Mem0[a0 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00009426
	// succ:  l00009418 l00009426
l00009418:
	d0 = d7
	CVZN = cond(d0)
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	a0 = a4 + 17760
	a0 = a0 + d0
	d0 = a0
	CVZN = cond(d0)
	goto l0000942E
	// succ:  l0000942E
l00009426:
	d0 = 9
	CVZN = cond(d0)
	v18 = d0
	Mem0[a4 + 18336:word32] = v18
	CVZN = cond(v18)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000942E
l0000942E:
	v19 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = v19
	CVZN = cond(d7)
	return
	// succ:  fn000093F4_exit
fn000093F4_exit:


// fn0000943C
// Return size: 4
void fn0000943C()
fn0000943C_entry:
	// succ:  l0000943C
l0000943C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00003000
	CVZN = cond(d1)
	a6 = Mem0[0x00000004:word32]
	SetSignal(d0, d1)
	d7 = d0
	CVZN = cond(d7)
	d7 = d7 & 0x00003000
	ZN = cond(d7)
	C = false
	V = false
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000947C
	// succ:  l0000945C l0000947C
l0000945C:
	ZN = cond(Mem0[a4 + 8264:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000947C
	// succ:  l00009462 l0000947C
l00009462:
	a0 = Mem0[a4 + 8264:word32]
	call a0 (retsize: 4;)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000946E
	// succ:  l0000946C l0000946E
l0000946C:
	goto l0000947C
	// succ:  l0000947C
l0000946E:
	Mem0[a4 + 8264:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn00007698 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000947C
l0000947C:
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000943C_exit
fn0000943C_exit:


// fn00009488
// Return size: 4
void fn00009488()
fn00009488_entry:
	// succ:  l00009488
l00009488:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000030
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a3 = Mem0[a5 + 8:word32]
	a2 = Mem0[a5 + 12:word32]
	d6 = 0
	CVZN = cond(d6)
	v10 = a3
	Mem0[a5 + -4:word32] = v10
	CVZN = cond(v10)
	// succ:  l0000949E
l0000949E:
	v11 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v11, 0)
	CVZN = cond(v11)
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000095AE
	// succ:  l000094A6 l000095AE
l000094A6:
	d0 = 0
	CVZN = cond(d0)
	v17 = (byte) d7
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	v18 = (word16) d0 - 0x0023
	d0 = DPB(d0, v18, 0)
	CVZNX = cond(v18)
	branch Test(EQ,Z) l000094CA
	// succ:  l000094B0 l000094CA
l000094B0:
	v20 = (word16) d0 - 0x0004
	d0 = DPB(d0, v20, 0)
	CVZNX = cond(v20)
	branch Test(EQ,Z) l0000955C
	// succ:  l000094B6 l0000955C
l000094B6:
	v21 = (word16) d0 - 0x0018
	d0 = DPB(d0, v21, 0)
	CVZNX = cond(v21)
	branch Test(NE,Z) l00009586
	// succ:  l000094BE l00009586
l000094BE:
	v22 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	ZN = cond((byte) d0 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000949E
	// succ:  l000094C4 l0000949E
l000094C4:
	d0 = 0
	CVZN = cond(d0)
	goto l000095BC
	// succ:  l000095BC
l000094CA:
	v37 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v37, 0)
	CVZN = cond(v37)
	d0 = 0
	CVZN = cond(d0)
	v38 = (byte) d7
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	v39 = (word16) d0 - 0x0028
	d0 = DPB(d0, v39, 0)
	CVZNX = cond(v39)
	branch Test(EQ,Z) l000094F0
	// succ:  l000094D6 l000094F0
l000094D6:
	v40 = (word16) d0 - 0x0017
	d0 = DPB(d0, v40, 0)
	CVZNX = cond(v40)
	branch Test(NE,Z) l0000952C
	// succ:  l000094DC l0000952C
l000094DC:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000949E
	// succ:  l000094E0 l0000949E
l000094E0:
	a7 = a7 - 0x00000004
	v41 = a2
	Mem0[a7:word32] = v41
	CVZN = cond(v41)
	a7 = a7 - 0x00000004
	v42 = a3
	Mem0[a7:word32] = v42
	CVZN = cond(v42)
	call fn00009488 (retsize: 4;)
	a7 = a7 + 0x0008
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000949E
	// succ:  l000094EC l0000949E
l000094EC:
	a3 = a3 + 0x00000001
	goto l000094DC
	// succ:  l000094DC
l000094F0:
	v43 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v43, 0)
	CVZN = cond(v43)
	d0 = 41
	CVZN = cond(d0)
	v44 = (byte) d7 - (byte) d0
	CVZN = cond(v44)
	branch Test(EQ,Z) l00009504
	// succ:  l000094F8 l00009504
l000094F8:
	a0 = d6
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d0 = a0
	CVZN = cond(d0)
	v46 = (byte) d7
	Mem0[a7 + -37 + d0:byte] = v46
	CVZN = cond(v46)
	goto l000094F0
	// succ:  l000094F0
l00009504:
	Mem0[a5 + d6:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00009508
l00009508:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -37
	a7 = a7 - 0x00000004
	v55 = a3
	Mem0[a7:word32] = v55
	CVZN = cond(v55)
	call fn000095C4 (retsize: 4;)
	a7 = a7 + 0x0008
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000949E
	// succ:  l00009518 l0000949E
l00009518:
	a0 = a5 + -37
	a1 = a0
	// succ:  l0000951E
l0000951E:
	v57 = Mem0[a1:byte]
	a1 = a1 + 0x00000001
	ZN = cond(v57 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000951E
	// succ:  l00009522 l0000951E
l00009522:
	a1 = a1 - 0x00000001
	a1 = a1 - a0
	CVZNX = cond(a1)
	d0 = a1
	CVZN = cond(d0)
	a3 = a3 + d0
	goto l00009508
	// succ:  l00009508
l0000952C:
	d5 = d7
	CVZN = cond(d5)
	// succ:  l0000952E
l0000952E:
	v47 = Mem0[a3:byte]
	d0 = DPB(d0, v47, 0)
	CVZN = cond(v47)
	branch Test(EQ,Z) l0000949E
	// succ:  l00009534 l0000949E
l00009534:
	d1 = 0
	CVZN = cond(d1)
	v48 = (byte) d0
	d1 = DPB(d1, v48, 0)
	CVZN = cond(v48)
	a7 = a7 - 0x00000004
	v49 = d1
	Mem0[a7:word32] = v49
	CVZN = cond(v49)
	call fn000077BC (retsize: 4;)
	d1 = 0
	CVZN = cond(d1)
	v50 = (byte) d5
	d1 = DPB(d1, v50, 0)
	CVZN = cond(v50)
	v51 = d1
	Mem0[a7:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a7 + 24:word32] = v52
	CVZN = cond(v52)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	d1 = Mem0[a7 + 20:word32]
	CVZN = cond(d1)
	v53 = d1 - d0
	CVZN = cond(v53)
	branch Test(NE,Z) l0000949E
	// succ:  l00009558 l0000949E
l00009558:
	a3 = a3 + 0x00000001
	goto l0000952E
	// succ:  l0000952E
l0000955C:
	v30 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d7 = DPB(d7, v30, 0)
	CVZN = cond(v30)
	d0 = 0
	CVZN = cond(d0)
	v31 = (byte) d7
	d0 = DPB(d0, v31, 0)
	CVZN = cond(v31)
	a7 = a7 - 0x00000004
	v32 = d0
	Mem0[a7:word32] = v32
	CVZN = cond(v32)
	call fn000077BC (retsize: 4;)
	d1 = 0
	CVZN = cond(d1)
	v33 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d1 = DPB(d1, v33, 0)
	CVZN = cond(v33)
	v34 = d1
	Mem0[a7:word32] = v34
	CVZN = cond(v34)
	v35 = d0
	Mem0[a7 + 24:word32] = v35
	CVZN = cond(v35)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	d1 = Mem0[a7 + 20:word32]
	CVZN = cond(d1)
	v36 = d1 - d0
	CVZN = cond(v36)
	branch Test(EQ,Z) l0000949E
	// succ:  l00009582 l0000949E
l00009582:
	d0 = 0
	CVZN = cond(d0)
	goto l000095BC
	// succ:  l000095BC
l00009586:
	d0 = 0
	CVZN = cond(d0)
	v23 = (byte) d7
	d0 = DPB(d0, v23, 0)
	CVZN = cond(v23)
	a7 = a7 - 0x00000004
	v24 = d0
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call fn000077BC (retsize: 4;)
	d1 = 0
	CVZN = cond(d1)
	v26 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d1 = DPB(d1, v26, 0)
	CVZN = cond(v26)
	v27 = d1
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	v28 = d0
	Mem0[a7 + 24:word32] = v28
	CVZN = cond(v28)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	d1 = Mem0[a7 + 20:word32]
	CVZN = cond(d1)
	v29 = d1 - d0
	CVZN = cond(v29)
	branch Test(EQ,Z) l0000949E
	// succ:  l000095AA l0000949E
l000095AA:
	d0 = 0
	CVZN = cond(d0)
	goto l000095BC
	// succ:  l000095BC
l000095AE:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000095B6
	// succ:  l000095B2 l000095B6
l000095B2:
	d0 = 0
	CVZN = cond(d0)
	goto l000095BC
	// succ:  l000095BC
l000095B6:
	d0 = a3
	CVZN = cond(d0)
	d0 = d0 - Mem0[a5 + -4:word32]
	CVZNX = cond(d0)
	// succ:  l000095BC
l000095BC:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00009488_exit
fn00009488_exit:


// fn000095C4
// Return size: 4
void fn000095C4()
fn000095C4_entry:
	// succ:  l000095C4
l000095C4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a5 = a7
	a7 = a7 - 0x00000004
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = Mem0[a7 + 20:word32]
	a2 = Mem0[a7 + 24:word32]
	// succ:  l000095D4
l000095D4:
	ZN = cond(Mem0[a2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000095FE
	// succ:  l000095D8 l000095FE
l000095D8:
	d0 = 0
	CVZN = cond(d0)
	v12 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d0 = DPB(d0, v12, 0)
	CVZN = cond(v12)
	a7 = a7 - 0x00000004
	v13 = d0
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000077BC (retsize: 4;)
	d1 = 0
	CVZN = cond(d1)
	v15 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v15, 0)
	CVZN = cond(v15)
	v16 = d1
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = d0
	Mem0[a7 + 12:word32] = v17
	CVZN = cond(v17)
	call fn000077BC (retsize: 4;)
	a7 = a7 + 0x0004
	d1 = Mem0[a7 + 8:word32]
	CVZN = cond(d1)
	v18 = d1 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l000095D4
	// succ:  l000095FA l000095D4
l000095FA:
	d0 = 0
	CVZN = cond(d0)
	goto l00009600
	// succ:  l00009600
l000095FE:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l00009600
l00009600:
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a5
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000095C4_exit
fn000095C4_exit:


