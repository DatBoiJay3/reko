// Before ///////
// proc1
// Return size: 0
void proc1()
proc1_entry:
	// succ:  l1
l1:
	Mem4[0x00010000:word32] = (int32) Mem0[ecx + (eax * 0x00000002 + 0x00000064):int16]
proc1_exit:

// After ///////
// proc1
// Return size: 0
void proc1()
proc1_entry:
	// succ:  l1
l1:
	globals->dw10000 = (int32) ecx->a0064[eax]
proc1_exit:

// Equivalence classes ////////////
Eq_1: (struct "Globals" (10000 int32 dw10000))
	globals_t (in globals : (ptr (struct "Globals")))
Eq_2: (struct "Eq_2" (64 (arr int16) a0064))
	T_2 (in ecx : word32)
// Type Variables ////////////
globals_t: (in globals : (ptr (struct "Globals")))
  Class: Eq_1
  DataType: (ptr Eq_1)
  OrigDataType: (ptr (struct "Globals"))
T_2: (in ecx : word32)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: (ptr (struct (64 (arr T_12) a0064)))
T_3: (in 0x00000064 : word32)
  Class: Eq_3
  DataType: int32
  OrigDataType: int32
T_4: (in ecx + 0x00000064 : ptr32)
  Class: Eq_4
  DataType: (ptr int16)
  OrigDataType: (ptr T_12)
T_5: (in eax : word32)
  Class: Eq_5
  DataType: ui32
  OrigDataType: ui32
T_6: (in 0x00000002 : word32)
  Class: Eq_6
  DataType: ui32
  OrigDataType: ui32
T_7: (in eax * 0x00000002 : word32)
  Class: Eq_7
  DataType: ui32
  OrigDataType: ui32
T_8: (in (ecx + 0x00000064)[eax * 0x00000002] : int16)
  Class: Eq_8
  DataType: int16
  OrigDataType: int16
T_9: (in (int32) ecx->a0064[eax] : int32)
  Class: Eq_9
  DataType: int32
  OrigDataType: int32
T_10: (in 0x00010000 : word32)
  Class: Eq_10
  DataType: (ptr int32)
  OrigDataType: (ptr (struct (0 T_11 t0000)))
T_11: (in Mem4[0x00010000:word32] : word32)
  Class: Eq_9
  DataType: int32
  OrigDataType: word32
T_12:
  Class: Eq_12
  DataType: int16
  OrigDataType: (struct 0002 (0 T_8 t0000))
