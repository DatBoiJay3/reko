 [[reko::amiga_function_vector(LayersLibrary,-78)]]  [[reko::return(register,"D0")]]  BOOLEAN  BeginUpdate( [[reko::arg(register,"A0")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-54)]]  [[reko::return(register,"D0")]]  BOOLEAN  BehindLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-42)]]  [[reko::return(register,"D0")]]  struct Layer * CreateBehindLayer( [[reko::arg(register,"A0")]] struct Layer_Info *li,[[reko::arg(register,"A1")]] struct BitMap *bm,[[reko::arg(register,"D0")]] LONG x0,[[reko::arg(register,"D1")]] LONG y0,[[reko::arg(register,"D2")]] LONG x1,[[reko::arg(register,"D3")]] LONG y1,[[reko::arg(register,"D4")]] LONG flags,[[reko::arg(register,"A2")]] struct BitMap *bm2 );
 [[reko::amiga_function_vector(LayersLibrary,-36)]]  [[reko::return(register,"D0")]]  struct Layer * CreateUpfrontLayer( [[reko::arg(register,"A0")]] struct Layer_Info *li,[[reko::arg(register,"A1")]] struct BitMap *bm,[[reko::arg(register,"D0")]] LONG x0,[[reko::arg(register,"D1")]] LONG y0,[[reko::arg(register,"D2")]] LONG x1,[[reko::arg(register,"D3")]] LONG y1,[[reko::arg(register,"D4")]] LONG flags,[[reko::arg(register,"A2")]] struct BitMap *bm2 );
 [[reko::amiga_function_vector(LayersLibrary,-90)]]  [[reko::return(register,"D0")]]  BOOLEAN  DeleteLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-150)]]   void DisposeLayerInfo( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-84)]]   void EndUpdate( [[reko::arg(register,"A0")]] struct Layer *l,[[reko::arg(register,"D0")]] USHORT flag );
 [[reko::amiga_function_vector(LayersLibrary,-156)]]   void FattenLayerInfo( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-30)]]   void InitLayers( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-174)]]  [[reko::return(register,"D0")]]  struct Region * InstallClipRegion( [[reko::arg(register,"A0")]] struct Layer *l,[[reko::arg(register,"A1")]] struct Region *region );
 [[reko::amiga_function_vector(LayersLibrary,-96)]]   void LockLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-120)]]   void LockLayerInfo( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-108)]]   void LockLayers( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-60)]]  [[reko::return(register,"D0")]]  BOOLEAN  MoveLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l,[[reko::arg(register,"D0")]] LONG dx,[[reko::arg(register,"D1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-168)]]  [[reko::return(register,"D0")]]  BOOLEAN  MoveLayerInFrontOf( [[reko::arg(register,"A0")]] struct Layer *layertomove,[[reko::arg(register,"A1")]] struct Layer *targetlayer );
 [[reko::amiga_function_vector(LayersLibrary,-144)]]  [[reko::return(register,"D0")]]  struct Layer_Info * NewLayerInfo(  );
 [[reko::amiga_function_vector(LayersLibrary,-72)]]   void ScrollLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l,[[reko::arg(register,"D0")]] LONG dx,[[reko::arg(register,"D1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-66)]]  [[reko::return(register,"D0")]]  BOOLEAN  SizeLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l,[[reko::arg(register,"D0")]] LONG dx,[[reko::arg(register,"D1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-126)]]   void SwapBitsRastPortClipRect( [[reko::arg(register,"A0")]] struct RastPort *rp,[[reko::arg(register,"A1")]] struct ClipRect *cr );
 [[reko::amiga_function_vector(LayersLibrary,-162)]]   void ThinLayerInfo( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-102)]]   void UnlockLayer( [[reko::arg(register,"A0")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-138)]]   void UnlockLayerInfo( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-114)]]   void UnlockLayers( [[reko::arg(register,"A0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-48)]]  [[reko::return(register,"DO")]]  BOOLEAN  UpfrontLayer( [[reko::arg(register,"A0")]] LONG dummy,[[reko::arg(register,"A1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-132)]]  [[reko::return(register,"D0")]]  struct Layer_Info *  WhichLayer( [[reko::arg(register,"A0")]] struct Layer_Info *li,[[reko::arg(register,"D0")]] LONG x,[[reko::arg(register,"D1")]] LONG y );
